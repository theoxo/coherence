%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%%BeginProlog
%
% FrameMaker postscript_prolog 3.0, for use with FrameMaker 3.0
% This postscript_prolog file is Copyright (c) 1986-1991 Frame Technology
% Corporation.  All rights reserved.  This postscript_prolog file may be
% freely copied and distributed in conjunction with documents created using
% FrameMaker.
% NOTE
% This file fixes the problem with NeWS printers dithering color output.
% Any questions should be sent to mickey@magickingdom.eng.sun.com
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White

/FMPrintInColor { % once-thru loop gimmick
    % See if we're a NeWSprint printer
     /currentcanvas where {
        pop systemdict /separationdict known
	exit
     } if
% originally had the following, which should always be false:
%    /currentcanvas where {
%        pop currentcanvas /Color known {
%	    currentcanvas /Color get
%	    exit
%        } if
%    } if
    systemdict /colorimage known
    systemdict /currentcolortransfer known and
exit } loop def

% Uncomment the following line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 9 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "29" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(29) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
1 K
(3) 108 712 T
(3) 108 700 T
0 18 Q
0 X
0 K
(Chapter 3) 108 684 T
1 F
(DASH Pr) 117 654 T
(ototype System) 190.13 654 T
0 12 Q
-0.04 (As stated earlier) 108 610 P
-0.04 (, the key to our investigation of scalable directory-based systems has been) 185.37 610 P
0.11 (the development of a hardware prototype of the DASH architecture. This chapter summa-) 108 594 P
0.68 (rizes the system level or) 108 578 P
0.68 (ganization and coherence protocol used in the prototype system.) 226.43 578 P
0.03 (Details of the actual hardware structures and implementation costs are given in Chapter 4.) 108 562 P
0.23 (While the prototype is not an ideal implementation of the DASH architecture, the presen-) 108 546 P
0.29 (tation in this chapter is based on the prototype because it represents a complete design. A) 108 530 P
(high-level description of a more ideal implementation of DASH is given in Chapter 6.) 108 514 T
0.22 (This chapter begins with a description of the system-level or) 108 490 P
0.22 (ganization of the DASH pro-) 399.89 490 P
0.26 (totype. The discussion then moves down to the level of the individual clusters. The struc-) 108 474 P
-0.15 (ture of a cluster is given with emphasis on the directory and network logic that execute the) 108 458 P
-0 (directory-based coherence protocol. The protocol is then discussed, starting with the basic) 108 442 P
1.3 (invalidation-based coherence protocol. The protocols for the alternative memory opera-) 108 426 P
0.1 (tions \050prefetch, update write and synchronization\051 are then given. The chapter ends with a) 108 410 P
(summary of the prototype or) 108 394 T
(ganization and the protocol features.) 245.02 394 T
1 14 Q
(3.1  System Organization) 108 358.67 T
0 12 Q
1.44 (A block diagram of the DASH prototype system is shown in Figure 3-1. As a speci\336c) 108 336 P
1.38 (instance of the more general picture given in Figure 2-3, this diagram retains the three) 108 320 P
-0.25 (important attributes of the DASH architecture. First, the processing nodes and memory are) 108 304 P
0.79 (interconnected by a scalable network. In the prototype, a pair of 2-D mesh networks are) 108 288 P
-0.25 (used. Second, the global shared-memory is distributed among the processing nodes. Third,) 108 272 P
1.24 (each processing node is a small-scale multiprocessor cluster) 108 256 P
1.24 (. Each cluster contains four) 404.14 256 P
1.73 (processors, a portion of global memory) 108 240 P
1.73 (, and local I/O devices. The following sections) 304.4 240 P
1.08 (examine the structure of the individual clusters and the interconnection meshes in more) 108 224 P
(detail.) 108 208 T
-0.1 (The prototype system is limited to a 4) 108 184 P
-0.1 (x) 289.87 184 P
-0.1 (4 con\336guration with 16 clusters and 64 processors.) 296.86 184 P
1.59 (This limit was chosen due to the constraints in memory addressing of the base cluster) 108 168 P
-0.12 (hardware which supports no more than 256) 108 152 P
-0.12 (MByte of total memory) 316.1 152 P
-0.12 (. Thus, with 16 clusters) 428.56 152 P
-0.15 (the size of each cluster) 108 136 P
-0.15 (\325) 217.06 136 P
-0.15 (s local memory partition is only 16) 220.4 136 P
-0.15 (MByte. While the system could) 388.37 136 P
0.11 (have been extended to support 32 or 64 clusters, the amount of memory per cluster would) 108 120 P
1.54 (become too small. Support of 64 high-performance processors still gives the prototype) 108 104 P
FMENDPAGE
%%EndPage: "29" 2
%%Page: "30" 2
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(30) 72 42.62 T
(3.1) 422.72 42.62 T
(System Organization) 436.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
0.16 (much more power than would be possible on a single bus, and it provides a valuable plat-) 72 296 P
(form for evaluating the architecture and experimenting with parallel software.) 72 280 T
1 F
(3.1.1  Cluster Organization) 72 246 T
0 F
0.54 (The individual shaded boxes in Figure 3-1 represent a single DASH cluster) 72 224 P
0.54 (. Each cluster) 437.98 224 P
-0.09 (contains a set of processors, a section of the global memory) 72 208 P
-0.09 (, the directory and inter) 356.4 208 P
-0.09 (-cluster) 468.03 208 P
0.31 (interface, and optional local I/O devices. These modules are interconnected by a bus sup-) 72 192 P
1 (porting snoopy cache coherence. The directory tracks caching information at the cluster) 72 176 P
(level, while bus snooping keeps the individual processor caches coherent.) 72 160 T
0.26 (A practical bene\336t of the prototype\325) 72 136 P
0.26 (s structure is that a single cluster without its directory) 244.83 136 P
0.14 (logic is a small-scale bus-based multiprocessor) 72 120 P
0.14 (. This has allowed us to base the cluster on) 297.55 120 P
0.23 (an existing commercial multiprocessor) 72 104 P
0.23 (, reducing development time and ef) 258.43 104 P
0.23 (fort, and allow-) 429.26 104 P
0.48 (ing us to focus our ener) 72 88 P
0.48 (gies on the lar) 187.12 88 P
0.48 (ger system issues. The clusters in the prototype are) 255.97 88 P
72 72 504 720 C
72 304 504 720 C
71 322 504 340 R
7 X
0 K
V
72 332.01 504 340 C
71 337.98 539 337.98 2 L
0.5 H
0 Z
0 X
0 K
N
72 304 504 720 C
1 10 Q
0 X
0 K
(FIGURE) 74.6 325.34 T
(3-1.  Block diagram of the DASH pr) 115.96 325.34 T
(ototype system.) 269.02 325.34 T
0 27 23.43 799 735 386 356 108 349 FMBEGINEPSF
%%BeginDocument: /tmp_mnt/home/lenoski/stanford/chap3/sys2x2.1090.free.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: FreeHand 3.0
%%Title: sys2x2.1090.free
%%CreationDate: 12/5/91 4:21 PM
%%BoundingBox: 27 23.435 799 735
%%DocumentProcSets: FreeHand_header 3 0
%%DocumentSuppliedProcSets: FreeHand_header 3 0
%%ColorUsage: Color
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Symbol
%%+Times-Bold
%%+Times-Roman
%%DocumentNeededFonts: Symbol
%%+Times-Bold
%%+Times-Roman
%%FHPathName: Dan-41M:dan41.thesis:thesis.extras:Chap3 - Protocol:sys2x2.1090.free
%%EndComments
%%BeginProcSet: FreeHand_header 3 0
/FHIODict 30 dict def
FHIODict begin
/bdf{bind def}bind def
/d{setdash}bdf
/h{closepath}bdf
/H{}bdf
/J{setlinecap}bdf
/j{setlinejoin}bdf
/M{setmiterlimit}bdf
/n{newpath}bdf
/N{newpath}bdf
/q{gsave}bdf
/Q{grestore}bdf
/w{setlinewidth}bdf
/u{}bdf
/U{}bdf
/sepdef{
dup where not
{
FreeHandSepDict
}
if
3 1 roll exch put
}bdf
/`
{end %. FreeHandDict
/-save0- save def
pop pop pop pop pop
concat
userdict begin
/showpage {} def
0 setgray 0 setlinecap 1 setlinewidth
0 setlinejoin 10 setmiterlimit [] 0 setdash newpath
/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust false setoverprint}if}if
} bdf
/~
{end
-save0- restore
FreeHandDict begin
}bdf
/FreeHandDict 190 dict def
FreeHandDict begin
/currentpacking where{pop true setpacking}if
/xdf{exch def}bdf
/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def
/dr{transform .25 sub round .25 add
exch .25 sub round .25 add exch itransform}bdf
/C{dr curveto}bdf
/L{dr lineto}bdf
/m{dr moveto}bdf
/printerRes
gsave
matrix defaultmatrix setmatrix
72 72 dtransform
abs exch abs
max
grestore
def
/maxsteps 256 def
/calcgraysteps {
currentscreen pop exch 
printerRes exch div exch
2 copy
sin mul round dup mul
3 1 roll
cos mul round dup mul
add 1 add
dup maxsteps gt {pop maxsteps} if
} bdf
/bottom -0 def
/delta -0 def
/frac -0 def
/left -0 def
/numsteps -0 def
/numsteps1 -0 def
/radius -0 def
/right -0 def
/top -0 def
/xt -0 def
/yt -0 def
/df currentflat def
/tempstr 1 string def
/clipflatness currentflat def
/inverted?
0 currenttransfer exec .5 ge def
/colorexists
systemdict/setcmykcolor known def
/tc1 [0 0 0 1] def
/tc2 [0 0 0 1] def
/fc [0 0 0 1] def
/sc [0 0 0 1] def
/concatprocs{
/proc2 exch cvlit def/proc1 exch cvlit def
/newproc proc1 length proc2 length add array def
newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval
newproc cvx}bdf
/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf
/rectpath{newpath left bottom m left top L
right top L right bottom L closepath}bdf
/i{dup 0 eq
{pop df dup}
{dup} ifelse
/clipflatness xdf setflat
}bdf
version cvr 38.0 le
{/setrgbcolor{
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
setrgbcolor}bdf}if
/gettint{0 get}bdf
/puttint{0 exch put}bdf
/vms {/vmsv save def} bdf
/vmr {vmsv restore} bdf
/vmrs{vmsv restore /vmsv save def}bdf
/eomode{
{/filler /eofill load def /clipper /eoclip load def}
{/filler /fill load def /clipper /clip load def}
ifelse
}bdf
/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}
{pop pop}ifelse}forall NF}bdf
/MN{1 index length/Len exch def
dup length Len add string dup
Len 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf
/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch
{1 index MN cvn/NewN exch def cvn
findfont dup maxlength dict CD dup/FontName NewN put dup
/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf
/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf
/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known
{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup
/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdf
userdict begin /BDFontDict 20 dict def end
BDFontDict begin
/bu{}def
/bn{}def
/setTxMode{av 70 ge{pop}if pop}def
/gm{m}def
/show{pop}def
/gr{pop}def
/fnt{pop pop pop}def
/fs{pop}def
/fz{pop}def
/lin{pop pop}def
end
/MacVec 256 array def
MacVec 0 /Helvetica findfont
/Encoding get 0 128 getinterval putinterval
MacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put
/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI
/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/US
MacVec 0 32 getinterval astore pop
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/register/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase
/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacVec 128 128 getinterval astore pop
/fps{
currentflat 
exch 
dup 0 le{pop 1}if
{
dup setflat 3 index stopped
{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}
{exit}
ifelse
}loop
pop setflat pop pop
}bdf
/fp{100 currentflat fps}bdf
/clipper{clip}bdf
/W{/clipper load 100 clipflatness fps}bdf
/fixtrans1 {
dup{ic mul ic sub 1 add}concatprocs exch
dup{im mul im sub 1 add}concatprocs exch
dup{iy mul iy sub 1 add}concatprocs exch
{ik mul ik sub 1 add}concatprocs
}bdf
/fixtrans2 {
currentcolortransfer
5 -1 roll exch concatprocs 7 1 roll
4 -1 roll exch concatprocs 6 1 roll
3 -1 roll exch concatprocs 5 1 roll
concatprocs 4 1 roll
setcolortransfer
}bdf
end%. FreeHandDict
end%. FHIODict
%%EndProcSet
%%EndProlog
%%BeginSetup
FHIODict begin
FreeHandDict begin
27 23.435 799 735 storerect rectpath clip newpath
/onlyk{false}ndf
/ccmyk{dup 5 -1 roll sub 0 max exch}ndf
/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf
/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf
/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf
/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf
/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf
/setoverprint{pop}ndf
/currentoverprint false ndf
/colorimage{pop pop
[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx
/cmykbufs2gray cvx]cvx image}
%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)
version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse
/cci1 {
currentcolortransfer
{ik mul ik sub 1 add}concatprocs 4 1 roll
{iy mul iy sub 1 add}concatprocs 4 1 roll
{im mul im sub 1 add}concatprocs 4 1 roll
{ic mul ic sub 1 add}concatprocs 4 1 roll
setcolortransfer
}ndf
/cci2 {
{invbuf dup length magentabuf length ne
{dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def}if
dup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs
}ndf
/customcolorimage{colorexists{
aload pop pop 4 array astore
setimagecmyk
cci1
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
cci2 {magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}
{pop image}ifelse}ndf
/separationimage{image}ndf
/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf
/inkoverprint false ndf
/setinkoverprint{pop}ndf
/overprintprocess{pop}ndf
/setspotcolor
{spots exch get 0 5 getinterval exch setcustomcolor}ndf
/currentcolortransfer{currenttransfer dup dup dup}ndf
/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf
/getcmyk {
dup length 4 eq
{aload pop}
{aload pop spots exch get 0 4 getinterval aload pop 4
{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse
}bdf
/setimagecmyk{
getcmyk/ik xdf /iy xdf /im xdf /ic xdf
}ndf
/autospread{pop}ndf
/fhsetspreadsize{pop}ndf
/strokeopf false def
/fillopf false def
/R{0 ne /strokeopf xdf}bdf
/O{0 ne /fillopf xdf}bdf
/filler{fill}bdf
/F{fc fhsetcolor fillopf setoverprint false autospread
gsave /filler load fp grestore false setoverprint}bdf
/f{closepath F}bdf
/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf
/s{closepath S}bdf
/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestore
sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf
/b{closepath B}bdf
colorexists not{/setcolorscreen {setscreen pop pop pop pop pop pop pop pop pop}bdf}if
/fhsetcolor{dup length 4 eq
{aload overprintprocess setcmykcolor}
{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}
ifelse
}ndf
/settextcolor{dup fhsetcolor dup length 4 eq
{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}
{pop}
ifelse
}ndf
/ka{/fc xdf}bdf
/Ka{/sc xdf}bdf
/xa{/fc xdf} bdf
/Xa{/sc xdf} bdf
/bc2[0 0]def
/bc4[0 0 0 0]def
/absmax{2 copy abs exch abs gt{exch}if pop}bdf
/calcstep
{ colorexists not and{calcgraysteps}{maxsteps}ifelse
tc1 length 4 eq
{
0 1 3
{tc1 1 index get
tc2 3 -1 roll get
sub
}for
absmax absmax absmax
}
{
bc2 tc1 1 get 1 exch put
tc1 gettint tc2 gettint
sub abs
}
ifelse
mul abs round dup 0 eq{pop 1}if 
dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf
}bdf
/cblend{
tc1 length 4 eq
{
0 1 3
{bc4 exch
tc1 1 index get
tc2 2 index get
1 index sub
frac mul add put
}for bc4
}
{
bc2
tc1 gettint
tc2 gettint
1 index sub
frac mul add
puttint bc2
}
ifelse
fhsetcolor
}bdf
/logtaper{/frac frac 9 mul 1 add log def}bdf
FHIODict begin
/origmtx matrix currentmatrix def
/iminv false def
/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf
/cyanrp{currentfile cyanbuf readhexstring pop iminv{invbuf}if}def
/magentarp{cyanbuf magentabuf copy}bdf
/yellowrp{cyanbuf yellowbuf copy}bdf
/blackrp{cyanbuf blackbuf copy}bdf
/fixtransfer{
colorexists
{fixtrans1 fixtrans2}
{{dup 1 exch sub currentgray mul add}concatprocs
currenttransfer exch concatprocs
systemdict begin settransfer end}ifelse
}ndf
/cmykbufs2gray{
dup length 0 1 3 -1 roll 1 sub
{4 index 1 index get
4 index 2 index get
4 index 3 index get
4 index 4 index get
255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift
2 index 3 1 roll put}for
4 1 roll pop pop pop
}bdf
end
/s8 8 string def
/pattnt 1 def
/patcol[]def
/pa{1 0 matrix defaultmatrix dtransform exch atan}bdf
/por{1 0 dtransform 0 eq exch 0 ne and}bdf
/patcolor{/pattnt xdf
dup length array copy/patcol xdf
colorexists
{/pattnt 1 pattnt sub def
patcol length 4 eq
{0 1 3{patcol exch 2 copy
get .25 lt{0}{pattnt}ifelse put}for}
{patcol dup gettint .25 lt{0}{pattnt}ifelse puttint}ifelse
patcol fhsetcolor}
{patcol fhsetcolor currentgray 1 ne{pattnt systemdict /setgray get exec}if}ifelse}bdf
/pat{3 1 roll s8 copy pop 9.375 pa por not{-90. add}if
{1 add 4 mul cvi s8 exch get exch
1 add 4 mul cvi 7 sub bitshift 1 and inverted?{1 exch sub}if}setscreen
systemdict begin{}settransfer end
inverted?{.9921875 exch sub}if patcolor
}bdf
/pF{gsave fc pat /filler load fp grestore}bdf
/pf{closepath pF}bdf
/pS{gsave sc pat {stroke}fp grestore newpath}bdf
/ps{closepath pS}bdf
/textopf false def
/curtextmtx{}def
/otw .25 def
/msf{dup/curtextmtx xdf makefont setfont}bdf
/makesetfont/msf load def
/curtextheight{.707104 .707104 curtextmtx dtransform
dup mul exch dup mul add sqrt}bdf
/ta{1 index
{tempstr 0 2 index put tempstr 2 index
gsave exec grestore
tempstr stringwidth rmoveto
5 index eq{6 index 6 index rmoveto}if
3 index 3 index rmoveto
}forall 7{pop}repeat}bdf
/sts{settextcolor textopf setoverprint/ts{awidthshow}def exec false setoverprint}bdf
/stol{setlinewidth settextcolor textopf setoverprint newpath
/ts{{false charpath stroke}ta}def exec false setoverprint}bdf
/currentpacking where{pop false setpacking}if
/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor
0 1 0 0 (Process Magenta) false newcmykcustomcolor
0 0 1 0 (Process Yellow) false newcmykcustomcolor
0 0 0 1 (Process Black) false newcmykcustomcolor
0 0 0 0  (White) false
newcmykcustomcolor
]def
%%EndSetup
%%IncludeFont: Symbol
0 dict dup begin
end
/f0 /Symbol FF def
[] 0 d
3.863708 M
1 w
0 j
0 J
0 O
0 R
0 i
false eomode
[0 0 0 1] Ka
[0 0 0 1] ka
vms
u
u
351.5 338.5 m
369.5 338.5 L
369.5 320.5 L
351.5 320.5 L
351.5 338.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
q
[1 0 0 1 0 -4] concat
vms
u
162 334 m
174 337 L
174 334 L
174 331 L
162 334 L
[0 0 0 1] ka
f
n
351 334 m
339 331 L
339 334 L
339 337 L
351 334 L
f
n
174.5 333.5 m
339.5 333.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 0 -4] concat
vms
u
360 325 m
363 313 L
360 313 L
357 313 L
360 325 L
[0 0 0 1] ka
f
n
360 136 m
357 148 L
360 148 L
363 148 L
360 136 L
f
n
360.5 312.5 m
360.5 147.5 L
[0 0 0 1] Ka
S
U
vmr
Q
u
700.5 341.5 m
718.5 341.5 L
718.5 323.5 L
700.5 323.5 L
700.5 341.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
q
[1 0 0 1 -56 -2] concat
vms
u
774 334 m
786 337 L
786 334 L
786 331 L
774 334 L
[0 0 0 1] ka
f
n
855 334 m
843 331 L
843 334 L
843 337 L
855 334 L
f
n
786.5 333.5 m
843.5 333.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 -56 -2] concat
vms
u
765 325 m
768 313 L
765 313 L
762 313 L
765 325 L
[0 0 0 1] ka
f
n
765 136 m
762 148 L
765 148 L
768 148 L
765 136 L
f
n
765.5 312.5 m
765.5 147.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[0.85788 0 0 0.833328 52.442413 52.16835] concat
vms
u
369 334 m
381 337 L
381 334 L
381 331 L
369 334 L
[0 0 0 1] ka
f
n
756 334 m
744 331 L
744 334 L
744 337 L
756 334 L
f
n
381.5 333.5 m
744.5 333.5 L
[0 0 0 1] Ka
S
U
vmr
Q
u
351.5 689.5 m
369.5 689.5 L
369.5 671.5 L
351.5 671.5 L
351.5 689.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
q
[1 0 0 1 0 -4] concat
vms
u
162 685 m
174 688 L
174 685 L
174 682 L
162 685 L
[0 0 0 1] ka
f
n
351 685 m
339 682 L
339 685 L
339 688 L
351 685 L
f
n
174.5 684.5 m
339.5 684.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 0 -4] concat
vms
u
360 676 m
363 664 L
360 664 L
357 664 L
360 676 L
[0 0 0 1] ka
f
n
360 343 m
357 355 L
360 355 L
363 355 L
360 343 L
f
n
360.5 663.5 m
360.5 354.5 L
[0 0 0 1] Ka
S
U
vmr
Q
u
700.5 691.5 m
718.5 691.5 L
718.5 673.5 L
700.5 673.5 L
700.5 691.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
q
[1 0 0 1 -56 -2] concat
vms
u
765 676 m
768 664 L
765 664 L
762 664 L
765 676 L
[0 0 0 1] ka
f
n
765 343 m
762 355 L
765 355 L
768 355 L
765 343 L
f
n
765.5 663.5 m
765.5 354.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[0.863037 0 0 1 50.539307 -4] concat
vms
u
369 685 m
381 688 L
381 685 L
381 682 L
369 685 L
[0 0 0 1] ka
f
n
756 685 m
744 682 L
744 685 L
744 688 L
756 685 L
f
n
381.5 684.5 m
744.5 684.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 0 -4] concat
vms
u
360 739 m
363 727 L
360 727 L
357 727 L
360 739 L
[0 0 0 1] ka
f
n
360 694 m
357 706 L
360 706 L
363 706 L
360 694 L
f
n
360.5 726.5 m
360.5 705.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 -57 -5] concat
vms
u
765 739 m
768 727 L
765 727 L
762 727 L
765 739 L
[0 0 0 1] ka
f
n
765 694 m
762 706 L
765 706 L
768 706 L
765 694 L
f
n
765.5 726.5 m
765.5 705.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 -56 -2] concat
vms
u
774 685 m
786 688 L
786 685 L
786 682 L
774 685 L
[0 0 0 1] ka
f
n
855 685 m
843 682 L
843 685 L
843 688 L
855 685 L
f
n
786.5 684.5 m
843.5 684.5 L
[0 0 0 1] Ka
S
U
vmr
Q
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
431 689.832993 m
0 0 32 0 0 (Request Mesh) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
436 659.832993 m
0 0 32 0 0 (Reply Mesh) ts
} 
[0 0 0 1]
sts
u
304.5 314.5 m
322.5 314.5 L
322.5 296.5 L
304.5 296.5 L
304.5 314.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
u
647.5 315.5 m
665.5 315.5 L
665.5 297.5 L
647.5 297.5 L
647.5 315.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
q
[0.842361 0 0 1.166656 65.236145 -51.663574] concat
vms
u
306 307 m
318 310 L
318 307 L
318 304 L
306 307 L
[0 0 0 1] ka
f
n
693 307 m
681 304 L
681 307 L
681 310 L
693 307 L
f
n
318.5 306.5 m
681.5 306.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 17 0] concat
vms
u
99 307 m
111 310 L
111 307 L
111 304 L
99 307 L
[0 0 0 1] ka
f
n
288 307 m
276 304 L
276 307 L
276 310 L
288 307 L
f
n
111.5 306.5 m
276.5 306.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 17 0] concat
vms
u
297 298 m
300 286 L
297 286 L
294 286 L
297 298 L
[0 0 0 1] ka
f
n
297 109 m
294 121 L
297 121 L
300 121 L
297 109 L
f
n
297.5 285.5 m
297.5 120.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 -45 0] concat
vms
u
702 298 m
705 286 L
702 286 L
699 286 L
702 298 L
[0 0 0 1] ka
f
n
702 109 m
699 121 L
702 121 L
705 121 L
702 109 L
f
n
702.5 285.5 m
702.5 120.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[0.847534 0 0 1.333313 63.653259 -220.322388] concat
vms
u
306 658 m
318 661 L
318 658 L
318 655 L
306 658 L
[0 0 0 1] ka
f
n
693 658 m
681 655 L
681 658 L
681 661 L
693 658 L
f
n
318.5 657.5 m
681.5 657.5 L
[0 0 0 1] Ka
S
U
vmr
Q
u
305.5 666.5 m
323.5 666.5 L
323.5 648.5 L
305.5 648.5 L
305.5 666.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
q
[1 0 0 1 17 0] concat
vms
u
99 658 m
111 661 L
111 658 L
111 655 L
99 658 L
[0 0 0 1] ka
f
n
288 658 m
276 655 L
276 658 L
276 661 L
288 658 L
f
n
111.5 657.5 m
276.5 657.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 17 0] concat
vms
u
297 649 m
300 637 L
297 637 L
294 637 L
297 649 L
[0 0 0 1] ka
f
n
297 316 m
294 328 L
297 328 L
300 328 L
297 316 L
f
n
297.5 636.5 m
297.5 327.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 17 0] concat
vms
u
297 712 m
300 700 L
297 700 L
294 700 L
297 712 L
[0 0 0 1] ka
f
n
297 667 m
294 679 L
297 679 L
300 679 L
297 667 L
f
n
297.5 699.5 m
297.5 678.5 L
[0 0 0 1] Ka
S
U
vmr
Q
u
649.5 665.5 m
667.5 665.5 L
667.5 647.5 L
649.5 647.5 L
649.5 665.5 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
q
[1 0 0 1 -44 0] concat
vms
u
702 649 m
705 637 L
702 637 L
699 637 L
702 649 L
[0 0 0 1] ka
f
n
702 316 m
699 328 L
702 328 L
705 328 L
702 316 L
f
n
702.5 636.5 m
702.5 327.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 -44 -1] concat
vms
u
702 712 m
705 700 L
702 700 L
699 700 L
702 712 L
[0 0 0 1] ka
f
n
702 667 m
699 679 L
702 679 L
705 679 L
702 667 L
f
n
702.5 699.5 m
702.5 678.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 -45 0] concat
vms
u
711 307 m
723 310 L
723 307 L
723 304 L
711 307 L
[0 0 0 1] ka
f
n
792 307 m
780 304 L
780 307 L
780 310 L
792 307 L
f
n
723.5 306.5 m
780.5 306.5 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 -44 -1] concat
vms
u
711 658 m
723 661 L
723 658 L
723 655 L
711 658 L
[0 0 0 1] ka
f
n
792 658 m
780 655 L
780 658 L
780 661 L
792 658 L
f
n
723.5 657.5 m
780.5 657.5 L
[0 0 0 1] Ka
S
U
vmr
Q
u
27 604.9986 m
296.0126 604.9986 L
296.0126 374.035 L
27 374.035 L
27 604.9986 L
[0 0 0 0.1] ka
f
n
U
u
97.0239 446.013 m
174.1005 446.013 L
174.1005 382.0098 L
97.0239 382.0098 L
97.0239 446.013 L
[0 0 0 0.4] ka
f
n
U
u
187.7023 448.0578 m
265.0812 448.0578 L
265.0812 381.0897 L
187.7023 381.0897 L
187.7023 448.0578 L
f
n
U
q
[1.062057 0 0 0.995331 -5.70929 2.105576] concat
vms
u
92 386.7 m
92 451.1 L
164.5 451.1 L
164.5 386.7 L
92 386.7 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
vmrs
U
vmr
Q
q
[1.07988 0 0 0.995331 -14.506165 2.110245] concat
vms
u
u
181.6571 452.1475 m
254.1998 452.1475 L
254.1998 387.7354 L
181.6571 387.7354 L
181.6571 452.1475 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
U
vmr
Q
u
201.0018 579.4382 m
287.9523 579.4382 L
287.9523 492.0217 L
201.0018 492.0217 L
201.0018 579.4382 L
f
n
U
237 507.3 m
237 479.7 L
[0 0 0 1] Ka
S
267.8 480.2 m
59.2 480.2 L
2 w
3.863693 M
S
215.9 452.1 m
215.9 479.7 L
1 w
3.863708 M
S
127.2 452.1 m
127.2 479.7 L
S
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
200.635239 425.927017 m
0 0 32 0 0 (Main) ts
188.336212 411.613205 m
0 0 32 0 0 (Memory) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
117.793777 423.882187 m
0 0 32 0 0 (I\/O) ts
96.142731 409.568375 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
48.3 437.3 m
48.3 437.3 48.3 434.2 48.3 436.7 C
48.3 439.3 52.6 441.3 57.9 441.3 C
63 441.3 67.5 439.8 67.5 437.3 C
67.5 420.9 L
67.5 418.4 63 416.8 57.9 416.8 C
52.6 416.8 48.3 419 48.3 421.4 C
48.3 424 48.3 437.3 48.3 437.3 C
[0 0 0 0.4] ka
f
n
u
50.2239 412.0354 m
65.2362 412.0354 L
65.2362 387.0885 L
50.2239 387.0885 L
50.2239 412.0354 L
f
n
U
91.7 422.4 m
74 422.4 L
[0 0 0 1] Ka
S
74 394.8 m
74 450 L
S
62.2 404 m
74 404 L
S
65 431.6 m
74 431.6 L
S
45.3 440.3 m
45.3 440.3 45.3 437.2 45.3 439.7 C
45.3 442.3 49.6 444.3 54.9 444.3 C
60 444.3 64.5 442.8 64.5 440.3 C
64.5 423.9 L
64.5 421.4 60 419.8 54.9 419.8 C
49.6 419.8 45.3 422 45.3 424.4 C
45.3 427 45.3 440.3 45.3 440.3 C
[0 0 0 0] ka
b
u
45.3428 439.7735 m
45.3428 442.3246 49.628 444.3927 54.9142 444.3927 C
60.2004 444.3927 64.4856 442.3246 64.4856 439.7735 C
64.4856 437.2224 60.2004 435.1544 54.9142 435.1544 C
49.628 435.1544 45.3428 437.2224 45.3428 439.7735 C
0.9 w
3.863693 M
b
U
q
[1 0 0 1 -418.800003 384] concat
vms
u
u
467 29.9996 m
481.0997 29.9996 L
481.0997 6 L
467 6 L
467 29.9996 L
1 w
3.863708 M
b
U
u
469.115 23.9997 m
469.115 26.5337 471.1665 28.5879 473.6974 28.5879 C
476.2282 28.5879 478.2798 26.5337 478.2798 23.9997 C
478.2798 21.4657 476.2282 19.4116 473.6974 19.4116 C
471.1665 19.4116 469.115 21.4657 469.115 23.9997 C
s
U
u
469.115 11.9999 m
469.115 14.5339 471.1665 16.5881 473.6974 16.5881 C
476.2282 16.5881 478.2798 14.5339 478.2798 11.9999 C
478.2798 9.4659 476.2282 7.4117 473.6974 7.4117 C
471.1665 7.4117 469.115 9.4659 469.115 11.9999 C
s
U
478.3 25.1 m
478.3 13.1 L
0.5 w
3.863693 M
S
U
vmr
Q
u
65.8467 569.9701 m
183.2249 569.9701 L
183.2249 490.7329 L
65.8467 490.7329 L
65.8467 569.9701 L
[0 0 0 0.4] ka
f
n
U
q
[1.007538 0 0 1.022415 -2.665833 -26.653992] concat
vms
u
u
61.5 589 m
178 589 L
178 513 L
61.5 513 L
61.5 589 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
62 534 m
178 534 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 0.334167 -26.653992] concat
vms
u
u
49.5 596 m
166 596 L
166 520 L
49.5 520 L
49.5 596 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
50 543 m
166 543 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 3.334167 -26.653992] concat
vms
u
u
39.5 602 m
156 602 L
156 526 L
39.5 526 L
39.5 602 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
40 549 m
156 549 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1 0 0 1 -2.100006 1.600006] concat
vms
u
u
37.9791 593.7744 m
155.3573 593.7744 L
155.3573 516.0709 L
37.9791 516.0709 L
37.9791 593.7744 L
[0 0 0 1] ka
1<0000000000000000> pf
1 w
3.863708 M
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
59.460052 579.266876 m
0 0 32 0 0 (Pr) ts
77.852295 579.266876 m
0 0 32 0 0 (ocessor) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
41.503525 522.034042 m
0 0 32 0 0 (2nd level cache) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
66.830185 557.930649 m
0 0 32 0 0 (1st level ) ts
47.638947 543.616837 m
0 0 32 0 0 (I ) ts
57.976181 543.616837 m
0 0 32 0 0 (and D cache) ts
} 
[0 0 0 1]
sts
38.1 540.6 m
154.9 540.6 L
0.5 w
S
U
vmr
Q
122.7 497.6 m
122.7 481.2 L
1 w
3.863708 M
S
95.5 517 m
95.5 481.2 L
S
104.5 510.9 m
104.5 481.2 L
S
113.6 504.8 m
113.6 481.2 L
S
u
191.9565 583.5503 m
283.038 583.5503 L
283.038 497.0539 L
191.9565 497.0539 L
191.9565 583.5503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
230 508.3 m
230 480.7 L
[0 0 0 1] Ka
S
u
186.9565 588.5503 m
278.038 588.5503 L
278.038 502.0539 L
186.9565 502.0539 L
186.9565 588.5503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
196.517212 565.549591 m
0 0 32 0 0 (Dir) ts
221.808167 565.549591 m
0 0 32 0 0 (ectory ) ts
225.565002 547.549347 m
0 0 32 0 0 (&) ts
199.955734 529.549088 m
0 0 32 0 0 (Network) ts
198.487656 511.548828 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
q
vms
u
304.8 648.8 m
298.8 637.8 L
296.8 640.8 L
293.8 642.8 L
304.8 648.8 L
[0 0 0 1] ka
f
n
244.8 588.8 m
250.8 599.8 L
252.8 596.8 L
255.8 594.8 L
244.8 588.8 L
f
n
297.3 640.3 m
250.3 593.3 L
[0 0 0 1] Ka
S
U
vmr
Q
q
vms
u
352.3 671.3 m
346.5 660.6 L
344.6 663.5 L
341.7 665.5 L
352.3 671.3 L
[0 0 0 1] ka
f
n
269.3 588.3 m
275.1 598.9 L
277 596 L
279.9 594.1 L
269.3 588.3 L
f
n
345 663 m
273.5 591.5 L
0.9 w
3.863693 M
[0 0 0 1] Ka
S
U
vmr
Q
u
376 607.9986 m
645.0126 607.9986 L
645.0126 377.035 L
376 377.035 L
376 607.9986 L
[0 0 0 0.1] ka
f
n
U
u
446.0239 449.013 m
523.1005 449.013 L
523.1005 385.0098 L
446.0239 385.0098 L
446.0239 449.013 L
[0 0 0 0.4] ka
f
n
U
u
536.7023 451.0578 m
614.0812 451.0578 L
614.0812 384.0897 L
536.7023 384.0897 L
536.7023 451.0578 L
f
n
U
q
[1.062057 0 0 0.995331 343.29071 5.105576] concat
vms
u
92 386.7 m
92 451.1 L
164.5 451.1 L
164.5 386.7 L
92 386.7 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
vmrs
U
vmr
Q
q
[1.07988 0 0 0.995331 334.493835 5.110245] concat
vms
u
u
181.6571 452.1475 m
254.1998 452.1475 L
254.1998 387.7354 L
181.6571 387.7354 L
181.6571 452.1475 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
U
vmr
Q
u
550.0018 582.4382 m
636.9523 582.4382 L
636.9523 495.0217 L
550.0018 495.0217 L
550.0018 582.4382 L
f
n
U
586 510.3 m
586 482.7 L
[0 0 0 1] Ka
S
616.8 483.2 m
408.2 483.2 L
2 w
3.863693 M
S
564.9 455.1 m
564.9 482.7 L
1 w
3.863708 M
S
476.2 455.1 m
476.2 482.7 L
S
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
549.635239 428.927017 m
0 0 32 0 0 (Main) ts
537.336212 414.613205 m
0 0 32 0 0 (Memory) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
466.793777 426.882187 m
0 0 32 0 0 (I\/O) ts
445.142731 412.568375 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
397.3 440.3 m
397.3 440.3 397.3 437.2 397.3 439.7 C
397.3 442.3 401.6 444.3 406.9 444.3 C
412 444.3 416.5 442.8 416.5 440.3 C
416.5 423.9 L
416.5 421.4 412 419.8 406.9 419.8 C
401.6 419.8 397.3 422 397.3 424.4 C
397.3 427 397.3 440.3 397.3 440.3 C
[0 0 0 0.4] ka
f
n
u
399.2239 415.0354 m
414.2362 415.0354 L
414.2362 390.0885 L
399.2239 390.0885 L
399.2239 415.0354 L
f
n
U
440.7 425.4 m
423 425.4 L
[0 0 0 1] Ka
S
423 397.8 m
423 453 L
S
411.2 407 m
423 407 L
S
414 434.6 m
423 434.6 L
S
394.3 443.3 m
394.3 443.3 394.3 440.2 394.3 442.7 C
394.3 445.3 398.6 447.3 403.9 447.3 C
409 447.3 413.5 445.8 413.5 443.3 C
413.5 426.9 L
413.5 424.4 409 422.8 403.9 422.8 C
398.6 422.8 394.3 425 394.3 427.4 C
394.3 430 394.3 443.3 394.3 443.3 C
[0 0 0 0] ka
b
u
394.3428 442.7735 m
394.3428 445.3246 398.628 447.3927 403.9142 447.3927 C
409.2004 447.3927 413.4856 445.3246 413.4856 442.7735 C
413.4856 440.2224 409.2004 438.1544 403.9142 438.1544 C
398.628 438.1544 394.3428 440.2224 394.3428 442.7735 C
0.9 w
3.863693 M
b
U
q
[1 0 0 1 -69.800003 387] concat
vms
u
u
467 29.9996 m
481.0997 29.9996 L
481.0997 6 L
467 6 L
467 29.9996 L
1 w
3.863708 M
b
U
u
469.115 23.9997 m
469.115 26.5337 471.1665 28.5879 473.6974 28.5879 C
476.2282 28.5879 478.2798 26.5337 478.2798 23.9997 C
478.2798 21.4657 476.2282 19.4116 473.6974 19.4116 C
471.1665 19.4116 469.115 21.4657 469.115 23.9997 C
s
U
u
469.115 11.9999 m
469.115 14.5339 471.1665 16.5881 473.6974 16.5881 C
476.2282 16.5881 478.2798 14.5339 478.2798 11.9999 C
478.2798 9.4659 476.2282 7.4117 473.6974 7.4117 C
471.1665 7.4117 469.115 9.4659 469.115 11.9999 C
s
U
478.3 25.1 m
478.3 13.1 L
0.5 w
3.863693 M
S
U
vmr
Q
u
414.8467 572.9701 m
532.2249 572.9701 L
532.2249 493.7329 L
414.8467 493.7329 L
414.8467 572.9701 L
[0 0 0 0.4] ka
f
n
U
q
[1.007538 0 0 1.022415 346.334167 -23.653992] concat
vms
u
u
61.5 589 m
178 589 L
178 513 L
61.5 513 L
61.5 589 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
62 534 m
178 534 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 349.334167 -23.653992] concat
vms
u
u
49.5 596 m
166 596 L
166 520 L
49.5 520 L
49.5 596 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
50 543 m
166 543 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 352.334167 -23.653992] concat
vms
u
u
39.5 602 m
156 602 L
156 526 L
39.5 526 L
39.5 602 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
40 549 m
156 549 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1 0 0 1 346.899994 4.600006] concat
vms
u
u
37.9791 593.7744 m
155.3573 593.7744 L
155.3573 516.0709 L
37.9791 516.0709 L
37.9791 593.7744 L
[0 0 0 1] ka
1<0000000000000000> pf
1 w
3.863708 M
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
59.460052 579.266876 m
0 0 32 0 0 (P) ts
69.979187 579.266876 m
0 0 32 0 0 (rocessor) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
41.503525 522.034042 m
0 0 32 0 0 (2nd level cache) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
66.830185 557.930649 m
0 0 32 0 0 (1st level ) ts
47.638947 543.616837 m
0 0 32 0 0 (I ) ts
57.976181 543.616837 m
0 0 32 0 0 (and D cache) ts
} 
[0 0 0 1]
sts
38.1 540.6 m
154.9 540.6 L
0.5 w
S
U
vmr
Q
471.7 500.6 m
471.7 484.2 L
1 w
3.863708 M
S
444.5 520 m
444.5 484.2 L
S
453.5 513.9 m
453.5 484.2 L
S
462.6 507.8 m
462.6 484.2 L
S
u
540.9565 586.5503 m
632.038 586.5503 L
632.038 500.0539 L
540.9565 500.0539 L
540.9565 586.5503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
579 511.3 m
579 483.7 L
[0 0 0 1] Ka
S
u
535.9565 591.5503 m
627.038 591.5503 L
627.038 505.0539 L
535.9565 505.0539 L
535.9565 591.5503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
545.517212 568.549591 m
0 0 32 0 0 (Dir) ts
570.808167 568.549591 m
0 0 32 0 0 (ectory ) ts
574.565002 550.549347 m
0 0 32 0 0 (&) ts
548.955734 532.549088 m
0 0 32 0 0 (Network) ts
547.487656 514.548828 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
q
[1 0 0 1 349 3] concat
vms
u
352.3 671.3 m
346.5 660.6 L
344.6 663.5 L
341.7 665.5 L
352.3 671.3 L
[0 0 0 1] ka
f
n
269.3 588.3 m
275.1 598.9 L
277 596 L
279.9 594.1 L
269.3 588.3 L
f
n
345 663 m
273.5 591.5 L
0.9 w
3.863693 M
[0 0 0 1] Ka
S
U
vmr
Q
649.8 647.8 m
643.8 636.8 L
641.8 639.8 L
638.8 641.8 L
649.8 647.8 L
[0 0 0 1] ka
f
n
593.8 591.8 m
599.8 602.8 L
601.8 599.8 L
604.8 597.8 L
593.8 591.8 L
f
n
646.3 643.3 m
599.3 596.3 L
[0 0 0 1] Ka
S
u
27.4 254.3986 m
296.4126 254.3986 L
296.4126 23.435 L
27.4 23.435 L
27.4 254.3986 L
[0 0 0 0.1] ka
f
n
U
u
97.4239 95.413 m
174.5005 95.413 L
174.5005 31.4098 L
97.4239 31.4098 L
97.4239 95.413 L
[0 0 0 0.4] ka
f
n
U
u
188.1023 97.4578 m
265.4812 97.4578 L
265.4812 30.4897 L
188.1023 30.4897 L
188.1023 97.4578 L
f
n
U
q
[1.062057 0 0 0.995331 -5.309296 -348.494431] concat
vms
u
92 386.7 m
92 451.1 L
164.5 451.1 L
164.5 386.7 L
92 386.7 L
[0 0 0 1] ka
1<0000000000000000> pf
S
vmrs
U
vmr
Q
q
[1.07988 0 0 0.995331 -14.106171 -348.489761] concat
vms
u
u
181.6571 452.1475 m
254.1998 452.1475 L
254.1998 387.7354 L
181.6571 387.7354 L
181.6571 452.1475 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
U
vmr
Q
u
201.4018 228.8382 m
288.3523 228.8382 L
288.3523 141.4217 L
201.4018 141.4217 L
201.4018 228.8382 L
f
n
U
237.4 156.7 m
237.4 129.1 L
S
268.2 129.6 m
59.6 129.6 L
2 w
3.863693 M
S
216.3 101.5 m
216.3 129.1 L
1 w
3.863708 M
S
127.6 101.5 m
127.6 129.1 L
S
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
201.035233 75.327011 m
0 0 32 0 0 (Main) ts
188.736206 61.013199 m
0 0 32 0 0 (Memory) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
118.193771 73.282181 m
0 0 32 0 0 (I\/O) ts
96.542725 58.968369 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
48.7 86.7 m
48.7 86.7 48.7 83.6 48.7 86.1 C
48.7 88.7 53 90.7 58.3 90.7 C
63.4 90.7 67.9 89.2 67.9 86.7 C
67.9 70.3 L
67.9 67.8 63.4 66.2 58.3 66.2 C
53 66.2 48.7 68.4 48.7 70.8 C
48.7 73.4 48.7 86.7 48.7 86.7 C
[0 0 0 0.4] ka
f
n
u
50.6239 61.4354 m
65.6362 61.4354 L
65.6362 36.4885 L
50.6239 36.4885 L
50.6239 61.4354 L
f
n
U
92.1 71.8 m
74.4 71.8 L
[0 0 0 1] Ka
S
74.4 44.2 m
74.4 99.4 L
S
62.6 53.4 m
74.4 53.4 L
S
65.4 81 m
74.4 81 L
S
45.7 89.7 m
45.7 89.7 45.7 86.6 45.7 89.1 C
45.7 91.7 50 93.7 55.3 93.7 C
60.4 93.7 64.9 92.2 64.9 89.7 C
64.9 73.3 L
64.9 70.8 60.4 69.2 55.3 69.2 C
50 69.2 45.7 71.4 45.7 73.8 C
45.7 76.4 45.7 89.7 45.7 89.7 C
[0 0 0 0] ka
b
u
45.7428 89.1735 m
45.7428 91.7246 50.028 93.7927 55.3142 93.7927 C
60.6004 93.7927 64.8856 91.7246 64.8856 89.1735 C
64.8856 86.6224 60.6004 84.5544 55.3142 84.5544 C
50.028 84.5544 45.7428 86.6224 45.7428 89.1735 C
0.9 w
3.863693 M
b
U
q
[1 0 0 1 -418.400009 33.399994] concat
vms
u
u
467 29.9996 m
481.0997 29.9996 L
481.0997 6 L
467 6 L
467 29.9996 L
1 w
3.863708 M
b
U
u
469.115 23.9997 m
469.115 26.5337 471.1665 28.5879 473.6974 28.5879 C
476.2282 28.5879 478.2798 26.5337 478.2798 23.9997 C
478.2798 21.4657 476.2282 19.4116 473.6974 19.4116 C
471.1665 19.4116 469.115 21.4657 469.115 23.9997 C
s
U
u
469.115 11.9999 m
469.115 14.5339 471.1665 16.5881 473.6974 16.5881 C
476.2282 16.5881 478.2798 14.5339 478.2798 11.9999 C
478.2798 9.4659 476.2282 7.4117 473.6974 7.4117 C
471.1665 7.4117 469.115 9.4659 469.115 11.9999 C
s
U
478.3 25.1 m
478.3 13.1 L
0.5 w
3.863693 M
S
U
vmr
Q
u
66.2467 219.3701 m
183.6249 219.3701 L
183.6249 140.1329 L
66.2467 140.1329 L
66.2467 219.3701 L
[0 0 0 0.4] ka
f
n
U
q
[1.007538 0 0 1.022415 -2.265839 -377.253998] concat
vms
u
u
61.5 589 m
178 589 L
178 513 L
61.5 513 L
61.5 589 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
62 534 m
178 534 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 0.734161 -377.253998] concat
vms
u
u
49.5 596 m
166 596 L
166 520 L
49.5 520 L
49.5 596 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
50 543 m
166 543 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 3.734161 -377.253998] concat
vms
u
u
39.5 602 m
156 602 L
156 526 L
39.5 526 L
39.5 602 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
40 549 m
156 549 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1 0 0 1 -1.700012 -349] concat
vms
u
u
37.9791 593.7744 m
155.3573 593.7744 L
155.3573 516.0709 L
37.9791 516.0709 L
37.9791 593.7744 L
[0 0 0 1] ka
1<0000000000000000> pf
1 w
3.863708 M
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
59.460052 579.266876 m
0 0 32 0 0 (Pr) ts
77.852295 579.266876 m
0 0 32 0 0 (ocessor) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
41.503525 522.034042 m
0 0 32 0 0 (2nd level cache) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
66.830185 557.930649 m
0 0 32 0 0 (1st level ) ts
47.638947 543.616837 m
0 0 32 0 0 (I ) ts
57.976181 543.616837 m
0 0 32 0 0 (and D cache) ts
} 
[0 0 0 1]
sts
38.1 540.6 m
154.9 540.6 L
0.5 w
S
U
vmr
Q
123.1 147 m
123.1 130.6 L
1 w
3.863708 M
S
95.9 166.4 m
95.9 130.6 L
S
104.9 160.3 m
104.9 130.6 L
S
114 154.2 m
114 130.6 L
S
u
192.3565 232.9503 m
283.438 232.9503 L
283.438 146.4539 L
192.3565 146.4539 L
192.3565 232.9503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
230.4 157.7 m
230.4 130.1 L
[0 0 0 1] Ka
S
u
187.3565 237.9503 m
278.438 237.9503 L
278.438 151.4539 L
187.3565 151.4539 L
187.3565 237.9503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
196.917206 214.949585 m
0 0 32 0 0 (Dir) ts
222.20816 214.949585 m
0 0 32 0 0 (ectory ) ts
225.964996 196.949341 m
0 0 32 0 0 (&) ts
200.355728 178.949081 m
0 0 32 0 0 (Network) ts
198.88765 160.948822 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
q
[1 0 0 1 0.399994 -350.600006] concat
vms
u
304.8 648.8 m
298.8 637.8 L
296.8 640.8 L
293.8 642.8 L
304.8 648.8 L
[0 0 0 1] ka
f
n
244.8 588.8 m
250.8 599.8 L
252.8 596.8 L
255.8 594.8 L
244.8 588.8 L
f
n
297.3 640.3 m
250.3 593.3 L
[0 0 0 1] Ka
S
U
vmr
Q
q
[1 0 0 1 0.399994 -350.600006] concat
vms
u
352.3 671.3 m
346.5 660.6 L
344.6 663.5 L
341.7 665.5 L
352.3 671.3 L
[0 0 0 1] ka
f
n
269.3 588.3 m
275.1 598.9 L
277 596 L
279.9 594.1 L
269.3 588.3 L
f
n
345 663 m
273.5 591.5 L
0.9 w
3.863693 M
[0 0 0 1] Ka
S
U
vmr
Q
u
376.4 257.3986 m
645.4126 257.3986 L
645.4126 26.435 L
376.4 26.435 L
376.4 257.3986 L
[0 0 0 0.1] ka
f
n
U
u
446.4239 98.413 m
523.5005 98.413 L
523.5005 34.4098 L
446.4239 34.4098 L
446.4239 98.413 L
[0 0 0 0.4] ka
f
n
U
u
537.1023 100.4578 m
614.4812 100.4578 L
614.4812 33.4897 L
537.1023 33.4897 L
537.1023 100.4578 L
f
n
U
q
[1.062057 0 0 0.995331 343.690704 -345.494431] concat
vms
u
92 386.7 m
92 451.1 L
164.5 451.1 L
164.5 386.7 L
92 386.7 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
vmrs
U
vmr
Q
q
[1.07988 0 0 0.995331 334.893829 -345.489761] concat
vms
u
u
181.6571 452.1475 m
254.1998 452.1475 L
254.1998 387.7354 L
181.6571 387.7354 L
181.6571 452.1475 L
[0 0 0 1] ka
1<0000000000000000> pf
[0 0 0 1] Ka
S
U
vmrs
U
vmr
Q
u
550.4018 231.8382 m
637.3523 231.8382 L
637.3523 144.4217 L
550.4018 144.4217 L
550.4018 231.8382 L
f
n
U
586.4 159.7 m
586.4 132.1 L
[0 0 0 1] Ka
S
617.2 132.6 m
408.6 132.6 L
2 w
3.863693 M
S
565.3 104.5 m
565.3 132.1 L
1 w
3.863708 M
S
476.6 104.5 m
476.6 132.1 L
S
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
550.035233 78.327011 m
0 0 32 0 0 (Main) ts
537.736206 64.013199 m
0 0 32 0 0 (Memory) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
467.193771 76.282181 m
0 0 32 0 0 (I\/O) ts
445.542725 61.968369 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
397.7 89.7 m
397.7 89.7 397.7 86.6 397.7 89.1 C
397.7 91.7 402 93.7 407.3 93.7 C
412.4 93.7 416.9 92.2 416.9 89.7 C
416.9 73.3 L
416.9 70.8 412.4 69.2 407.3 69.2 C
402 69.2 397.7 71.4 397.7 73.8 C
397.7 76.4 397.7 89.7 397.7 89.7 C
[0 0 0 0.4] ka
f
n
u
399.6239 64.4354 m
414.6362 64.4354 L
414.6362 39.4885 L
399.6239 39.4885 L
399.6239 64.4354 L
f
n
U
441.1 74.8 m
423.4 74.8 L
[0 0 0 1] Ka
S
423.4 47.2 m
423.4 102.4 L
S
411.6 56.4 m
423.4 56.4 L
S
414.4 84 m
423.4 84 L
S
394.7 92.7 m
394.7 92.7 394.7 89.6 394.7 92.1 C
394.7 94.7 399 96.7 404.3 96.7 C
409.4 96.7 413.9 95.2 413.9 92.7 C
413.9 76.3 L
413.9 73.8 409.4 72.2 404.3 72.2 C
399 72.2 394.7 74.4 394.7 76.8 C
394.7 79.4 394.7 92.7 394.7 92.7 C
[0 0 0 0] ka
b
u
394.7428 92.1736 m
394.7428 94.7247 399.028 96.7927 404.3142 96.7927 C
409.6004 96.7927 413.8857 94.7247 413.8857 92.1736 C
413.8857 89.6225 409.6004 87.5544 404.3142 87.5544 C
399.028 87.5544 394.7428 89.6225 394.7428 92.1736 C
0.9 w
3.863693 M
b
U
q
[1 0 0 1 -69.399994 36.399994] concat
vms
u
u
467 29.9996 m
481.0997 29.9996 L
481.0997 6 L
467 6 L
467 29.9996 L
1 w
3.863708 M
b
U
u
469.115 23.9997 m
469.115 26.5337 471.1665 28.5879 473.6974 28.5879 C
476.2282 28.5879 478.2798 26.5337 478.2798 23.9997 C
478.2798 21.4657 476.2282 19.4116 473.6974 19.4116 C
471.1665 19.4116 469.115 21.4657 469.115 23.9997 C
s
U
u
469.115 11.9999 m
469.115 14.5339 471.1665 16.5881 473.6974 16.5881 C
476.2282 16.5881 478.2798 14.5339 478.2798 11.9999 C
478.2798 9.4659 476.2282 7.4117 473.6974 7.4117 C
471.1665 7.4117 469.115 9.4659 469.115 11.9999 C
s
U
478.3 25.1 m
478.3 13.1 L
0.5 w
3.863693 M
S
U
vmr
Q
u
415.2467 222.3701 m
532.6249 222.3701 L
532.6249 143.1329 L
415.2467 143.1329 L
415.2467 222.3701 L
[0 0 0 0.4] ka
f
n
U
q
[1.007538 0 0 1.022415 346.734161 -374.253983] concat
vms
u
u
61.5 589 m
178 589 L
178 513 L
61.5 513 L
61.5 589 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
62 534 m
178 534 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 349.734161 -374.253983] concat
vms
u
u
49.5 596 m
166 596 L
166 520 L
49.5 520 L
49.5 596 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
50 543 m
166 543 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1.007538 0 0 1.022415 352.734161 -374.253983] concat
vms
u
u
39.5 602 m
156 602 L
156 526 L
39.5 526 L
39.5 602 L
[0 0 0 0] ka
1 w
3.863708 M
b
U
40 549 m
156 549 L
0.5 w
3.863693 M
S
U
vmr
Q
q
[1 0 0 1 347.300003 -346] concat
vms
u
u
37.9791 593.7744 m
155.3573 593.7744 L
155.3573 516.0709 L
37.9791 516.0709 L
37.9791 593.7744 L
[0 0 0 1] ka
1<0000000000000000> pf
1 w
3.863708 M
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
59.460052 579.266876 m
0 0 32 0 0 (Pr) ts
77.852295 579.266876 m
0 0 32 0 0 (ocessor) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
41.503525 522.034042 m
0 0 32 0 0 (2nd level cache) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [17.738342 0 0 18.000259 0 0] makesetfont
66.830185 557.930649 m
0 0 32 0 0 (1st level ) ts
47.638947 543.616837 m
0 0 32 0 0 (I ) ts
57.976181 543.616837 m
0 0 32 0 0 (and D cache) ts
} 
[0 0 0 1]
sts
38.1 540.6 m
154.9 540.6 L
0.5 w
S
U
vmr
Q
472.1 150 m
472.1 133.6 L
1 w
3.863708 M
S
444.9 169.4 m
444.9 133.6 L
S
453.9 163.3 m
453.9 133.6 L
S
463 157.2 m
463 133.6 L
S
u
541.3565 235.9503 m
632.438 235.9503 L
632.438 149.4539 L
541.3565 149.4539 L
541.3565 235.9503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
579.4 160.7 m
579.4 133.1 L
[0 0 0 1] Ka
S
u
536.3565 240.9503 m
627.438 240.9503 L
627.438 154.4539 L
536.3565 154.4539 L
536.3565 240.9503 L
[0 0 0 1] ka
1<0000000000000000> pf
S
U
vmrs
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [17.738342 0 0 18.000259 0 0] makesetfont
545.917206 217.949585 m
0 0 32 0 0 (Dir) ts
571.20816 217.949585 m
0 0 32 0 0 (ectory ) ts
574.964996 199.949341 m
0 0 32 0 0 (&) ts
549.355728 181.949081 m
0 0 32 0 0 (Network) ts
547.88765 163.948822 m
0 0 32 0 0 (Interface) ts
} 
[0 0 0 1]
sts
q
[1 0 0 1 349.399994 -347.600006] concat
vms
u
352.3 671.3 m
346.5 660.6 L
344.6 663.5 L
341.7 665.5 L
352.3 671.3 L
[0 0 0 1] ka
f
n
269.3 588.3 m
275.1 598.9 L
277 596 L
279.9 594.1 L
269.3 588.3 L
f
n
345 663 m
273.5 591.5 L
0.9 w
3.863693 M
[0 0 0 1] Ka
S
U
vmr
Q
648.2 297.2 m
642.2 286.2 L
640.2 289.2 L
637.2 291.2 L
648.2 297.2 L
[0 0 0 1] ka
f
n
592.2 241.2 m
598.2 252.2 L
600.2 249.2 L
603.2 247.2 L
592.2 241.2 L
f
n
644.7 292.7 m
597.7 245.7 L
[0 0 0 1] Ka
S
U
vmr
%%Trailer
end  % FreeHandDict
end  % FHIODict
%%EndDocument
FMENDEPSF
69 718 503 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
72 72 504 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "30" 3
%%Page: "31" 3
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(31) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
-0.01 (based on Silicon Graphics POWER Station 4D/340\325) 108 397 P
-0.01 (s) 357.83 397 P
-0.01 ([BJS88]. While leveraging available) 365.48 397 P
0.17 (hardware has constrained the coherence protocol and performance in some areas, the pro-) 108 381 P
0.83 (totype retains the fundamental features of high-performance and scalable memory band-) 108 365 P
(width.) 108 349 T
1.69 (The SGI 4D/340 system consists of four MIPS R3000 processors and R3010 \337oating-) 108 325 P
-0.16 (point coprocessors running at 33) 108 309 P
-0.16 (MHz. Each processor is nominally rated at 25) 264.9 309 P
-0.16 (V) 485.59 309 P
-0.16 (AX) 492.7 309 P
-0.16 (MIPS) 512.01 309 P
0.28 (and 4.9) 108 293 P
0.28 (DP) 145.58 293 P
0.28 (LINP) 162.9 293 P
0.28 (ACK) 188.45 293 P
0.28 (MFLOPS. Figure 3-2 shows a block diagram of a processor and its) 215.76 293 P
0.93 (two levels of cache. The \336rst-level caches consist of a 64) 108 277 P
0.93 (KByte instruction cache and a) 391.73 277 P
-0.24 (64) 108 261 P
-0.24 (KByte write-through data cache. The data cache interfaces to a 256) 120.99 261 P
-0.24 (KByte, second-level) 442.31 261 P
0.87 (writeback cache through a 4 word write-buf) 108 245 P
0.87 (fer) 323.5 245 P
0.87 (. The write-buf) 336.15 245 P
0.87 (fer allows the processor to) 409.95 245 P
1.57 (continue executing instructions and accessing its \336rst-level cache while writes are out-) 108 229 P
0.39 (standing. Both the \336rst and second-level caches are direct-mapped and use 16-byte cache) 108 213 P
0.51 (lines. The \336rst-level caches are synchronous with their associated processor) 108 197 P
0.51 (, and the sec-) 475.18 197 P
1.31 (ond-level cache is synchronous to the 16) 108 181 P
1.31 (MHz cluster bus. The second-level caches are) 312.02 181 P
-0.09 (responsible for bus snooping and maintaining coherence among the data caches within the) 108 165 P
0.54 (cluster) 108 149 P
0.54 (. Coherence is maintained by a Illinois \050MESI\051 protocol) 139.32 149 P
0.54 ([PaP84, SwS86]. The Illi-) 414.11 149 P
0.77 (nois protocol is especially useful in DASH since it maximizes the use of cache-to-cache) 108 133 P
0.68 (transfers. Such transfers do not reduce the latency of local memory) 108 117 P
0.68 (, but can short-circuit) 435.38 117 P
0.11 (accesses to remote memory by sharing data between processor caches. Ef) 108 101 P
0.11 (fectively) 461.61 101 P
0.11 (, the set) 502.8 101 P
0.21 (of processor caches act as a cluster cache for remote memory) 108 85 P
0.21 (, similar to the shared multi-) 403.04 85 P
108 72 540 720 C
108 405 540 720 C
108.5 431 543.5 450 R
7 X
0 K
V
108.5 442.01 540 450 C
108.5 447.98 576.5 447.98 2 L
0.5 H
0 Z
0 X
0 K
N
108 405 540 720 C
1 10 Q
0 X
0 K
(FIGURE) 112.1 435.34 T
(3-2.  Block diagram of a pr) 153.45 435.34 T
(ocessor in the DASH pr) 267.93 435.34 T
(ototype.) 368.24 435.34 T
105.5 718 539.5 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
0 131.75 269.5 558.25 624.5 302.28 251.6 172.86 459.4 FMBEGINEPSF
%%BeginDocument: /tmp_mnt/home/lenoski/stanford/chap3/Processor.f.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: FreeHand 3.0
%%Title: Processor.f
%%CreationDate: 11/27/91 12:10 AM
%%BoundingBox: 131.75 269.5 558.25 624.5
%%DocumentProcSets: FreeHand_header 3 0
%%DocumentSuppliedProcSets: FreeHand_header 3 0
%%ColorUsage: Color
%%DocumentFonts: Symbol
%%+Times-Bold
%%+Times-Roman
%%DocumentNeededFonts: Symbol
%%+Times-Bold
%%+Times-Roman
%%FHPathName: Dan-41M:dan41.thesis:thesis.extras:Chap3 - Protocol:Processor.f
%%EndComments
%%BeginProcSet: FreeHand_header 3 0
/FHIODict 30 dict def
FHIODict begin
/bdf{bind def}bind def
/d{setdash}bdf
/h{closepath}bdf
/H{}bdf
/J{setlinecap}bdf
/j{setlinejoin}bdf
/M{setmiterlimit}bdf
/n{newpath}bdf
/N{newpath}bdf
/q{gsave}bdf
/Q{grestore}bdf
/w{setlinewidth}bdf
/u{}bdf
/U{}bdf
/sepdef{
dup where not
{
FreeHandSepDict
}
if
3 1 roll exch put
}bdf
/`
{end %. FreeHandDict
/-save0- save def
pop pop pop pop pop
concat
userdict begin
/showpage {} def
0 setgray 0 setlinecap 1 setlinewidth
0 setlinejoin 10 setmiterlimit [] 0 setdash newpath
/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust false setoverprint}if}if
} bdf
/~
{end
-save0- restore
FreeHandDict begin
}bdf
/FreeHandDict 190 dict def
FreeHandDict begin
/currentpacking where{pop true setpacking}if
/xdf{exch def}bdf
/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def
/dr{transform .25 sub round .25 add
exch .25 sub round .25 add exch itransform}bdf
/C{dr curveto}bdf
/L{dr lineto}bdf
/m{dr moveto}bdf
/printerRes
gsave
matrix defaultmatrix setmatrix
72 72 dtransform
abs exch abs
max
grestore
def
/maxsteps 256 def
/calcgraysteps {
currentscreen pop exch 
printerRes exch div exch
2 copy
sin mul round dup mul
3 1 roll
cos mul round dup mul
add 1 add
dup maxsteps gt {pop maxsteps} if
} bdf
/bottom -0 def
/delta -0 def
/frac -0 def
/left -0 def
/numsteps -0 def
/numsteps1 -0 def
/radius -0 def
/right -0 def
/top -0 def
/xt -0 def
/yt -0 def
/df currentflat def
/tempstr 1 string def
/clipflatness currentflat def
/inverted?
0 currenttransfer exec .5 ge def
/colorexists
systemdict/setcmykcolor known def
/tc1 [0 0 0 1] def
/tc2 [0 0 0 1] def
/fc [0 0 0 1] def
/sc [0 0 0 1] def
/concatprocs{
/proc2 exch cvlit def/proc1 exch cvlit def
/newproc proc1 length proc2 length add array def
newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval
newproc cvx}bdf
/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf
/rectpath{newpath left bottom m left top L
right top L right bottom L closepath}bdf
/i{dup 0 eq
{pop df dup}
{dup} ifelse
/clipflatness xdf setflat
}bdf
version cvr 38.0 le
{/setrgbcolor{
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
setrgbcolor}bdf}if
/gettint{0 get}bdf
/puttint{0 exch put}bdf
/vms {/vmsv save def} bdf
/vmr {vmsv restore} bdf
/vmrs{vmsv restore /vmsv save def}bdf
/eomode{
{/filler /eofill load def /clipper /eoclip load def}
{/filler /fill load def /clipper /clip load def}
ifelse
}bdf
/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}
{pop pop}ifelse}forall NF}bdf
/MN{1 index length/Len exch def
dup length Len add string dup
Len 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf
/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch
{1 index MN cvn/NewN exch def cvn
findfont dup maxlength dict CD dup/FontName NewN put dup
/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf
/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf
/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known
{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup
/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdf
userdict begin /BDFontDict 20 dict def end
BDFontDict begin
/bu{}def
/bn{}def
/setTxMode{av 70 ge{pop}if pop}def
/gm{m}def
/show{pop}def
/gr{pop}def
/fnt{pop pop pop}def
/fs{pop}def
/fz{pop}def
/lin{pop pop}def
end
/MacVec 256 array def
MacVec 0 /Helvetica findfont
/Encoding get 0 128 getinterval putinterval
MacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put
/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI
/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/US
MacVec 0 32 getinterval astore pop
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/register/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase
/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacVec 128 128 getinterval astore pop
/fps{
currentflat 
exch 
dup 0 le{pop 1}if
{
dup setflat 3 index stopped
{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}
{exit}
ifelse
}loop
pop setflat pop pop
}bdf
/fp{100 currentflat fps}bdf
/clipper{clip}bdf
/W{/clipper load 100 clipflatness fps}bdf
/fixtrans1 {
dup{ic mul ic sub 1 add}concatprocs exch
dup{im mul im sub 1 add}concatprocs exch
dup{iy mul iy sub 1 add}concatprocs exch
{ik mul ik sub 1 add}concatprocs
}bdf
/fixtrans2 {
currentcolortransfer
5 -1 roll exch concatprocs 7 1 roll
4 -1 roll exch concatprocs 6 1 roll
3 -1 roll exch concatprocs 5 1 roll
concatprocs 4 1 roll
setcolortransfer
}bdf
end%. FreeHandDict
end%. FHIODict
%%EndProcSet
%%EndProlog
%%BeginSetup
FHIODict begin
FreeHandDict begin
131.75 269.5 558.25 624.5 storerect rectpath clip newpath
/onlyk{false}ndf
/ccmyk{dup 5 -1 roll sub 0 max exch}ndf
/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf
/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf
/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf
/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf
/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf
/setoverprint{pop}ndf
/currentoverprint false ndf
/colorimage{pop pop
[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx
/cmykbufs2gray cvx]cvx image}
%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)
version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse
/cci1 {
currentcolortransfer
{ik mul ik sub 1 add}concatprocs 4 1 roll
{iy mul iy sub 1 add}concatprocs 4 1 roll
{im mul im sub 1 add}concatprocs 4 1 roll
{ic mul ic sub 1 add}concatprocs 4 1 roll
setcolortransfer
}ndf
/cci2 {
{invbuf dup length magentabuf length ne
{dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def}if
dup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs
}ndf
/customcolorimage{colorexists{
aload pop pop 4 array astore
setimagecmyk
cci1
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
cci2 {magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}
{pop image}ifelse}ndf
/separationimage{image}ndf
/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf
/inkoverprint false ndf
/setinkoverprint{pop}ndf
/overprintprocess{pop}ndf
/setspotcolor
{spots exch get 0 5 getinterval exch setcustomcolor}ndf
/currentcolortransfer{currenttransfer dup dup dup}ndf
/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf
/getcmyk {
dup length 4 eq
{aload pop}
{aload pop spots exch get 0 4 getinterval aload pop 4
{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse
}bdf
/setimagecmyk{
getcmyk/ik xdf /iy xdf /im xdf /ic xdf
}ndf
/autospread{pop}ndf
/fhsetspreadsize{pop}ndf
/strokeopf false def
/fillopf false def
/R{0 ne /strokeopf xdf}bdf
/O{0 ne /fillopf xdf}bdf
/filler{fill}bdf
/F{fc fhsetcolor fillopf setoverprint false autospread
gsave /filler load fp grestore false setoverprint}bdf
/f{closepath F}bdf
/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf
/s{closepath S}bdf
/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestore
sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf
/b{closepath B}bdf
colorexists not{/setcolorscreen {setscreen pop pop pop pop pop pop pop pop pop}bdf}if
/fhsetcolor{dup length 4 eq
{aload overprintprocess setcmykcolor}
{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}
ifelse
}ndf
/settextcolor{dup fhsetcolor dup length 4 eq
{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}
{pop}
ifelse
}ndf
/ka{/fc xdf}bdf
/Ka{/sc xdf}bdf
/xa{/fc xdf} bdf
/Xa{/sc xdf} bdf
/bc2[0 0]def
/bc4[0 0 0 0]def
/absmax{2 copy abs exch abs gt{exch}if pop}bdf
/calcstep
{ colorexists not and{calcgraysteps}{maxsteps}ifelse
tc1 length 4 eq
{
0 1 3
{tc1 1 index get
tc2 3 -1 roll get
sub
}for
absmax absmax absmax
}
{
bc2 tc1 1 get 1 exch put
tc1 gettint tc2 gettint
sub abs
}
ifelse
mul abs round dup 0 eq{pop 1}if 
dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf
}bdf
/cblend{
tc1 length 4 eq
{
0 1 3
{bc4 exch
tc1 1 index get
tc2 2 index get
1 index sub
frac mul add put
}for bc4
}
{
bc2
tc1 gettint
tc2 gettint
1 index sub
frac mul add
puttint bc2
}
ifelse
fhsetcolor
}bdf
/logtaper{/frac frac 9 mul 1 add log def}bdf
FHIODict begin
/origmtx matrix currentmatrix def
/iminv false def
/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf
/cyanrp{currentfile cyanbuf readhexstring pop iminv{invbuf}if}def
/magentarp{cyanbuf magentabuf copy}bdf
/yellowrp{cyanbuf yellowbuf copy}bdf
/blackrp{cyanbuf blackbuf copy}bdf
/fixtransfer{
colorexists
{fixtrans1 fixtrans2}
{{dup 1 exch sub currentgray mul add}concatprocs
currenttransfer exch concatprocs
systemdict begin settransfer end}ifelse
}ndf
/cmykbufs2gray{
dup length 0 1 3 -1 roll 1 sub
{4 index 1 index get
4 index 2 index get
4 index 3 index get
4 index 4 index get
255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift
2 index 3 1 roll put}for
4 1 roll pop pop pop
}bdf
end
/textopf false def
/curtextmtx{}def
/otw .25 def
/msf{dup/curtextmtx xdf makefont setfont}bdf
/makesetfont/msf load def
/curtextheight{.707104 .707104 curtextmtx dtransform
dup mul exch dup mul add sqrt}bdf
/ta{1 index
{tempstr 0 2 index put tempstr 2 index
gsave exec grestore
tempstr stringwidth rmoveto
5 index eq{6 index 6 index rmoveto}if
3 index 3 index rmoveto
}forall 7{pop}repeat}bdf
/sts{settextcolor textopf setoverprint/ts{awidthshow}def exec false setoverprint}bdf
/stol{setlinewidth settextcolor textopf setoverprint newpath
/ts{{false charpath stroke}ta}def exec false setoverprint}bdf
/currentpacking where{pop false setpacking}if
/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor
0 1 0 0 (Process Magenta) false newcmykcustomcolor
0 0 1 0 (Process Yellow) false newcmykcustomcolor
0 0 0 1 (Process Black) false newcmykcustomcolor
0 0 0 0  (White) false
newcmykcustomcolor
]def
%%EndSetup
%%IncludeFont: Symbol
0 dict dup begin
end
/f0 /Symbol FF def
[] 0 d
3.863708 M
1 w
0 j
0 J
0 O
0 R
0 i
false eomode
[0 0 0 1] Ka
[0 0 0 1] ka
vms
u
222 450 m
222 468 L
2 w
S
132 408 m
558 408 L
0.5 w
[8 4 ] 0 d
S
u
258 414 m
510 414 L
510 402 L
258 402 L
258 414 L
[0 0 0 0] ka
f
n
U
432 450 m
432 468 L
2 w
[] 0 d
S
432 540 m
432 588 L
S
u
390 540 m
468 540 L
474.6275 540 480 534.6275 480 528 C
480 480 L
480 473.3725 474.6275 468 468 468 C
390 468 L
383.3725 468 378 473.3725 378 480 C
378 528 L
378 534.6275 383.3725 540 390 540 C
1 w
b
U
222 588 m
264 588 L
2 w
S
372 384 m
372 360 L
S
u
276 624 m
378 624 L
384.6275 624 390 618.6275 390 612 C
390 558 L
390 551.3725 384.6275 546 378 546 C
276 546 L
269.3725 546 264 551.3725 264 558 C
264 612 L
264 618.6275 269.3725 624 276 624 C
1 w
b
U
u
186 540 m
264 540 L
270.6275 540 276 534.6275 276 528 C
276 480 L
276 473.3725 270.6275 468 264 468 C
186 468 L
179.3725 468 174 473.3725 174 480 C
174 528 L
174 534.6275 179.3725 540 186 540 C
b
U
222 450 m
432 450 L
2 w
S
282 450 m
282 360 L
S
372 450 m
372 432 L
S
u
348 420 m
396 420 L
396 384 L
348 384 L
348 420 L
1 w
b
U
348 396 m
396 396 L
S
348 408 m
396 408 L
S
348 420 m
348 432 L
S
396 420 m
396 432 L
S
u
348 342 m
540 342 L
546.6275 342 552 336.6275 552 330 C
552 282 L
552 275.3725 546.6275 270 540 270 C
348 270 L
341.3725 270 336 275.3725 336 282 C
336 330 L
336 336.6275 341.3725 342 348 342 C
s
U
438 360 m
222 360 L
2 w
S
vmrs
222 360 m
222 312 L
2 w
S
438 360 m
438 342 L
S
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
304.504395 594 m
0 0 32 0 0 (MIPS ) ts
275.504883 576 m
0 0 32 0 0 (R3000\/R3010) ts
f1 [14 0 0 14 0 0] makesetfont
378.495117 576 m
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
384.268066 516 m
0 0 32 0 0 (Data Cache) ts
f1 [14 0 0 14 0 0] makesetfont
429 501.037109 m
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [14 0 0 14 0 0] makesetfont
402.946533 487.037109 m
0 0 32 0 0 (16K x 32) ts
399.461914 473.037109 m
0 0 32 0 0 (W) ts
412.118652 473.037109 m
0 0 32 0 0 (riteThru) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
182.010498 522 m
0 0 32 0 0 (Instruction) ts
201.010254 504 m
0 0 32 0 0 (Cache) ts
f1 [14 0 0 14 0 0] makesetfont
248.989746 504 m
0 0 32 0 0 () ts
225 489.037109 m
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [14 0 0 14 0 0] makesetfont
198.946533 475.037109 m
0 0 32 0 0 (16K x 32) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
407.749756 408 m
0 0 32 0 0 (W) ts
421.500244 408 m
0 0 32 0 0 (rite-Buffer) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [14 0 0 14 0 0] makesetfont
406.69873 394 m
0 0 32 0 0 (4 ) ts
416.949219 394 m
0 0 32 0 0 (W) ts
429.04541 394 m
0 0 32 0 0 (ords Deep) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
342.531738 324 m
0 0 32 0 0 (Second-Level Data Cache) ts
f1 [14 0 0 14 0 0] makesetfont
539.468262 324 m
0 0 32 0 0 () ts
441 309.037109 m
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [14 0 0 14 0 0] makesetfont
414.946533 295.037109 m
0 0 32 0 0 (32K x 64) ts
361.108398 281.037109 m
0 0 32 0 0 (W) ts
373.765137 281.037109 m
0 0 32 0 0 (riteBack, Snooping Cache) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
MacVec 256 array copy
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
156.282715 294 m
0 0 32 0 0 (MPBUS Interface) ts
} 
[0 0 0 1]
sts
222 540 m
222 588 L
2 w
S
S
390 588 m
432 588 L
S
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [14 0 0 14 0 0] makesetfont
141 420 m
0 0 32 0 0 (\(33.33 MHz\)) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Roman
MacVec 256 array copy
/f2 /|______Times-Roman dup RF findfont def
{
f2 [14 0 0 14 0 0] makesetfont
141 390 m
0 0 32 0 0 (\(16 MHz\)) ts
} 
[0 0 0 1]
sts
U
vmr
%%Trailer
end  % FreeHandDict
end  % FHIODict
%%EndDocument
FMENDEPSF
108 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "31" 4
%%Page: "32" 4
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(32) 72 42.62 T
(3.1) 422.72 42.62 T
(System Organization) 436.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
0.23 (level caches proposed for other scalable systems) 72 712 P
0.23 ([WWS+89, CGB91] \050see Section 7.2 for) 307.87 712 P
(details\051.) 72 696 T
0.25 (Local I/O devices within the cluster support scalable bandwidth to disks and communica-) 72 672 P
0.15 (tion channels. The I/O interface supports direct memory access \050DMA\051 to memory) 72 656 P
0.15 (. DMA) 469.88 656 P
0.14 (access dif) 72 640 P
0.14 (fers from normal processor access in that the DMA requestor does not contain a) 118.87 640 P
0.81 (cache. Thus, DMA read operations must return coherent data, but this data is not subse-) 72 624 P
1.11 (quently kept coherent. Likewise, DMA write operations need to update all cached data,) 72 608 P
1.38 (but do not request exclusive ownership. The semantics of a DMA write amounts to an) 72 592 P
0.31 (update coherence protocol. In the prototype, DMA transfers are supported across the sys-) 72 576 P
1.89 (tem and are integrated into the support for processor update writes. Thus, support for) 72 560 P
(DMA operations improves both I/O and interprocessor communication performance.) 72 544 T
0.45 (The cluster bus \050MPBUS\051 of the 4D/340 is a synchronous bus which consists of separate) 72 520 P
-0.05 (32-bit address and 64-bit data buses running at 16) 72 504 P
-0.05 (MHz. While the MPBUS is pipelined, it) 311.75 504 P
0.18 (is not split-transaction. The bus protocol is a problem for DASH because remote accesses) 72 488 P
0.29 (must not occupy the bus while the request is outstanding. If such accesses did occupy the) 72 472 P
0.76 (bus, then memory bandwidth would be reduced considerably) 72 456 P
0.76 (, and deadlock could result.) 369.04 456 P
3.14 (For example, deadlock could occur when two processors in dif) 72 440 P
3.14 (ferent clusters made) 401.14 440 P
-0.08 (accesses to the memory in the other) 72 424 P
-0.08 (\325) 243.19 424 P
-0.08 (s cluster) 246.53 424 P
-0.08 (. If both processors held their local bus, while) 285.43 424 P
0.56 (attempting to acquire the bus in the other cluster to read memory) 72 408 P
0.56 (, then the system would) 388.16 408 P
(deadlock.) 72 392 T
0.53 (The deadlock problem is solved in the prototype by adding a bus retry mechanism to the) 72 368 P
-0.25 (MPBUS which ef) 72 352 P
-0.25 (fectively creates a split-transaction protocol for remote accesses. When a) 156.57 352 P
1.14 (remote access is \336rst made, the processor is forced to retry) 72 336 P
1.14 (, and a request is sent to the) 363.42 336 P
0.56 (remote cluster for service. T) 72 320 P
0.56 (o limit the loss in bus bandwidth while the remote request is) 208.96 320 P
1.45 (outstanding, the bus arbiter is modi\336ed to accept a mask from the directory logic. The) 72 304 P
0.35 (mask is set while the request is outstanding and keeps the processor from doing unneces-) 72 288 P
1.07 (sary retries. When the remote reply is received, the arbitration mask is released and the) 72 272 P
0.43 (processor retries the access. This time, the directory logic can satisfy the request, and the) 72 256 P
(processor completes its memory access.) 72 240 T
-0.28 (T) 72 216 P
-0.28 (o use the 4D/340 in DASH, we have had to make minor modi\336cations to the existing sys-) 78.49 216 P
-0.12 (tem boards and design a pair of new boards to support the directory and inter) 72 200 P
-0.12 (-cluster inter-) 439.17 200 P
1.9 (face. The primary modi\336cation to the existing boards is support for the bus retry and) 72 184 P
0.69 (arbitration masking outlined in the previous paragraph. Other minor modi\336cations to the) 72 168 P
-0.08 (standard 4D/340 include changing the memory board to accept a local) 72 152 P
-0.08 (/) 408.58 152 P
-0.08 (remote decode sig-) 412.91 152 P
1.43 (nal from the directory logic and reducing the read miss fetch size from 64 bytes to 16) 72 136 P
0.47 (bytes. Reducing the fetch size to 16-bytes was done because the 64-byte fetch is actually) 72 120 P
0.49 (done as four separate 16-byte bus transactions on the 4D/340. While this same technique) 72 104 P
1.64 (could have been used across clusters in DASH, these accesses could not be pipelined.) 72 88 P
FMENDPAGE
%%EndPage: "32" 5
%%Page: "33" 5
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(33) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
0.22 (Thus, any hit rate improvement from the lar) 108 368 P
0.22 (ger fetch size was likely to be nulli\336ed by the) 319.84 368 P
(increase in miss penalty) 108 352 T
(.) 222.14 352 T
1 F
(3.1.2  Dir) 108 318 T
(ectory Logic) 155.09 318 T
0 F
0.73 (The directory logic in DASH is responsible for implementing the directory-based coher-) 108 296 P
0.54 (ence protocol and interconnecting the clusters within the system. A block diagram of the) 108 280 P
0.62 (directory boards is shown in Figure 3-3. The logic is partitioned between the two boards) 108 264 P
1.54 (roughly into the logic used for outbound and inbound portions of inter) 108 248 P
1.54 (-cluster transac-) 461.53 248 P
-0.08 (tions. The boards are called the directory controller \050DC\051 and reply controller \050RC\051 boards) 108 232 P
(respectively) 108 216 T
(.) 165.17 216 T
0.35 (The DC board contains three major subsections. The \336rst section is the) 108 192 P
2 F
0.35 (dir) 454.93 192 P
0.35 (ectory contr) 468.48 192 P
0.35 (ol-) 526.67 192 P
0.83 (ler) 108 176 P
0 F
0.83 ( \050DC\051, which includes the directory memory associated with the shared memory con-) 121.32 176 P
0.89 (tained within this cluster) 108 160 P
0.89 (. The DC logic is responsible for keeping the directory updated) 228.29 160 P
0.23 (and sending all out-bound network requests and replies. The second section is the request) 108 144 P
0.69 (and reply outbound) 108 128 P
2 F
0.69 (network logic) 206.34 128 P
0 F
0.69 ( together with the horizontal dimension of the network) 272.66 128 P
0.33 (itself. Included in this logic are FIFOs which isolate the local bus from congestion on the) 108 112 P
0.21 (global network. The \336nal section of the DC board is the) 108 96 P
2 F
0.21 (performance monitor) 380.8 96 P
0 F
0.21 (. The proto-) 482.62 96 P
0.19 (type is intended as an experimental machine, and the performance logic aids in the analy-) 108 80 P
108 72 540 720 C
108 376 540 720 C
0 8 36 780 572 421.42 292.39 113.29 421 FMBEGINEPSF
%%BeginDocument: /tmp_mnt/home/lenoski/stanford/chap3/dir_simp.boards.f.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: FreeHand
%%Title: dir_simp.boards.f
%%CreationDate: 6/4/91 11:14 AM
%%BoundingBox: 8 36 780 572
%%DocumentProcSets: FreeHand_header 2 0
%%DocumentSuppliedProcSets: FreeHand_header 2 0
%%ColorUsage: Color
%%CMYKProcessColor: 0 0 0 0.4  (40% Grey)
%%+ 0 0 0 0.6  (60% Grey)
%%+ 0 0 0 0.8  (80% Grey)
%%+ 0 0 0 0.2  (20% Grey)
%%DocumentFonts: Symbol
%%+Times-Bold
%%DocumentNeededFonts: Symbol
%%+Times-Bold
%%EndComments
%%BeginProcSet: FreeHand_header 2 0
/FreeHandDict 200 dict def
FreeHandDict begin
/currentpacking where{pop true setpacking}if
/bdf{bind def}bind def
/bdef{bind def}bdf
/xdf{exch def}bdf
/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/dr{transform .25 sub round .25 add
exch .25 sub round .25 add exch itransform}bdf
/curveto{dr curveto}bdf
/lineto{dr lineto}bdf
/moveto{dr moveto}bdf
/graystep 1 256 div def
/bottom -0 def
/delta -0 def
/frac -0 def
/left -0 def
/numsteps -0 def
/numsteps1 -0 def
/radius -0 def
/right -0 def
/top -0 def
/x -0 def
/y -0 def
/df currentflat def
/tempstr 1 string def
/clipflatness 3 def
/inverted?
0 currenttransfer exec .5 ge def
/concatprocs{
/proc2 exch cvlit def/proc1 exch cvlit def
/newproc proc1 length proc2 length add array def
newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval
newproc cvx}bdf
/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf
/rectpath{newpath left bottom moveto left top lineto
right top lineto right bottom lineto closepath}bdf
/sf{dup 0 eq{pop df dup 3 mul}{dup} ifelse /clipflatness xdf setflat}bdf
version cvr 38.0 le
{/setrgbcolor{
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
setrgbcolor}bdf}if
/gettint{0 get}bdf
/puttint{0 exch put}bdf
/vms{/vmsv save def}bdf
/vmr{vmsv restore}bdf
/vmrs{vmr vms}bdf
/CD{/NF exch def
{exch dup/FID ne{exch NF 3 1 roll put}
{pop pop}ifelse}forall NF}bdf
/MN{1 index length/Len exch def
dup length Len add string dup
Len 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf
/RC{256 string cvs(|______)anchorsearch
{1 index MN cvn/NewN exch def cvn
findfont dup maxlength dict CD dup/FontName NewN put dup
/Encoding MacVec put NewN exch definefont pop}{pop}ifelse}bdf
/RF{dup FontDirectory exch known{pop}{RC}ifelse}bdf
/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known
{exch}if pop findfont}bdf
userdict begin /BDFontDict 20 dict def end
BDFontDict begin
/bu{}def
/bn{}def
/setTxMode{pop}def
/gm{moveto}def
/show{pop}def
/gr{pop}def
/fnt{pop pop pop}def
/fs{pop}def
/fz{pop}def
/lin{pop pop}def
end
/MacVec 256 array def
MacVec 0 /Helvetica findfont
/Encoding get 0 128 getinterval putinterval
MacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put
/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI
/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/US
MacVec 0 32 getinterval astore pop
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/register/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase
/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacVec 128 128 getinterval astore pop
/fps{currentflat exch dup 0 le{pop 1}if
{dup setflat 3 index stopped
{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse
}loop pop setflat pop pop
}bdf
/fp{100 currentflat fps}bdf
/rfp{clipflatness currentflat fps}bdf
/fcp{100 clipflatness fps}bdf
/fclip{{clip}fcp}bdf
/feoclip{{eoclip}fcp}bdf
end %. FreeHandDict
%%EndProcSet
%%BeginSetup
FreeHandDict begin
/ccmyk{dup 5 -1 roll sub 0 max exch}ndf
/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf
/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf
/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf
/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf
/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf
/setoverprint{pop}ndf
/currentoverprint false ndf
/colorimage{pop pop
[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx
/exch cvx/pop cvx/exch cvx/pop cvx/exch cvx/pop cvx/invbuf cvx]cvx image}
%. version 47.1 of Postscript defines colorimage incorrectly (rgb model only)
version cvr 47.1 le{userdict begin bdf end}{ndf}ifelse
/customcolorimage{pop image}ndf
/separationimage{image}ndf
/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf
/inkoverprint false ndf
/setinkoverprint{pop}ndf
/overprintprocess{pop}ndf
/setspotcolor
{spots exch get 0 5 getinterval exch setcustomcolor}ndf
/currentcolortransfer{currenttransfer dup dup dup}ndf
/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf
/setimagecmyk{dup length 4 eq
{aload pop}
{aload pop spots exch get 0 4 getinterval aload pop 4
{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse
systemdict /colorimage known{version cvr 47.1 gt}{false}ifelse
not{pop 1 currentgray sub}if
/ik xdf /iy xdf /im xdf /ic xdf
}ndf
/setcolor{dup length 4 eq
{aload overprintprocess setcmykcolor}
{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}
ifelse}ndf
/bc2[0 0]def
/bc4[0 0 0 0]def
/c1[0 0 0 0]def
/c2[0 0 0 0]def
/absmax{2 copy abs exch abs gt{exch}if pop}bdf
/calcstep
{c1 length 4 eq
{
0 1 3
{c1 1 index get
c2 3 -1 roll get
sub
}for
absmax absmax absmax
}
{
bc2 c1 1 get 1 exch put
c1 gettint c2 gettint
sub abs
}ifelse
graystep div abs round dup 0 eq{pop 1}if
dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf
}bdf
/cblend{
c1 length 4 eq
{
0 1 3
{bc4 exch
c1 1 index get
c2 2 index get
1 index sub
frac mul add put
}for bc4
}{
bc2
c1 gettint
c2 gettint
1 index sub
frac mul add
puttint bc2
}ifelse
setcolor
}bdf
/logtaper{/frac frac 9 mul 1 add log def}bdf
/imbits 1 def
/iminv false def
/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf
/cyanrp{currentfile cyanbuf readhexstring pop iminv{invbuf}if}def
/magentarp{cyanbuf magentabuf copy}bdf
/yellowrp{cyanbuf yellowbuf copy}bdf
/blackrp{cyanbuf blackbuf copy}bdf
/fixtransfer{
dup{ic mul ic sub 1 add}concatprocs exch
dup{im mul im sub 1 add}concatprocs exch
dup{iy mul iy sub 1 add}concatprocs exch
{ik mul ik sub 1 add}concatprocs
currentcolortransfer
5 -1 roll exch concatprocs 7 1 roll
4 -1 roll exch concatprocs 6 1 roll
3 -1 roll exch concatprocs 5 1 roll
concatprocs 4 1 roll
setcolortransfer
}bdf
/textopf false def
/curtextmtx{}def
/otw .25 def
/msf{dup/curtextmtx xdf makefont setfont}bdf
/makesetfont/msf load def
/curtextheight{.707104 .707104 curtextmtx dtransform
dup mul exch dup mul add sqrt}bdf
/ta{1 index
{tempstr 0 2 index put tempstr 2 index
gsave exec grestore
tempstr stringwidth rmoveto
5 index eq{6 index 6 index rmoveto}if
3 index 3 index rmoveto
}forall 7{pop}repeat}bdf
/sts{setcolor textopf setoverprint/ts{awidthshow}def exec}bdf
/stol{setlinewidth setcolor textopf setoverprint newpath
/ts{{false charpath stroke}ta}def exec}bdf
/currentpacking where{pop false setpacking}if
%%EndSetup
/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor
0 1 0 0 (Process Magenta) false newcmykcustomcolor
0 0 1 0 (Process Yellow) false newcmykcustomcolor
0 0 0 1 (Process Black) false newcmykcustomcolor
]def
vms
0 sf
newpath
442 257 moveto
559 257 lineto
559 236 lineto
442 236 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
0 sf
newpath
22 499 moveto
374 499 lineto
381.7 499 388 492.7 388 485 curveto
388 194 lineto
388 186.3 381.7 180 374 180 curveto
22 180 lineto
14.3 180 8 186.3 8 194 curveto
8 485 lineto
8 492.7 14.3 499 22 499 curveto
closepath
gsave
[0 0 0 0.2]setcolor  {fill}fp 
grestore
0 sf
newpath
74 487 moveto
152 487 lineto
159.7 487 166 480.7 166 473 curveto
166 449 lineto
166 441.3 159.7 435 152 435 curveto
74 435 lineto
66.3 435 60 441.3 60 449 curveto
60 473 lineto
60 480.7 66.3 487 74 487 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
424 499 moveto
766 499 lineto
773.7 499 780 492.7 780 485 curveto
780 194 lineto
780 186.3 773.7 180 766 180 curveto
424 180 lineto
416.3 180 410 186.3 410 194 curveto
410 485 lineto
410 492.7 416.3 499 424 499 curveto
closepath
gsave
[0 0 0 0.2]setcolor  {fill}fp 
grestore
1 sf
newpath
446.7 203.6 moveto
446.7 150.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
534.7 343.6 moveto
534.7 358 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
327.7 204 moveto
327.7 49.1 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
109.5 377.6 moveto
109.5 352.8 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
50.8 208.6 moveto
50.8 164.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
161.7 203.6 moveto
161.5 48.3 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
270.7 203 moveto
270.7 87.1 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
554.7 44 moveto
554.7 193 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
134.7 81.6 moveto
134.7 192.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
109.5 343.7 moveto
106.8 353.2 lineto
112.3 353.3 lineto
109.5 343.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
50.7 155 moveto
48 164.5 lineto
53.5 164.6 lineto
50.7 155 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
134.4 79.5 moveto
131.7 89 lineto
137.3 89.1 lineto
134.4 79.5 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
162.5 42.8 moveto
159.7 52.2 lineto
165.3 52.3 lineto
162.5 42.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
270.7 77.5 moveto
268 87 lineto
273.5 87.1 lineto
270.7 77.5 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
327.5 41.5 moveto
324.7 51 lineto
330.3 51.1 lineto
327.5 41.5 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
134.5 201.3 moveto
132 191.8 lineto
137.5 191.8 lineto
134.5 201.3 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
vmrs
0 sf
newpath
503.5 201.3 moveto
501 191.8 lineto
506.5 191.8 lineto
503.5 201.3 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
554 200.8 moveto
551.5 191.6 lineto
557 191.6 lineto
554 200.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
9.2 78.8 moveto
18.8 81.2 lineto
18.7 75.6 lineto
9.2 78.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
10.2 42.7 moveto
19.8 45.1 lineto
19.7 39.5 lineto
10.2 42.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
773 43 moveto
763.5 45.5 lineto
763.5 40 lineto
773 43 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
29.501602 136.970108 moveto
0 0 32 0 0 (Arbitration) ts
44.656876 122.970108 moveto
0 0 32 0 0 (Masks) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
24.5 83.970108 moveto
0 0 32 0 0 (MPBUS ) ts
76.224121 83.970108 moveto
0 0 32 0 0 (Addr) ts
107.86084 83.970108 moveto
0 0 32 0 0 (ess) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
24.5 46.970108 moveto
0 0 32 0 0 (MPBUS Data) ts
} 
[0 0 0 1]
sts
vmrs
gsave [1 0 0 1 -11 11.199997] concat
vms
0 sf
newpath
784.3 67.8 moveto
774.7 70.3 lineto
774.8 64.8 lineto
784.3 67.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
vmr
grestore
0 sf
newpath
14 79 moveto
765 79 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
14 43 moveto
765 43 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
411.5 134.970108 moveto
0 0 32 0 0 (Remote Cache) ts
411.5 122.970108 moveto
0 0 32 0 0 (    Status,) ts
411.5 110.970108 moveto
0 0 32 0 0 (Bus Retry) ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
446.7 148.8 moveto
444 158.2 lineto
449.5 158.3 lineto
446.7 148.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
668.3 378.3 moveto
665.8 368.8 lineto
671.3 368.8 lineto
668.3 378.3 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
636.49646 553.970093 moveto
0 0 32 0 0 (Requests to) ts
655.004761 539.970093 moveto
0 0 32 0 0 (X ) ts
/f0 /Symbol FF def
f0 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 (\261) ts
f1 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 ( 1) ts
} 
[0 0 0 1]
sts
vmrs
1 sf
newpath
291.5 376.6 moveto
291.5 351.3 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
291.5 342.8 moveto
288.7 352.2 lineto
294.3 352.3 lineto
291.5 342.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
1 sf
newpath
488.5 343.6 moveto
488.5 370.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
488.3 375.6 moveto
485.7 366.1 lineto
491.3 366.1 lineto
488.3 375.6 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
504 193 moveto
504 80 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmrs
gsave [0.743439 0 0 1.222137 8.823837 -105.269104] concat
vms
1 sf
newpath
32.3 367.6 moveto
230.2 367.6 lineto
237.7 367.6 243.7 361.5 243.7 354.1 curveto
243.7 264.1 lineto
243.7 256.6 237.7 250.6 230.2 250.6 curveto
32.3 250.6 lineto
24.8 250.6 18.8 256.6 18.8 264.1 curveto
18.8 354.1 lineto
18.8 361.5 24.8 367.6 32.3 367.6 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [24 0 0 24 0 0] makesetfont
29.5 314.977356 moveto
0 0 32 0 0 (Reply ) ts
29.5 290.977356 moveto
0 0 32 0 0 (Cntrl. \(RC\)) ts
} 
[0 0 0 1]
sts
vmrs
gsave [0.738113 0 0 1.222137 195.124115 -106.269104] concat
vms
1 sf
newpath
32.3 367.6 moveto
230.2 367.6 lineto
237.7 367.6 243.7 361.5 243.7 354.1 curveto
243.7 264.1 lineto
243.7 256.6 237.7 250.6 230.2 250.6 curveto
32.3 250.6 lineto
24.8 250.6 18.8 256.6 18.8 264.1 curveto
18.8 354.1 lineto
18.8 361.5 24.8 367.6 32.3 367.6 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [24 0 0 24 0 0] makesetfont
224.5 316.977356 moveto
0 0 32 0 0 (Pseudo-CPU ) ts
224.5 292.977356 moveto
0 0 32 0 0 (\(PCPU\)) ts
} 
[0 0 0 1]
sts
vmrs
gsave [0.742554 0 0 1.213593 405.040588 -103.126892] concat
vms
1 sf
newpath
32.3 367.6 moveto
230.2 367.6 lineto
237.7 367.6 243.7 361.5 243.7 354.1 curveto
243.7 264.1 lineto
243.7 256.6 237.7 250.6 230.2 250.6 curveto
32.3 250.6 lineto
24.8 250.6 18.8 256.6 18.8 264.1 curveto
18.8 354.1 lineto
18.8 361.5 24.8 367.6 32.3 367.6 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [24 0 0 24 0 0] makesetfont
433.5 318.977356 moveto
0 0 32 0 0 (Dir) ts
467.71875 318.977356 moveto
0 0 32 0 0 (ectory) ts
433.5 294.977356 moveto
0 0 32 0 0 (Cntrl. \(DC\)) ts
} 
[0 0 0 1]
sts
vmrs
gsave [0.742554 0 0 1.213593 588.040588 -103.126892] concat
vms
1 sf
newpath
32.3 367.6 moveto
230.2 367.6 lineto
237.7 367.6 243.7 361.5 243.7 354.1 curveto
243.7 264.1 lineto
243.7 256.6 237.7 250.6 230.2 250.6 curveto
32.3 250.6 lineto
24.8 250.6 18.8 256.6 18.8 264.1 curveto
18.8 354.1 lineto
18.8 361.5 24.8 367.6 32.3 367.6 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [24 0 0 24 0 0] makesetfont
614.5 320.977356 moveto
0 0 32 0 0 (Performance) ts
614.5 296.977356 moveto
0 0 32 0 0 (Monitor) ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
161.5 200.3 moveto
159 190.8 lineto
164.5 190.8 lineto
161.5 200.3 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
1 sf
newpath
736.6 192 moveto
736.4 51 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
736.4 43.6 moveto
733.6 53 lineto
739.2 53.1 lineto
736.4 43.6 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
736.4 201.1 moveto
733.9 191.6 lineto
739.4 191.6 lineto
736.4 201.1 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
698.8 201.2 moveto
696.3 191.7 lineto
701.8 191.7 lineto
698.8 201.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
699.3 193.9 moveto
699.3 80 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
642.7 151 moveto
642.7 199.4 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
642.7 201.2 moveto
640 191.8 lineto
645.5 191.7 lineto
642.7 201.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
605.5 138.970108 moveto
0 0 32 0 0 () ts
/f0 /Symbol FF def
f0 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 (\273) ts
f1 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 ( 80 Other) ts
605.5 126.970108 moveto
0 0 32 0 0 (   Events) ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
668.5 370 moveto
668.5 358 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
535 358 moveto
668 358 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
488.5 427 moveto
488.5 405 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmrs
0 sf
newpath
668.5 424 moveto
668.5 407 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
488.3 432.8 moveto
485.8 423.3 lineto
491.3 423.3 lineto
488.3 432.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
486 422.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
486 422.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
668.3 432.8 moveto
665.8 423.3 lineto
671.3 423.3 lineto
668.3 432.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
666 422.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
666 422.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
289 422.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
289 422.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
107 423.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [12 0 0 12 0 0] makesetfont
107 423.988647 moveto
0 0 32 0 0 () ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
94.903412 470.970093 moveto
0 0 32 0 0 (Reply ) ts
73.775238 456.970093 moveto
0 0 32 0 0 (Y) ts
82.597015 456.970093 moveto
0 0 32 0 0 (-Dimension) ts
89.661957 442.970093 moveto
0 0 32 0 0 ( Router) ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
403 520 moveto
204 520 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
355 482 moveto
382 509 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
595 509 moveto
383 509 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
626 477 moveto
595 508 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
gsave [-0.707108 0.707108 -0.707108 -0.707108 920.828186 519.012207] concat
vms
0 sf
newpath
374.3 433.8 moveto
371.8 424.3 lineto
377.3 424.3 lineto
374.3 433.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
vmr
grestore
gsave [-0.707108 0.707108 -0.707108 -0.707108 735.728149 521.112244] concat
vms
0 sf
newpath
374.3 433.8 moveto
371.8 424.3 lineto
377.3 424.3 lineto
374.3 433.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
vmr
grestore
gsave [-1 0 0 -1 217 820.799988] concat
vms
0 sf
newpath
109.5 405 moveto
109.5 387 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
109.3 413.8 moveto
106.8 404.3 lineto
112.3 404.3 lineto
109.3 413.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
vmr
grestore
gsave [1 0 0 -1 0 817.799988] concat
vms
0 sf
newpath
291.5 407 moveto
291.5 385 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
291.3 412.8 moveto
288.8 403.3 lineto
294.3 403.3 lineto
291.3 412.8 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
vmr
grestore
vmrs
0 sf
newpath
466.3 404 moveto
511 404 lineto
511 388 lineto
466.3 388 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
0 sf
newpath
646.3 407 moveto
691 407 lineto
691 391 lineto
646.3 391 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
462.499878 552.970093 moveto
0 0 32 0 0 (Replies to) ts
475.954712 538.970093 moveto
0 0 32 0 0 (X ) ts
/f0 /Symbol FF def
f0 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 (\261) ts
f1 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 ( 1) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
270.475769 552.870117 moveto
0 0 32 0 0 (Requests) ts
281.662781 538.870117 moveto
0 0 32 0 0 (Y) ts
291.253601 538.870117 moveto
0 0 32 0 0 ( ) ts
/f0 /Symbol FF def
f0 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 (\261) ts
f1 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 ( 1) ts
} 
[0 0 0 1]
sts
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
78.499893 551.870117 moveto
0 0 32 0 0 (Replies to) ts
92.212784 537.870117 moveto
0 0 32 0 0 (Y) ts
101.803604 537.870117 moveto
0 0 32 0 0 ( ) ts
/f0 /Symbol FF def
f0 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 (\261) ts
f1 [14 0 0 14 0 0] makesetfont
0 0 32 0 0 ( 1) ts
} 
[0 0 0 1]
sts
vmrs
gsave [1 0 0 1 0 0] concat
vms
0 sf
newpath
13 410 moveto
74 410 lineto
74 368 lineto
13 368 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.2]setcolor  {stroke}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
19.399994 391.432983 moveto
0 0 32 0 0 (RC) ts
19.399994 373.432983 moveto
0 0 32 0 0 (Board) ts
} 
[0 0 0 1]
sts
vmrs
vmr
grestore
0 sf
newpath
714 426 moveto
775 426 lineto
775 384 lineto
714 384 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.2]setcolor  {stroke}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [18 0 0 18 0 0] makesetfont
720.400024 407.432983 moveto
0 0 32 0 0 (DC) ts
720.400024 389.432983 moveto
0 0 32 0 0 (Board) ts
} 
[0 0 0 1]
sts
vmrs
gsave [1.288879 0 0 1.240875 -82.708557 -89.569092] concat
vms
0 sf
newpath
314 376 moveto
269.7 376 lineto
269.7 393 lineto
314 393 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave [-1 0 0 -1 905.700012 903] concat
vms
1 sf
newpath
591.7 499.6 moveto
591.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
591.7 526.6 moveto
636.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 526.6 moveto
636.7 499.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 521.6 moveto
591.7 521.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 515.6 moveto
591.7 515.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 510.6 moveto
591.7 510.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [1.288879 0 0 1.240875 -260.708557 -89.569092] concat
vms
0 sf
newpath
314 376 moveto
269.7 376 lineto
269.7 393 lineto
314 393 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave [-1 0 0 -1 905.700012 903] concat
vms
1 sf
newpath
591.7 499.6 moveto
591.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
591.7 526.6 moveto
636.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 526.6 moveto
636.7 499.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 521.6 moveto
591.7 521.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 515.6 moveto
591.7 515.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 510.6 moveto
591.7 510.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [-1.288879 0 0 -1.240875 865.708557 875.569092] concat
vms
0 sf
newpath
314 376 moveto
269.7 376 lineto
269.7 393 lineto
314 393 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave [-1 0 0 -1 905.700012 903] concat
vms
1 sf
newpath
591.7 499.6 moveto
591.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
591.7 526.6 moveto
636.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 526.6 moveto
636.7 499.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 521.6 moveto
591.7 521.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 515.6 moveto
591.7 515.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 510.6 moveto
591.7 510.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [-1.288879 0 0 -1.240875 1044.708496 875.569092] concat
vms
0 sf
newpath
314 376 moveto
269.7 376 lineto
269.7 393 lineto
314 393 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave [-1 0 0 -1 905.700012 903] concat
vms
1 sf
newpath
591.7 499.6 moveto
591.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
591.7 526.6 moveto
636.7 526.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 526.6 moveto
636.7 499.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 521.6 moveto
591.7 521.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 515.6 moveto
591.7 515.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
1 sf
newpath
636.7 510.6 moveto
591.7 510.6 lineto
gsave
1 setlinewidth 2 setlinecap 0 setlinejoin 10 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [1 0 0 1 0 3] concat
vms
gsave [1 0 0 1 0 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1 0 0 1 34 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [1 0 0 1 188 3] concat
vms
gsave [1 0 0 1 0 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1 0 0 1 34 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [1 0 0 1 384 3] concat
vms
gsave [1 0 0 1 0 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1 0 0 1 34 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [1 0 0 1 563 3] concat
vms
gsave [1 0 0 1 0 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1 0 0 1 34 0] concat
vms
0 sf
newpath
88 533.2 moveto
85.4 523.7 lineto
91 523.7 lineto
88 533.2 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 481.7 moveto
85.4 491.1 lineto
91 491.3 lineto
88.2 481.7 lineto
closepath
gsave
[0 0 0 1]setcolor  {fill}fp 
grestore
0 sf
newpath
88.2 493 moveto
88.2 524 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
0 sf
newpath
169 485 moveto
205 521 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
255 485 moveto
333 485 lineto
340.7 485 347 478.7 347 471 curveto
347 447 lineto
347 439.3 340.7 433 333 433 curveto
255 433 lineto
247.3 433 241 439.3 241 447 curveto
241 471 lineto
241 478.7 247.3 485 255 485 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
269.298187 468.970093 moveto
0 0 32 0 0 (Request ) ts
254.775238 454.970093 moveto
0 0 32 0 0 (Y) ts
263.597015 454.970093 moveto
0 0 32 0 0 (-Dimension) ts
270.661957 440.970093 moveto
0 0 32 0 0 ( Router) ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
453 486 moveto
531 486 lineto
538.7 486 545 479.7 545 472 curveto
545 448 lineto
545 440.3 538.7 434 531 434 curveto
453 434 lineto
445.3 434 439 440.3 439 448 curveto
439 472 lineto
439 479.7 445.3 486 453 486 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
474.553406 469.970093 moveto
0 0 32 0 0 (Reply) ts
452.782654 455.970093 moveto
0 0 32 0 0 (X-Dimension) ts
469.311951 441.970093 moveto
0 0 32 0 0 ( Router) ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
442 480 moveto
403 519 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
0 sf
newpath
632 485 moveto
710 485 lineto
717.7 485 724 478.7 724 471 curveto
724 447 lineto
724 439.3 717.7 433 710 433 curveto
632 433 lineto
624.3 433 618 439.3 618 447 curveto
618 471 lineto
618 478.7 624.3 485 632 485 curveto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 1]setcolor  {stroke}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
646.948181 468.970093 moveto
0 0 32 0 0 (Request) ts
631.782654 454.970093 moveto
0 0 32 0 0 (X-Dimension) ts
648.311951 440.970093 moveto
0 0 32 0 0 ( Router) ts
} 
[0 0 0 1]
sts
vmrs
0 sf
newpath
439.4 267 moveto
564 267 lineto
564 218 lineto
439.4 218 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
439 254 moveto
562 254 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
439 242 moveto
563 242 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
439 230 moveto
564 230 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
468.9 266 moveto
468.9 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
480.8 266 moveto
480.8 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
492.7 266 moveto
492.7 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
516.4 266 moveto
516.4 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
528.3 266 moveto
528.3 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
540.2 266 moveto
540.2 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
552.1 266 moveto
552.1 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
564 266 moveto
564 216 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
504.6 266 moveto
504.6 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
457 266 moveto
457 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
445.1 266 moveto
445.1 218 lineto
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
0 sf
newpath
445 258 moveto
561 258 lineto
561 234 lineto
445 234 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
vmrs
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
449.78656 240.970108 moveto
0 0 32 0 0 (Dir) ts
469.747498 240.970108 moveto
0 0 32 0 0 (ectory ) ts
509.778748 240.970108 moveto
0 0 32 0 0 (Array) ts
} 
[0 0 0 1]
sts
vmrs
gsave [1 0 0 1 -233 15] concat
vms
gsave [1.007889 0 0 0.694443 -6.740173 61.417007] concat
vms
gsave [1.016022 0 0 0.18367 -13.691223 193.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.016022 0 0 0.18367 -13.691223 184.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.016022 0 0 0.18367 -13.691223 175.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.016022 0 0 0.18367 -13.691223 166.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
gsave [1 0 0 1 3 -6] concat
vms
0 sf
newpath
866 229 moveto
958 229 lineto
958 209 lineto
866 209 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
872.795227 213.970108 moveto
0 0 32 0 0 (T) ts
881.097473 213.970108 moveto
0 0 32 0 0 (race Buffer) ts
} 
[0 0 0 1]
sts
vmrs
vmr
grestore
vmr
grestore
gsave [1 0 0 1 -249 42] concat
vms
gsave [1.007889 0 0 0.694443 -0.740173 72.417007] concat
vms
gsave [1.016022 0 0 0.18367 -13.691223 193.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.016022 0 0 0.18367 -13.691223 184.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.016022 0 0 0.18367 -13.691223 175.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.016022 0 0 0.18367 -13.691223 166.470749] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
vmr
grestore
0 sf
newpath
988 237 moveto
1012 237 lineto
1012 212 lineto
988 212 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
993.51123 218.970108 moveto
0 0 32 0 0 (+1) ts
} 
[0 0 0 0.8]
sts
vmrs
gsave [1 0 0 1 25 163] concat
vms
0 sf
newpath
847 71 moveto
952 71 lineto
952 52 lineto
847 52 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
849.808472 55.970108 moveto
0 0 32 0 0 (Histogram RAM) ts
} 
[0 0 0 1]
sts
vmrs
vmr
grestore
vmr
grestore
gsave [1 0 0 1 -834 55] concat
vms
gsave [1 0 0 1 0 0] concat
vms
gsave [1.144409 0 0 0.1922 -108.391785 170.447861] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.144409 0 0 0.1922 -108.391785 161.029831] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.144409 0 0 0.1922 -108.391785 151.611786] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.144409 0 0 0.1922 -108.391785 142.193741] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.144409 0 0 0.1922 -108.391785 133.030182] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1.144409 0 0 0.1922 -108.391785 123.866623] concat
vms
0 sf
newpath
854.4 188 moveto
854.4 237 lineto
979 237 lineto
979 188 lineto
854.4 188 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
gsave
1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
0 sf
newpath
898.5 161 moveto
898.5 215 lineto
gsave
1.1 setlinewidth 0 setlinecap 0 setlinejoin 3.863693 setmiterlimit [0 0 0 0.8]setcolor  {stroke}fp 
grestore
vmr
grestore
gsave [1 0 0 1 14.699997 -75] concat
vms
0 sf
newpath
859 283 moveto
993 283 lineto
993 247 lineto
859 247 lineto
closepath
gsave
[0 0 0 0]setcolor  {fill}fp 
grestore
%%IncludeFont: Times-Bold
/f1 /|______Times-Bold dup RF findfont def
{
f1 [14 0 0 14 0 0] makesetfont
861.780701 265.970093 moveto
0 0 32 0 0 (Remote ) ts
910.363708 265.970093 moveto
0 0 32 0 0 (Access Cache) ts
906.480896 251.970108 moveto
0 0 32 0 0 (\(RAC\)) ts
} 
[0 0 0 1]
sts
vmrs
vmr
grestore
vmr
grestore
vmr
end  % FreeHandDict
%%EndDocument: _
%%EndDocument
FMENDEPSF
104.5 394 539.5 413 R
7 X
0 K
V
108 405.01 539.5 413 C
104.5 410.98 572.5 410.98 2 L
0.5 H
0 Z
0 X
0 K
N
108 376 540 720 C
1 10 Q
0 X
0 K
(FIGURE) 108.1 398.34 T
(3-3.  Block diagram of dir) 149.45 398.34 T
(ectory logic.) 259.21 398.34 T
105.5 718 539.5 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
108 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "33" 6
%%Page: "34" 6
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(34) 72 42.62 T
(3.1) 422.72 42.62 T
(System Organization) 436.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
1.42 (sis of the system by tracing and counting a variety of low-level intra- and inter) 72 712 P
1.42 (-cluster) 468.03 712 P
(events.) 72 696 T
0.6 (The directory memory is or) 72 672 P
0.6 (ganized as a simple bit vector with one bit for each of the 16) 206.09 672 P
0.43 (clusters. In addition to the bit vector) 72 656 P
0.43 (, each directory entry contains two state bits and two) 247.65 656 P
0.15 (parity bits. One state bit indicates whether the memory block is held dirty in some remote) 72 640 P
0.2 (cluster) 72 624 P
0.2 (. The other bit is the logical OR of directory vector and provides a quick indication) 103.32 624 P
1.16 (of whether the block is cached in a remote cluster) 72 608 P
1.16 (. While the bit vector structure is not) 319.96 608 P
0.59 (scalable, its memory overhead is similar to more scalable schemes given the limited size) 72 592 P
1.64 (of the prototype. In addition, the full bit map allows more direct measurements of the) 72 576 P
0.19 (caching behavior of the machine. Scalable extensions to this structure and their ef) 72 560 P
0.19 (fects on) 466.17 560 P
(the prototype protocol are outlined in Chapter 6.) 72 544 T
0.94 (The directory memory is accessed on each bus transaction. The directory information is) 72 520 P
1.54 (combined with the type of bus operation, address, and the result of snooping the local) 72 504 P
0.85 (caches to determine what network messages and bus controls the DC will generate. The) 72 488 P
-0.04 (directory is implemented in DRAM technology and always accessed in read-modify-write) 72 472 P
0.55 (cycles. Performing the DRAM read-modify-write cycles on the directory in the time that) 72 456 P
1.45 (DRAM main memory reads a 16-byte block is dif) 72 440 P
1.45 (\336cult. In the prototype, the directory) 322.54 440 P
0.36 (cycle time matches that of main memory) 72 424 P
0.36 (. In other systems, the need for the read-modify-) 269.27 424 P
1.92 (write may limit memory cycle time \050see Section 6.1.4 for a further discussion of this) 72 408 P
(issue\051.) 72 392 T
0.81 (The RC board\325) 72 368 P
0.81 (s major responsibility is processing incoming network messages. The RC) 144.91 368 P
0.09 (contains three major sections. The \336rst is the) 72 352 P
2 F
0.09 (r) 290.25 352 P
0.09 (eply contr) 294.47 352 P
0.09 (oller) 342.41 352 P
0 F
0.09 ( \050RC\051 which tracks outstand-) 365.07 352 P
0.02 (ing requests made by the local processors. It also receives and buf) 72 336 P
0.02 (fers replies from remote) 388.38 336 P
1.7 (clusters using the) 72 320 P
2 F
1.7 (r) 163.38 320 P
1.7 (emote access cache) 167.6 320 P
0 F
1.7 ( \050RAC\051. The second section is the) 264.92 320 P
2 F
1.7 (pseudo-CPU) 442.04 320 P
0 F
1.38 (\050PCPU\051. The PCPU is a simple translator which receives network messages and issues) 72 304 P
1.17 (them on the local bus for remote CPUs. Issuing all remote requests to the bus compro-) 72 288 P
0.61 (mises performance slightly) 72 272 P
0.61 (, but this is a minor ef) 202.36 272 P
0.61 (fect because most remote requests must) 310.75 272 P
0.1 (access main memory or the directory) 72 256 P
0.1 (. Since both of these are single ported, the bus serves) 249.23 256 P
0.08 (as an arbiter for these RAM arrays. Issuing remote requests on the bus also keeps the pro-) 72 240 P
0.03 (cessor caches coherent for the local portion of global memory) 72 224 P
0.03 (. The \336nal section of the RC) 368.24 224 P
1.74 (board is the vertical dimension of the mesh network and the inbound network receive) 72 208 P
0.7 (logic. This logic includes FIFO buf) 72 192 P
0.7 (fers to provide isolation of the network from conges-) 244.55 192 P
(tion on the cluster bus.) 72 176 T
1.65 (The RC and RAC coordinate and buf) 72 152 P
1.65 (fer replies to inter) 260.2 152 P
1.65 (-cluster requests. This function) 350.5 152 P
3.32 (ranges from the simple buf) 72 136 P
3.32 (fering of reply data to the accumulation of invalidation) 214.3 136 P
0.36 (acknowledgments and the enforcement of memory consistency) 72 120 P
0.36 (. The RAC is or) 375.83 120 P
0.36 (ganized as) 453.35 120 P
0.51 (a 128) 72 104 P
0.51 (KByte direct-mapped snoopy cache with 16-byte cache lines. One port of the RAC) 99.82 104 P
0.08 (services the in-bound reply network while the other snoops on the bus. The RAC is a spe-) 72 88 P
FMENDPAGE
%%EndPage: "34" 7
%%Page: "35" 7
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(35) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
-0.19 (cialized lock-up-free cache in which numerous outstanding requests from each of the local) 108 712 P
-0.16 (processors can be pending. RAC entries are allocated when a remote request is issued by a) 108 696 P
0.99 (local processor and persist until all inter) 108 680 P
0.99 (-cluster transactions relative to the request have) 305.57 680 P
(completed.) 108 664 T
0.18 (The snoopy cache structure of the RAC has several bene\336ts. First, when a remote reply is) 108 640 P
2.4 (received, the RC releases the processor) 108 624 P
2.4 (\325) 308.28 624 P
2.4 (s arbitration mask and allows it to repeat its) 311.61 624 P
0.55 (access. Snooping by the RAC transfers the remote data to the processor in the same way) 108 608 P
0.34 (that a local processor cache might service a remote access with a cache-to-cache transfer) 108 592 P
0.34 (.) 537 592 P
0.21 (The snoopy structure also allows the RAC to detect when the local processors are access-) 108 576 P
0.46 (ing the same remote location. In this case, the RAC mer) 108 560 P
0.46 (ges the later request and satis\336es) 380.83 560 P
-0.03 (both requests when the \336rst reply is returned. The third, and most important, bene\336t of the) 108 544 P
0.05 (RAC structure is that it supplements the function of the local processor caches. This func-) 108 528 P
0.14 (tion is critical in supporting memory consistency because the processor caches respond to) 108 512 P
1.21 (remote requests without regard to the global state of the line. For example, a processor) 108 496 P
1.05 (cache will relinquish a dirty line while remote invalidations are still pending. The RAC) 108 480 P
1.19 (detects this case and takes ownership of the cache line. The RAC also supplements the) 108 464 P
0.31 (processor caches to improve performance. For example, the RAC supports a shared own-) 108 448 P
0.35 (ing state which allows the local processors to read-share a dirty cache line without losing) 108 432 P
-0.26 (ownership of the block. Adding this shared ownership state converts the processor) 108 416 P
-0.26 (\325) 500.61 416 P
-0.26 (s MESI) 503.95 416 P
0.63 (protocol to a MOESI protocol at the cluster level) 108 400 P
0.63 ([SwS86]. Likewise, the RAC improves) 349.57 400 P
1.36 (performance by accepting data from prefetch requests and adding to the overall cluster) 108 384 P
(cache formed by the processor caches.) 108 368 T
0.28 (The RC also contains the RCPU function that generates bus transactions. The RCPU per-) 108 344 P
0.61 (forms bus cycles for local processors. As outlined in the following sections, these cycles) 108 328 P
0.05 (include translation of CPU I/O accesses into DMA operations and retrying bus cycles that) 108 312 P
(the originator has not waited for completion \050see Section 3.2.5.2 on update writes\051.) 108 296 T
1 F
(3.1.3  Inter) 108 262 T
(connection Network) 163.74 262 T
0 F
1.41 (As stated earlier) 108 240 P
1.41 (, the primary design requirement for the inter) 188.28 240 P
1.41 (-cluster network is that it) 414.43 240 P
-0.17 (provide scalable bandwidth and low latency) 108 224 P
-0.17 (. It must also provide deadlock free routing for) 317.21 224 P
-0.21 (requests and replies. W) 108 208 P
-0.21 (ork by Dally and Seitz) 218.32 208 P
-0.21 ([Dal87] has shown that low dimension k-ary) 327.4 208 P
2.52 (n-cubes along with) 108 192 P
2 F
2.52 (wormhole) 209.84 192 P
0 F
2.52 ( routing meet the goals of scalable bandwidth and low) 257.81 192 P
0.57 (latency) 108 176 P
0.57 (. W) 141.86 176 P
0.57 (ormhole routing breaks packets into smaller words \05016-bit words or) 158.78 176 P
2 F
0.57 (\337its) 491.55 176 P
0 F
0.57 ( in the) 508.88 176 P
-0.2 (prototype network\051, and it allows packets to be forwarded after the \336rst few \337its have been) 108 160 P
0.64 (received. W) 108 144 P
0.64 (ormhole routing reduces the latency of each hop in the network in the proto-) 165.62 144 P
1.21 (type to approximately 50) 108 128 P
1.21 (ns. The network uses unidirectional links which are asynchro-) 232.88 128 P
0.85 (nous and self-timed.) 108 112 P
0.85 (Bandwidth is limited by chip I/O delay and the round-trip delay of) 211.81 112 P
0.9 (the request-acknowledge signals on the cable that connect a given pair of clusters. Each) 108 96 P
1.05 (link has a cycle time of approximately 35) 108 80 P
1.05 (ns and the maximum transfer rate of approxi-) 315.18 80 P
FMENDPAGE
%%EndPage: "35" 8
%%Page: "36" 8
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(36) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
1.94 (mately 60) 72 712 P
1.94 (MByte/sec. Since each cluster can transmit and receive requests and replies) 122.57 712 P
(simultaneously) 72 696 T
(, each cluster has a maximum global throughput of 240) 143.85 696 T
(MByte/sec.) 409.34 696 T
0.07 (Unfortunately) 72 672 P
0.07 (, a single mesh network cannot meet the requirement for deadlock free rout-) 138.5 672 P
0.56 (ing of requests and replies. As discussed in Section 2.8.1, deadlock due to request buf) 72 656 P
0.56 (fer) 490.69 656 P
-0.24 (over\337ow can be avoided only if there are two logical paths for request and reply messages.) 72 640 P
1.18 (In the prototype, messages can back-up in the PCPU\325) 72 624 P
1.18 (s input FIFO into the request net-) 336.98 624 P
0.9 (work. T) 72 608 P
0.9 (o process requests at the front of the FIFO, the DC may need to send additional) 110.04 608 P
0.96 (requests and replies. W) 72 592 P
0.96 (ith a single network, requests and replies may be blocked by the) 186.31 592 P
1.62 (congestion at the input of the PCPU FIFO. W) 72 576 P
1.62 (ith two networks, replies will always be) 303.39 576 P
1.19 (delivered eventually) 72 560 P
1.19 (. Replies do not have the problem of buf) 170 560 P
1.19 (fer over\337ow because RAC) 372.86 560 P
0.79 (entries are always pre-allocated at the time when the original remote request is made on) 72 544 P
2.35 (the MPBUS. Thus with two mesh networks, there is never a problem with deadlock) 72 528 P
0.78 (between requests and replies, or within the reply network itself. There is still a potential) 72 512 P
0.56 (for deadlock due to requests that generate new requests. For example, an incoming write) 72 496 P
1.44 (request may be blocked because it needs to send outgoing invalidation requests. These) 72 480 P
(potential deadlocks in the request mesh are broken by a back-of) 72 464 T
(f mechanism.) 377.54 464 T
0.75 (Conservatively) 72 440 P
0.75 (, a cluster assumes deadlock could occur if its output request FIFO is full) 143.84 440 P
0.46 (and its PCPU input request FIFO is also full. This condition implies there is blockage on) 72 424 P
0.19 (the cluster) 72 408 P
0.19 (\325) 122.26 408 P
0.19 (s outgoing network, and this cluster is also blocking the reception of incoming) 125.6 408 P
1.04 (messages. The potential deadlock is broken by taking requests at the head of the PCPU) 72 392 P
0.9 (FIFO that require request forwarding and rejecting them with negative acknowledgment) 72 376 P
0.72 (replies. This process continues until enough input requests are removed to stop blocking) 72 360 P
0.38 (the input network port or the congestion on the output FIFO is cleared. Rejected requests) 72 344 P
0.28 (are retried by the issuing processor) 72 328 P
0.28 (. The deadlock breaking mode is not actually the same) 240.3 328 P
1.93 (as the back-of) 72 312 P
1.93 (f mechanism proposed in Section 2.8.1 because forward progress is not) 142.92 312 P
0.8 (made by the rejected requests. On the prototype, however) 72 296 P
0.8 (, this is not a problem because) 354.33 296 P
0.26 (the FIFOs are lar) 72 280 P
0.26 (ge \050each can hold at least 300 requests\051, and the number of processors is) 154.18 280 P
0.68 (limited. T) 72 264 P
0.68 (ogether this reduces the need for deadlock breaking and guarantees that retried) 119.16 264 P
(requests will eventually make forward progress.) 72 248 T
1 14 Q
(3.2  Coher) 72 212.67 T
(ence Pr) 133.54 212.67 T
(otocol) 177.96 212.67 T
0 12 Q
1.48 (The memory operations in DASH are broken into the following categories: i\051 the base) 72 190 P
2.96 (memory operations which support normal cached reads and writes; ii\051 non-blocking) 72 174 P
0.46 (prefetch operations; iii\051 update and DMA operations; and iv\051 synchronization operations.) 72 158 P
-0 (The following sections give an overview of these operations, specifying the messages that) 72 142 P
-0.05 (\337ow between clusters to satisfy the request and maintain cache coherence. In the next sec-) 72 126 P
0.59 (tion, the terms and symbols used in these de\336nitions are given. The de\336nitions are given) 72 110 P
-0.21 (for the typical cases, Section) 72 94 P
-0.21 (3.4 discusses exceptions that can occur that are not illustrated) 210.73 94 P
(with the individual operations.) 72 78 T
FMENDPAGE
%%EndPage: "36" 9
%%Page: "37" 9
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(37) 532 42.62 T
108 72 540 720 R
7 X
V
1 12 Q
0 X
(3.2.1  Nomenclatur) 108 712 T
(e) 205.05 712 T
0 F
-0.16 (In describing the DASH protocol, three types of clusters and two types of memory are dis-) 108 690 P
0.22 (tinguished. The) 108 674 P
2 F
0.22 (local) 186.05 674 P
0 F
0.22 (or) 213.26 674 P
2 F
0.22 ( r) 223.25 674 P
0.22 (equesting cluster) 230.68 674 P
0 F
0.22 ( is the cluster that includes the CPU that issued) 312.52 674 P
1.25 (the memory request. The) 108 658 P
2 F
1.25 (home cluster) 235.92 658 P
0 F
1.25 ( is the cluster that contains the physical memory) 298.79 658 P
0.67 (associated with a given memory address, and a) 108 642 P
2 F
0.67 (r) 341.53 642 P
0.67 (emote cluster) 345.76 642 P
0 F
0.67 ( is any other cluster) 410.71 642 P
0.67 (. Simi-) 506.67 642 P
0.46 (larly) 108 626 P
0.46 (,) 129.2 626 P
2 F
0.46 (local memory) 135.66 626 P
0 F
0.46 ( is the memory whose home is in the local cluster while) 201.73 626 P
2 F
0.46 (r) 477.05 626 P
0.46 (emote mem-) 481.27 626 P
(ory) 108 610 T
0 F
( is memory whose home is in any other cluster) 123.99 610 T
(.) 346.85 610 T
1.46 (The base cache coherence protocol used in DASH is based on invalidations. As repre-) 108 586 P
(sented by the directory) 108 570 T
(, a memory block may be in one of three states:) 216.8 570 T
(Uncached:) 126 546 T
(Not cached by any remote cluster) 235.01 546 T
(.) 395.22 546 T
(Shared-Remote:) 126 524 T
-0.09 (Held in an unmodi\336ed state in the cache of one of more remote) 235.01 524 P
(clusters.) 233.57 510 T
(Dirty-Remote:) 126 488 T
(Held in a modi\336ed state in a single remote cluster) 235.01 488 T
(.) 472.52 488 T
1.38 (The directory stores only the caching state of remote clusters. The caching state of the) 108 466 P
0.4 (home cluster is not stored because the processor caches in the home are kept coherent by) 108 450 P
0.16 (snooping on the bus. While storing the caching state of the processors in the home is pos-) 108 434 P
0.43 (sible, it would complicate accessing the directory memory due to the nature of writeback) 108 418 P
(operations on the Silicon Graphics\325 MPBUS \050See Section 4.1.1\051.) 108 402 T
-0.08 (The coherence protocol maintains the notion of an) 108 378 P
2 F
-0.08 (owning cluster) 351.86 378 P
0 F
-0.08 ( for each memory block.) 422.74 378 P
0.35 (The owning cluster is the home cluster unless the block is held dirty-remote. In this case,) 108 362 P
1.78 (the dirty cluster is the owner) 108 346 P
1.78 (. Except read misses satis\336ed by cache-to-cache transfers) 253.13 346 P
0.44 (within a cluster) 108 330 P
0.44 (, only the owning cluster can satisfy a memory reference. As discussed in) 182.35 330 P
0.3 (Section 2.8.2, the owning cluster serializes accesses to determine their global order) 108 314 P
0.3 (. Even) 509.05 314 P
0.55 (though the owning cluster is not always the home, the directory entry for a block always) 108 298 P
0.31 (resides in the home cluster) 108 282 P
0.31 (. When a dirty cluster changes ownership of a block, it sends a) 236.49 282 P
(message to the home to update the directory) 108 266 T
(.) 318.74 266 T
0.27 (Roughly corresponding to the directory states, cache lines in the processors\325 second-level) 108 242 P
(caches can be in one of four states:) 108 226 T
(Invalid:) 126 202 T
(Not valid in the cache.) 235.01 202 T
(Shared:) 126 180 T
(Unmodi\336ed in the cache, valid for reads only) 235.01 180 T
(. May be cached) 451.4 180 T
(by other processors.) 233.57 166 T
(Dirty:) 126 144 T
(Modi\336ed in the cache, valid for reads and writes. Block is held) 235.01 144 T
-0.03 (only by this cache. Must be written back to memory if replaced.) 233.57 130 P
(Private-Unmodi\336ed:) 126 108 T
(Unmodi\336ed in the cache, valid for reads and writes. Block is) 235.01 108 T
(held only in this cache.) 233.57 94 T
FMENDPAGE
%%EndPage: "37" 10
%%Page: "38" 10
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(38) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
-0.23 (The purpose of the \336rst three states listed above are relatively straightforward. The proces-) 72 712 P
-0.1 (sors respond to the bus cycles by the other CPUs, the PCPU and RCPU as speci\336ed by the) 72 696 P
1.58 (MESI protocol. The private-unmodi\336ed state is somewhat less clear) 72 680 P
1.58 (. This state is only) 410.07 680 P
0.02 (supported for processors in the home. It is entered on a read miss when no local or remote) 72 664 P
0.75 (processor holds a copy of the block, and it allows the processor to transition to the dirty) 72 648 P
0.02 (state on a later write without doing another bus cycle. If another processor reads the block) 72 632 P
0.64 (before such a write, the cache transitions to the shared state. This transition is detectable) 72 616 P
-0.19 (by processors in the home since they see all accesses to local memory blocks that were not) 72 600 P
0.76 (cached at the time they entered the private-unmodi\336ed state. Because processors outside) 72 584 P
(the home are not guaranteed to see all such accesses, they cannot support this cache state.) 72 568 T
1.59 (The coherence protocol is executed in a distributed manner by a set of state machines) 72 544 P
0.43 (associated with the processor caches, directory controllers, reply controllers, and PCPUs.) 72 528 P
-0.19 (The primary state machines that carry out the inter) 72 512 P
-0.19 (-cluster coherence protocol reside in the) 312.76 512 P
0.38 (directory and reply controllers. These state machines are based on a set of programmable) 72 496 P
0.11 (read-only memories \050PROMs\051. The actual de\336nition of the protocol is speci\336ed by ASCII) 72 480 P
2.15 (tables which are automatically translated to a form suitable for PROM programming.) 72 464 P
1.5 (While precise and convenient for the hardware implementation, the protocol is hard to) 72 448 P
0.52 (extract from these tables.) 72 432 P
0 10 Q
0.44 (1) 194.13 436.8 P
0 12 Q
0.52 ( As an alternative, the protocol is de\336ned in the following sec-) 199.13 432 P
0.24 (tions through a set of graphs that illustrate the \337ow of inter) 72 416 P
0.24 (-cluster messages for the com-) 356.51 416 P
1 (mon cases of each operation. The actual hardware state-machines can be determined by) 72 400 P
0.29 (the decode of each step in the normal and exception cases for each request, and their cor-) 72 384 P
(responding network messages, bus transactions, and state transitions.) 72 368 T
0.23 (The message \337ow graphs are divided into cases by three attributes. The \336rst distinction is) 72 344 P
-0.08 (whether the request is made by a processor in the home or a remote cluster) 72 328 P
-0.08 (. Requests orig-) 428.55 328 P
0.84 (inating in the home are dif) 72 312 P
0.84 (ferent because the directory information is available on every) 202.88 312 P
-0.19 (local bus access. Thus, extra network messages and bus cycles can be eliminated. The sec-) 72 296 P
1.47 (ond distinction is made on the basis of the directory state when the access reaches the) 72 280 P
-0 (home cluster) 72 264 P
-0 (. The directory state determines whether the home or some dirty-remote clus-) 132.96 264 P
-0.01 (ter is the current owner of the requested block. Finally) 72 248 P
-0.01 (, the cache state of the other proces-) 331.58 248 P
0.75 (sors and RAC in the same cluster as the issuing processor separates the \337ow of requests) 72 232 P
(for remote locations.) 72 216 T
72 108 504 128.09 C
72 115.99 203.98 115.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1.  There are \336ve major tables that de\336ne the actions of the DC and RC. The two DC tables decode approxi-) 72 101.33 T
(mately 500 valid bus operation / current state pairs. The RC tables decode roughly the same number of) 81 90.33 T
(valid bus input conditions, and approximately 150 reply message / RAC state pairs.) 81 79.33 T
FMENDPAGE
%%EndPage: "38" 11
%%Page: "39" 11
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(39) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
(The \337ow diagrams in the following sections use the notation given below:) 108 712 T
(Local Cluster:) 184.46 688 T
(Cluster that contains the processor which initiated) 288 688 T
(the memory access.) 288 674 T
(Home Cluster:) 184.46 652 T
-0.21 (Cluster that contains the physical memory and direc-) 288 652 P
(tory corresponding to the requested address.) 288 638 T
(Dirty Cluster:) 184.46 616 T
(A remote cluster that currently caches the requested) 288 616 T
(memory block in a modi\336ed state.) 288 602 T
(Shared Cluster:) 184.46 580 T
(A remote cluster that currently caches a shared,) 288 580 T
(read-only copy of the requested memory block.) 288 566 T
(Queued Cluster:) 184.46 544 T
(A cluster that currently caches a locked value of the) 288 544 T
-0.32 (requested lock and is assumed to be spinning on that) 288 530 P
(lock.) 288 516 T
(Request Message:) 184.46 494 T
-0.46 (An inter) 288 494 P
-0.46 (-cluster request message which traverses the) 326.94 494 P
(request mesh and is issued by the PCPU on the des-) 288 480 T
(tination cluster) 288 466 T
(\325) 360.07 466 T
(s bus.) 363.4 466 T
(Normal Reply:) 184.46 444 T
(An inter) 288 444 T
(-cluster reply message which traverses the) 327.4 444 T
(reply mesh and is received by the reply controller) 288 430 T
(.) 525.16 430 T
-0.5 (The reply will release a local CPU to retry the access) 288 416 P
(and fetch the reply data from the RAC.) 288 402 T
(Ack Reply:) 184.46 380 T
(An inter) 288 380 T
(-cluster acknowledge reply message which) 327.4 380 T
-0.25 (traverses the reply mesh and is received by the reply) 288 366 P
-0.52 (controller) 288 352 P
-0.52 (. These replies are handled within the reply) 333.97 352 P
(controller by updating the RAC. They do not gener-) 288 338 T
(ate a bus cycle on the destination cluster) 288 324 T
(.) 480.87 324 T
-0.04 (In the text that describes the \336gures, references to a particular case are called out in paren-) 108 302 P
-0.1 (thesis with the \336gure number and case letter) 108 286 P
-0.1 (. For example, \0503-4e\051 refers to case e in Figure) 318.13 286 P
(3-4.) 108 270 T
1 F
(3.2.2  Basic Memory Operations) 108 236 T
0 F
1.43 (The default processor load and store instructions maintain an invalidation-based coher-) 108 214 P
1.29 (ence protocol. Most memory operations are satis\336ed by the processor) 108 198 P
1.29 (\325) 453.17 198 P
1.29 (s \336rst or second-) 456.51 198 P
0.02 (level caches. A load of a location not already in the caches generates a read request on the) 108 182 P
0.39 (bus to fetch the corresponding 16-byte memory block. Store operations write through the) 108 166 P
0.47 (\336rst-level cache and are held in the four entry write-buf) 108 150 P
0.47 (fer) 378.12 150 P
0.47 (. W) 390.77 150 P
0.47 (rites can be satis\336ed by the) 408.08 150 P
0.53 (second-level cache if it has ownership of the memory block. Otherwise, a read-exclusive) 108 134 P
0.35 (request is issued on the bus to retrieve the block and invalidate all other cached copies of) 108 118 P
0.06 (the block. The processor does not wait for completion of stores; it only stalls if there is no) 108 102 P
0.4 (space in its write-buf) 108 86 P
0.4 (fer) 209.89 86 P
0.4 (. Memory reads that are not satis\336ed by the \336rst-level cache must) 222.55 86 P
108 670 184.46 703.98 C
108 670 184.46 703.98 R
7 X
0 K
V
90 450 13.5 13.43 146.25 686.48 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 146.25 686.48 A
1 18 Q
(L) 140.25 680.45 T
0 0 612 792 C
108 638 184.46 671.98 C
108 638 184.46 671.98 R
7 X
0 K
V
90 450 13.5 13.43 146.25 653.48 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 146.25 653.48 A
1 18 Q
(H) 139.25 647.46 T
0 0 612 792 C
108 602 184.46 635.98 C
108 602 184.46 635.98 R
7 X
0 K
V
90 450 13.5 13.43 146.25 617.48 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 146.25 617.48 A
1 18 Q
(D) 139.75 611.46 T
0 0 612 792 C
108 566 184.46 599.98 C
108 566 184.46 599.98 R
7 X
0 K
V
90 450 13.5 13.43 146.25 580.48 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 146.25 580.48 A
1 18 Q
(S) 141.25 574.46 T
0 0 612 792 C
108 530 184.46 563.98 C
108 530 184.46 563.98 R
7 X
0 K
V
90 450 13.5 13.43 146.25 545.48 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 146.25 545.48 A
1 18 Q
(Q) 139.25 539.46 T
0 0 612 792 C
108 480 184.46 513.98 C
108 480 184.46 513.98 R
7 X
0 K
V
163.96 498.31 175.5 495 163.96 491.69 163.96 495 4 Y
0 X
V
121.5 495 163.96 495 2 L
7 X
V
0.5 H
2 Z
0 X
N
7 X
90 450 9 9 143.85 494.29 G
1 12 Q
0 X
(i) 142.19 490.27 T
0 0 612 792 C
108 430 184.46 463.98 C
108 430 184.46 463.98 R
7 X
0 K
V
163.96 448.31 175.5 445 163.96 441.69 163.96 445 4 Y
3 X
V
121.5 445 163.96 445 2 L
7 X
V
0.5 H
2 Z
3 X
N
7 X
90 450 9 9 143.85 444.29 G
1 12 Q
0 X
(i) 142.19 440.27 T
0 0 612 792 C
108 366 184.46 399.98 C
108 366 184.46 399.98 R
7 X
0 K
V
163.96 384.31 175.5 381 163.96 377.69 163.96 381 4 Y
10 X
V
121.5 381 163.96 381 2 L
7 X
V
1 H
2 Z
10 X
N
7 X
90 450 9 9 143.85 380.29 G
1 12 Q
0 X
(i) 142.19 376.27 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "39" 12
%%Page: "40" 12
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(40) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
1.91 (wait for the write-buf) 72 712 P
1.91 (fer to empty before accessing the second-level cache. W) 180.44 712 P
1.91 (riteback) 465.37 712 P
(requests are generated by cache \336lls that replace dirty blocks in the second-level cache.) 72 696 T
(3.2.2.1  Read Requests) 72 668 T
0.25 (Normal processor load instructions that are not satis\336ed by the \336rst or second-level cache) 72 646 P
0.91 (generate read requests on the bus. The possible \337ows of a read request are illustrated in) 72 630 P
0.31 (Figure 3-4. This \336gure demonstrates many of the protocol features mentioned previously) 72 614 P
0.31 (.) 501 614 P
1.07 (For example, the protocol supports cache-to-cache sharing between the local processors) 72 598 P
-0.29 (and RAC to reduce the latency of remote accesses \0503-4c\051. If the source cache holds the line) 72 582 P
1.49 (dirty) 72 566 P
1.49 (, then the RAC will keep ownership of the block within the cluster by storing the) 93.88 566 P
-0.14 (block in the RAC in a shared-dirty state. Another protocol feature illustrated in \0503-4bde\051 is) 72 550 P
0.92 (that read requests not satis\336ed by a local cache-to-cache transfer are always satis\336ed by) 72 534 P
1.46 (the owning cluster \050i.e. the home cluster unless the block is dirty-remote\051. Finally) 72 518 P
1.46 (, if a) 479.44 518 P
0.27 (request is forwarded to a dirty-remote cluster) 72 502 P
0.27 (, the dirty cluster replies directly to the local) 289.64 502 P
-0.14 (cluster \0503-4e\051. Forwarding removes the latency of one network and cluster hop over a sim-) 72 486 P
0.08 (pler scheme that would \336rst writeback the block to memory) 72 470 P
0.08 (. Forwarding also removes the) 358.1 470 P
3.59 (need for the home cluster to retain any state about requests that it cannot satisfy) 72 454 P
(immediately) 72 438 T
([ALK+91].) 134.95 438 T
0.25 (There is one exception that occurs only for read requests. It occurs when the cluster has a) 72 414 P
1.05 (remote read outstanding and an invalidation request is received for the requested block.) 72 398 P
0.05 (The invalidation may be due to a read-exclusive request that logically precedes or follows) 72 382 P
0.67 (the outstanding read. In the former case, the read-exclusive is invalidating an older copy) 72 366 P
0.02 (of the block, and it is safe to accept the read reply) 72 350 P
0.02 (. In the latter case, the invalidation is for) 309.95 350 P
0.41 (a shared copy of the block that is currently in transit on the reply network. Reordering of) 72 334 P
0.41 (events between the home and local cluster is possible because of the independent request) 72 318 P
0.66 (and reply meshes. Since these two cases are ambiguous from the local cluster) 72 302 P
0.66 (\325) 451.72 302 P
0.66 (s perspec-) 455.06 302 P
-0.04 (tive, the conservative action is to treat whatever reply is received for the pending read as a) 72 286 P
(negative acknowledge \050NAK\051. As a result, the processor must retry the read.) 72 270 T
(3.2.2.2  Read-Exclusive Requests) 72 242 T
0.15 (Processor store operations write-through the processor) 72 220 P
0.15 (\325) 334.64 220 P
0.15 (s \336rst-level cache and are buf) 337.98 220 P
0.15 (fered) 479.36 220 P
1.8 (in the write-buf) 72 204 P
1.8 (fer) 149.99 204 P
1.8 (. The write-buf) 162.64 204 P
1.8 (fer then retires writes, in order) 238.3 204 P
1.8 (, into the second-level) 392.68 204 P
0.27 (cache. If a block is not dirty in the second-level cache, then the second-level cache issues) 72 188 P
0.85 (a read-exclusive request on the local bus. A read-exclusive will retrieve the cache block) 72 172 P
0.28 (and eliminate all other cached copies of the block. The possible \337ows of a read-exclusive) 72 156 P
0.54 (request are illustrated in Figure 3-5. The \337ows are similar to read requests if the block is) 72 140 P
(uncached or dirty-remote, but dif) 72 124 T
(fer when the block is in the shared-remote state.) 230.66 124 T
0.17 (Read-exclusive requests stall the write-buf) 72 100 P
0.17 (fer until the request is satis\336ed by the local bus) 276.97 100 P
1.08 (or an exclusive reply is received from a remote cluster) 72 84 P
1.08 (. Receiving exclusive ownership,) 341.86 84 P
FMENDPAGE
%%EndPage: "40" 13
%%Page: "41" 13
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(41) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
0.47 (however) 108 242 P
0.47 (, does not imply that the operation has completed system-wide \0503-5bf\051. Invalida-) 148.81 242 P
-0.17 (tions of the other cached copies may still be in progress if the block was in the shared state) 108 226 P
-0.1 (when it reached the home. In these cases, the exclusive reply contains a count of the pend-) 108 210 P
2.73 (ing invalidations. The RAC entry will persist in the) 108 194 P
2 F
2.73 (busy) 381.81 194 P
0 F
2.73 ( state until all invalidation) 403.79 194 P
0.33 (acknowledges have been received. While any RAC entry associated with the processor is) 108 178 P
-0 (in the busy state, the originating processor is not allowed to issue a releasing synchroniza-) 108 162 P
0.01 (tion operation under release consistency) 108 146 P
0.01 (. Other local processors can cache the block while) 299.78 146 P
0.48 (the busy state persists, but they also become responsible for the pending invalidations on) 108 130 P
0.04 (the block. The result is that no processor will release a lock while data they have accessed) 108 114 P
0.32 (is not consistent system-wide. While this sharing of invalidation responsibility during the) 108 98 P
0.28 (busy state could be extended to remote processors, this would add considerable complex-) 108 82 P
108 72 540 720 C
108 250 540 720 C
108 271 536 286 R
7 X
0 K
V
108 278.01 536 286 C
108 283.98 576 283.98 2 L
0.5 H
0 Z
0 X
0 K
N
108 250 540 720 C
1 10 Q
0 X
0 K
(FIGURE) 111.6 271.34 T
(3-4.  Read r) 152.96 271.34 T
(equest \337ows.) 202.74 271.34 T
108 295 342 709 R
7 X
V
332 701.24 108 701.24 2 L
0 X
V
0.49 H
0 Z
N
0 F
(a\051 Home Request to Uncached or Shared-Remote Block) 108 702.33 T
(\245) 117 690.33 T
(CPU reads from main memory; Directory unchanged.) 126 690.33 T
272.62 673.24 108 673.24 2 L
V
N
(b\051 Home Request to Dirty-Remote Block) 108 674.33 T
(\245) 117 662.33 T
(CPU issues read and is forced to retry) 126 662.33 T
(.) 276.63 662.33 T
(\245) 117 650.33 T
(Allocate RAC entry and send Read Req) 126 650.33 T
(\0501\051 to) 286.16 650.33 T
(Dirty cluster) 126 640.33 T
(.) 175.69 640.33 T
(\245) 117 628.33 T
(Dirty cache supplies data and goes to shared state;) 126 628.33 T
(Dirty cluster sends Read Reply) 126 618.33 T
(\0502\051 to Home.) 251.19 618.33 T
(\245) 117 606.33 T
(CPU repeats read; RAC supplies data which is also) 126 606.33 T
(written back to main memory;) 126 596.33 T
(Directory entry to Shared-Remote.) 126 586.33 T
286.21 551.24 108 551.24 2 L
V
N
(c\051 Remote Request Satis\336ed by Local Cache) 108 552.33 T
(\245) 117 540.33 T
(CPU issues read and dirty or shared cache supplies) 126 540.33 T
(data. If dirty) 126 530.33 T
(, the RAC takes sharing ownership if) 175.03 530.33 T
(RAC entry is free, otherwise, a Sharing W) 126 520.33 T
(riteback) 295.2 520.33 T
(Req is sent to Home.) 126 510.33 T
333.68 493.24 108 493.24 2 L
V
N
(d\051 Remote Request to Uncached / Shared-Remote Block) 108 494.33 T
(\245) 117 482.33 T
(CPU issues read and is forced to retry) 126 482.33 T
(.) 276.63 482.33 T
(\245) 117 470.33 T
(Allocate RAC entry and send Read Req) 126 470.33 T
(\0501\051 to) 286.16 470.33 T
(Home cluster) 126 460.33 T
(.) 179.02 460.33 T
(\245) 117 448.33 T
(Main memory supplies data for Read Reply) 126 448.33 T
(\0502\051;) 301.71 448.33 T
(Directory entry to Shared-Remote.) 126 438.33 T
(\245) 117 426.33 T
(CPU repeats read and RAC supplies data.) 126 426.33 T
278.73 409.24 108 409.24 2 L
V
N
(e\051 Remote Request to Dirty-Remote Block) 108 410.33 T
(\245) 117 398.33 T
(CPU issues read and is forced to retry) 126 398.33 T
(.) 276.63 398.33 T
(\245) 117 386.33 T
(Allocate RAC entry and send Read Req) 126 386.33 T
(\0501\051 to) 286.16 386.33 T
(Home cluster) 126 376.33 T
(.) 179.02 376.33 T
(\245) 117 364.33 T
(Home forwards request to Dirty Cluster) 126 364.33 T
(\0502\051.) 285.88 364.33 T
(\245) 117 352.33 T
(Dirty Cache supplies data and goes to shared state.) 126 352.33 T
(Read Reply) 126 342.33 T
(\0503a\051 sent to Local cluster and Sharing) 173.74 342.33 T
(W) 126 332.33 T
(riteback Req) 135.04 332.33 T
(\0503b\051 sent to Home cluster) 186.66 332.33 T
(.) 287.7 332.33 T
(\245) 117 320.33 T
(CPU repeats read, RAC supplies data.) 126 320.33 T
(\245) 117 308.33 T
(PCPU issues Sharing W) 126 308.33 T
(riteback in Home;) 222.5 308.33 T
(Directory entry to Shared-Remote.) 126 298.33 T
7 X
90 450 13.5 13.43 382.5 693.57 G
0.5 H
0 X
90 450 13.5 13.43 382.5 693.57 A
438.21 614.86 448.98 620.15 442.65 609.95 440.43 612.4 4 Y
V
386 620.14 M
 401.91 602.14 417.98 603.37 435.74 609.82 D
 437.45 610.44 439.01 611.34 440.47 612.39 D
N
396.79 652.52 385.99 647.3 392.39 657.45 394.59 654.98 4 Y
3 X
V
449 647.14 M
 433.09 665.14 417.02 663.91 399.26 657.47 D
 397.58 656.86 396.05 655.99 394.61 654.98 D
1 H
N
1 18 Q
0 X
(H) 375.5 687.54 T
7 X
90 450 13.5 13.43 381.5 633.57 G
0.5 H
0 X
90 450 13.5 13.43 381.5 633.57 A
(H) 374.5 627.54 T
7 X
90 450 13.5 13.43 453.5 633.57 G
0 X
90 450 13.5 13.43 453.5 633.57 A
(D) 447 627.54 T
7 X
90 450 9 9 415.86 605.71 G
1 12 Q
0 X
(1) 412.86 601.69 T
7 X
90 450 9 6.5 415 659.64 G
0 X
(2) 412 655.97 T
7 X
90 450 13.5 13.43 382.5 533.43 G
0 X
90 450 13.5 13.43 382.5 533.43 A
1 18 Q
(L) 376.5 527.4 T
439.21 448.15 449.98 453.44 443.65 443.25 441.43 445.7 4 Y
V
387 453.43 M
 402.91 435.43 418.98 436.66 436.74 443.1 D
 438.45 443.72 440.01 444.62 441.47 445.68 D
N
397.79 485.81 386.99 480.59 393.39 490.74 395.59 488.27 4 Y
3 X
V
450 480.43 M
 434.09 498.43 418.02 497.2 400.26 490.75 D
 398.58 490.14 397.05 489.28 395.61 488.27 D
1 H
N
7 X
90 450 13.5 13.43 382.5 466.86 G
0.5 H
0 X
90 450 13.5 13.43 382.5 466.86 A
(L) 376.5 460.83 T
7 X
90 450 13.5 13.43 454.5 466.86 G
0 X
90 450 13.5 13.43 454.5 466.86 A
(H) 447.5 460.83 T
7 X
90 450 9 9 416.86 439 G
1 12 Q
0 X
(1) 413.86 434.98 T
7 X
90 450 9 6.5 416 492.93 G
0 X
(2) 413 489.26 T
451.13 333.73 462.98 335.59 453.91 327.73 452.52 330.73 4 Y
V
386.17 332.41 M
 409.67 319.73 423 322.23 436.33 326.4 D
 439.92 327.53 446.6 328.92 452.54 330.73 D
N
391.63 363.03 383.83 353.91 385.61 365.78 388.62 364.4 4 Y
3 X
V
413.17 395.41 M
 402.41 388.24 395.04 377.52 388.61 364.39 D
1 H
N
7 X
90 450 13.5 13.43 381.67 342.27 G
0.5 H
0 X
90 450 13.5 13.43 381.67 342.27 A
1 18 Q
(L) 375.66 336.24 T
7 X
90 450 13.5 13.43 472.5 342.27 G
0 X
90 450 13.5 13.43 472.5 342.27 A
(H) 465.5 336.24 T
7 X
90 450 9 9 423.52 322.74 G
1 12 Q
0 X
(1) 420.52 318.73 T
7 X
90 450 9 6.5 404.17 379.91 G
0 X
(3a) 398.17 376.24 T
7 X
90 450 13.5 13.43 426.67 399.98 G
0 X
90 450 13.5 13.43 426.67 399.98 A
1 18 Q
(D) 420.17 393.95 T
450.48 394.78 440.49 401.41 452.48 401.08 451.48 397.93 4 Y
V
476.33 354.73 M
 477.67 369.07 465.97 389.75 451.51 397.92 D
1 H
N
450.21 353.82 459.66 346.41 447.73 347.69 448.97 350.76 4 Y
V
428.83 387.23 M
 428.04 372.94 436.56 358.2 448.98 350.71 D
N
7 X
90 450 9 6.5 470.5 379.41 G
1 12 Q
0 X
(2) 467.5 375.74 T
7 X
90 450 9 6.5 431.83 370.58 G
0 X
(3b) 425.5 366.91 T
106 718 540 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
108 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "41" 14
%%Page: "42" 14
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(42) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 56 504 720 R
V
72 56 504 720 C
72.97 62 505.97 81 R
7 X
0 K
V
72.97 73.01 504 81 C
72.97 78.98 540.97 78.98 2 L
0.5 H
0 Z
0 X
0 K
N
72 56 504 720 C
1 10 Q
0 X
0 K
(FIGURE) 76.57 66.34 T
(3-5.  Read-exclusive r) 117.93 66.34 T
(equest \337ows.) 209.35 66.34 T
373.8 322.49 M
 357.97 314.99 339.8 303.58 332.14 285.66 D
1 H
2 Z
9 X
N
338.55 291.16 330.8 282 332.51 293.88 335.53 292.52 4 Y
V
354.64 319.99 M
 345.54 310.25 340.8 303.5 335.53 292.51 D
0 Z
N
380.47 317.49 M
 360.47 311.66 340.3 304.75 332.64 286.82 D
2 Z
N
397.6 312.69 394.12 324.18 403.16 316.28 400.38 314.49 4 Y
0 X
V
412.97 284.99 M
 404.42 298.14 405.83 303.92 400.34 314.46 D
0 Z
N
7 X
90 450 13.5 13.43 382.64 328.07 G
0.5 H
0 X
90 450 13.5 13.43 382.64 328.07 A
1 18 Q
(S) 377.63 322.04 T
7 X
90 450 13.5 13.43 373.64 328.07 G
0 X
90 450 13.5 13.43 373.64 328.07 A
(S) 368.63 322.04 T
338.48 627.17 328.29 620.88 333.6 631.62 336.04 629.4 4 Y
11 X
V
397.3 630.93 M
 381.39 648.93 369.4 650.66 351.64 644.21 D
 348.28 643 341.6 635.64 336.07 629.39 D
1 H
N
396.64 620.88 M
 387.47 629.21 378.3 652.55 353.3 642.55 D
 348 640.41 334.14 630.05 327.97 621.21 D
2 Z
N
398.3 608.38 M
 379.97 629.21 377.47 641.71 358.3 640.88 D
 352.59 640.63 333.8 629.55 327.64 620.71 D
N
7 X
90 450 13.5 13.43 408.14 606.79 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 408.14 606.79 A
(S) 403.13 600.76 T
72.97 89.5 306.97 701.5 R
7 X
V
255.89 693.74 72.97 693.74 2 L
0 X
V
0.49 H
N
0 10 Q
(a\051 Home Request to Uncached-Remote Block) 72.97 694.83 T
(\245) 81.97 682.83 T
(CPU issues read-ex and main memory supplies data;) 90.97 682.83 T
(Directory unchanged.) 90.97 672.83 T
244.24 655.74 72.97 655.74 2 L
V
N
(b\051 Home Request to Shared-Remote Block) 72.97 656.83 T
(\245) 81.97 644.83 T
(CPU issues read-ex and main memory supplies data;) 90.97 644.83 T
(Directory entry to Uncached; Allocate RAC entry;) 90.97 634.83 T
(Send Invalidation Req\325) 90.97 624.83 T
(s) 183.14 624.83 T
(\0501\051 to Shared clusters.) 188.68 624.83 T
(\245) 81.97 612.83 T
(PCPUs issue invalidations on Shared clusters;) 90.97 612.83 T
(Reply with Invalidation Ack Reply) 90.97 602.83 T
(\0502\051.) 232.27 602.83 T
(\245) 81.97 590.83 T
(Deallocate RAC entry after all Ack\325) 90.97 590.83 T
(s received.) 235.02 590.83 T
237.03 573.74 72.97 573.74 2 L
V
N
(c\051 Home Request to Dirty-Remote Block) 72.97 574.83 T
(\245) 81.97 562.83 T
(CPU issues read-ex and is forced to retry;) 90.97 562.83 T
(Allocate RAC entry and send Read-Ex Req) 90.97 552.83 T
(\0501\051 to) 265.56 552.83 T
(Dirty cluster) 90.97 542.83 T
(.) 140.66 542.83 T
(\245) 81.97 530.83 T
(Dirty cache supplies data and goes to invalid state;) 90.97 530.83 T
(Dirty cluster sends Read-Ex Reply) 90.97 520.83 T
(\0502\051 to Home.) 230.59 520.83 T
(\245) 81.97 508.83 T
(CPU repeats read-ex and RAC supplies data;) 90.97 508.83 T
(Directory entry to Uncached.) 90.97 498.83 T
251.74 463.74 72.97 463.74 2 L
V
N
(d\051 Remote Request Satis\336ed by Local Cache) 72.97 464.83 T
(\245) 81.97 452.83 T
(CPU issues read-ex and local dirty cache supplies) 90.97 452.83 T
(data and goes to invalid state.) 90.97 442.83 T
262.55 425.74 72.97 425.74 2 L
V
N
(e\051 Remote Request to Uncached-Remote Block) 72.97 426.83 T
(\245) 81.97 414.83 T
(CPU issues read-ex and is forced to retry;) 90.97 414.83 T
(Allocate RAC entry and send Read-Ex Req to) 90.97 404.83 T
(Home) 90.97 394.83 T
(\0501\051.) 116.22 394.83 T
(\245) 81.97 382.83 T
(Main memory supplies data for Read-Ex Reply) 90.97 382.83 T
(\0502\051;) 281.94 382.83 T
(Directory entry to Dirty-Remote.) 90.97 372.83 T
(\245) 81.97 360.83 T
(CPU repeats read-ex and RAC supplies data.) 90.97 360.83 T
249.24 343.74 72.97 343.74 2 L
V
N
(f\051 Remote Request to Shared-Remote Block) 72.97 344.83 T
(\245) 81.97 332.83 T
(CPU issues read-ex and is forced to retry;) 90.97 332.83 T
(Allocate RAC entry; Send Read-Ex Req to Home) 90.97 322.83 T
(\0501\051.) 290.28 322.83 T
(\245) 81.97 310.83 T
(Main memory supplies data for Read-Ex Reply) 90.97 310.83 T
(\0502a\051;) 281.11 310.83 T
(Invalidation Req\325) 90.97 300.83 T
(s sent to shared clusters) 160.65 300.83 T
(\0502b\051;) 255.86 300.83 T
(Directory entry to Dirty-Remote.) 90.97 290.83 T
(\245) 81.97 278.83 T
(CPU repeats read-ex and RAC supplies data.) 90.97 278.83 T
(\245) 81.97 266.83 T
(PCPUs issue invalidations on Shared clusters;) 90.97 266.83 T
(Reply with Invalidation Ack Reply \0503\051.) 90.97 256.83 T
(\245) 81.97 244.83 T
(Deallocate RAC entry after all Ack\325) 90.97 244.83 T
(s received.) 235.02 244.83 T
244.25 227.74 72.97 227.74 2 L
V
N
(g\051 Remote Request to Dirty-Remote Block) 72.97 228.83 T
(\245) 81.97 216.83 T
(CPU issues read-exclusive and is forced to retry;) 90.97 216.83 T
(Allocate RAC entry; Send Read-Ex Req to Home) 90.97 206.83 T
(\0501\051.) 290.28 206.83 T
(\245) 81.97 194.83 T
(Home forwards Read-Ex Req to Dirty cluster) 90.97 194.83 T
(\0502\051.) 273.33 194.83 T
(\245) 81.97 182.83 T
(Dirty cache supplies data and goes to invalid state;) 90.97 182.83 T
(Send Read-Ex Reply to Local cluster) 90.97 172.83 T
(\0503a\051 and) 242.8 172.83 T
(Dirty T) 90.97 162.83 T
(ransfer Req to Home) 120.32 162.83 T
(\0503b\051.) 205.52 162.83 T
(\245) 81.97 150.83 T
(CPU repeats read-ex and RAC supplies data.) 90.97 150.83 T
(\245) 81.97 138.83 T
-0.16 (PCPU in Home issues Dirty T) 90.97 138.83 P
-0.16 (ransfer; Directory entry) 210.59 138.83 P
(to Dirty-Remote; Sends Ack to Local) 90.97 128.83 T
(\0504\051.) 243.92 128.83 T
(\245) 81.97 116.83 T
(RC deallocates RAC entry upon receiving Ack.) 90.97 116.83 T
7 X
90 450 13.5 13.43 327.14 679.07 G
0.5 H
0 X
90 450 13.5 13.43 327.14 679.07 A
386.18 516.22 396.95 521.51 390.62 511.32 388.4 513.77 4 Y
V
333.97 521.5 M
 349.88 503.5 365.95 504.73 383.71 511.18 D
 385.42 511.8 386.98 512.7 388.43 513.75 D
N
344.76 553.88 333.95 548.66 340.35 558.81 342.55 556.35 4 Y
3 X
V
396.97 548.5 M
 381.06 566.5 364.99 565.27 347.23 558.82 D
 345.55 558.21 344.02 557.35 342.58 556.34 D
1 H
N
1 18 Q
0 X
(H) 320.13 673.04 T
7 X
90 450 13.5 13.43 329.47 534.93 G
0.5 H
0 X
90 450 13.5 13.43 329.47 534.93 A
(H) 322.47 528.9 T
7 X
90 450 13.5 13.43 401.47 534.93 G
0 X
90 450 13.5 13.43 401.47 534.93 A
(D) 394.97 528.9 T
7 X
90 450 9 9 363.83 507.07 G
1 12 Q
0 X
(1) 360.83 503.05 T
7 X
90 450 9 6.5 362.97 548.43 G
0 X
(2) 359.97 544.76 T
7 X
90 450 13.5 13.43 329.47 454.07 G
0 X
90 450 13.5 13.43 329.47 454.07 A
1 18 Q
(L) 323.46 448.04 T
386.18 371.23 396.95 376.51 390.62 366.33 388.4 368.78 4 Y
V
333.97 376.5 M
 349.88 358.5 365.95 359.73 383.71 366.17 D
 385.42 366.8 386.98 367.7 388.43 368.75 D
N
344.76 408.89 333.95 403.67 340.35 413.82 342.55 411.35 4 Y
3 X
V
396.97 403.5 M
 381.06 421.5 364.99 420.27 347.23 413.83 D
 345.55 413.22 344.02 412.35 342.58 411.34 D
1 H
N
7 X
90 450 13.5 13.43 329.47 389.93 G
0.5 H
0 X
90 450 13.5 13.43 329.47 389.93 A
(L) 323.46 383.9 T
7 X
90 450 13.5 13.43 401.47 389.93 G
0 X
90 450 13.5 13.43 401.47 389.93 A
(H) 394.47 383.9 T
7 X
90 450 9 9 363.83 362.07 G
1 12 Q
0 X
(1) 360.83 358.05 T
7 X
90 450 9 6.5 362.97 416 G
0 X
(2) 359.97 412.33 T
399.89 119.5 410.79 124.51 404.2 114.48 402.04 116.99 4 Y
V
333.97 121.33 M
 353.14 107.16 368.14 105.49 386.47 108.82 D
 391.53 109.75 397.23 113.29 402.05 116.97 D
N
339.42 151.96 331.62 142.84 333.41 154.71 336.42 153.34 4 Y
3 X
V
360.97 184.33 M
 350.21 177.16 342.84 166.45 336.41 153.32 D
1 H
N
7 X
90 450 13.5 13.43 329.47 131.19 G
0.5 H
0 X
90 450 13.5 13.43 329.47 131.19 A
1 18 Q
(L) 323.46 125.16 T
7 X
90 450 13.5 13.43 420.3 131.19 G
0 X
90 450 13.5 13.43 420.3 131.19 A
(H) 413.3 125.16 T
7 X
90 450 9 9 370.49 107.5 G
1 12 Q
0 X
(1) 367.49 103.48 T
7 X
90 450 9 6.5 348.64 171.33 G
0 X
(3a) 342.64 167.66 T
7 X
90 450 13.5 13.43 374.47 188.9 G
0 X
90 450 13.5 13.43 374.47 188.9 A
1 18 Q
(D) 367.97 182.87 T
398.28 183.72 388.29 190.34 400.27 190.03 399.28 186.87 4 Y
V
424.14 143.66 M
 425.47 157.99 413.77 178.67 399.31 186.84 D
1 H
N
402.62 147.78 410.62 138.84 399.1 142.18 400.86 144.98 4 Y
V
376.64 176.16 M
 378.53 162.77 387.67 153.66 400.84 144.91 D
N
7 X
90 450 9 6.5 418.3 168.33 G
1 12 Q
0 X
(2) 415.3 164.66 T
388.68 591.29 399.62 596.22 392.95 586.24 390.81 588.77 4 Y
V
334.97 595.05 M
 350.88 577.05 363.62 576.45 381.38 582.9 D
 384.01 583.85 387.48 586.19 390.81 588.76 D
0.5 H
N
7 X
90 450 13.5 13.43 327.64 607.36 G
0 X
90 450 13.5 13.43 327.64 607.36 A
1 18 Q
(H) 320.64 601.33 T
7 X
90 450 13.5 13.43 408.14 615.65 G
0 X
90 450 13.5 13.43 408.14 615.65 A
(S) 403.13 609.62 T
7 X
90 450 13.5 13.43 408.14 624.65 G
0 X
90 450 13.5 13.43 408.14 624.65 A
(S) 403.13 618.62 T
389.71 600.45 399.63 607.22 394.8 596.23 392.26 598.34 4 Y
V
334.97 595.05 M
 358.97 581.04 368.64 580.21 384.64 590.21 D
 387.01 591.72 389.71 594.97 392.31 598.32 D
N
389.29 611.66 398.61 619.22 394.72 607.87 392.01 609.77 4 Y
V
335.64 596.21 M
 364.64 587.21 368.64 590.21 384.64 600.21 D
 387.1 601.77 389.64 605.72 392.07 609.71 D
N
7 X
90 450 9 9 364.83 584.5 G
1 12 Q
0 X
(1) 361.83 580.48 T
7 X
90 450 9 6.5 360.97 645 G
0 X
(2) 357.97 641.33 T
7 X
90 450 9 6.5 382.97 160.33 G
0 X
(3b) 376.63 156.66 T
353.83 128.05 342.29 131.34 353.82 134.67 353.82 131.36 4 Y
10 X
V
407.3 130.49 M
 381.36 131.17 369.96 131.3 353.85 131.32 D
1 H
N
7 X
90 450 9 6.5 374.47 130.43 G
0 X
(4) 371.47 126.76 T
399.05 258.66 409.95 263.68 403.36 253.65 401.2 256.16 4 Y
V
333.14 260.5 M
 352.3 246.32 367.3 244.66 385.64 247.99 D
 390.7 248.92 396.4 252.46 401.22 256.14 D
0.5 H
N
7 X
90 450 13.5 13.43 328.64 270.36 G
0 X
90 450 13.5 13.43 328.64 270.36 A
1 18 Q
(L) 322.63 264.33 T
7 X
90 450 13.5 13.43 419.47 270.36 G
0 X
90 450 13.5 13.43 419.47 270.36 A
(H) 412.47 264.33 T
7 X
90 450 9 9 369.66 246.67 G
1 12 Q
0 X
(1) 366.66 242.65 T
7 X
90 450 13.5 13.43 364.64 328.07 G
0 X
90 450 13.5 13.43 364.64 328.07 A
1 18 Q
(S) 359.63 322.04 T
379.63 310.79 374.62 321.67 384.64 315.1 382.14 312.94 4 Y
V
413.8 283.32 M
 400.46 300.01 391.81 303.22 382.14 312.91 D
1 H
N
353.01 267.2 341.47 270.49 353 273.81 353 270.51 4 Y
3 X
V
406.47 269.66 M
 380.52 270.34 369.12 270.46 353.02 270.48 D
N
7 X
90 450 9 6.5 373.64 269.59 G
1 12 Q
0 X
(2a) 367.64 265.92 T
388.59 313.44 384.45 324.69 393.92 317.35 391.25 315.39 4 Y
V
412.97 284.99 M
 402.95 297.68 399.14 304.17 391.24 315.35 D
N
7 X
90 450 9 6.5 404.97 296.67 G
0 X
(2b) 398.63 293 T
7 X
90 450 9 6.5 345.3 303.83 G
0 X
(3) 342.3 300.16 T
70.97 718.5 504.97 718.5 2 L
7 X
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
FMENDPAGE
%%EndPage: "42" 15
%%Page: "43" 15
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(43) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
1.06 (ity) 108 712 P
1.06 (. In particular) 119.89 712 P
1.06 (, local storage would be needed to store the identi\336cation of the remote) 186.48 712 P
0.38 (processors who have accessed the busy data. They would eventually need to be informed) 108 696 P
3.81 (when all invalidation acknowledgments have been received. The complexity arises) 108 680 P
0.53 (because there is no limit, a priori, on the number of remote processors that could request) 108 664 P
1.52 (the busy block. Because of this complexity and the minimal performance gain, remote) 108 648 P
-0.42 (requests are rejected with NAK replies if the corresponding RAC entry is in the busy state.) 108 632 P
1.08 (Another noteworthy aspect of read-exclusive requests is the need for the \336nal acknowl-) 108 608 P
1 (edgment \050message 4\051 in case 3-5g. This extra acknowledgment is needed to remove the) 108 592 P
1.1 (race condition that results from the message that gives the local cluster ownership \0503a\051,) 108 576 P
1.47 (and the one that updates the directory \0503b\051. W) 108 560 P
1.47 (ithout this acknowledgment, it would be) 339.43 560 P
1.73 (possible for the local cluster to issue a writeback for the block before the directory is) 108 544 P
1.42 (updated. If the writeback arrived before the dirty-transfer message \0503b\051, then the dirty-) 108 528 P
1.49 (transfer message would corrupt the directory) 108 512 P
1.49 (. This condition is inhibited by preventing) 329.5 512 P
0.91 (any writebacks until the RAC receives the directory update acknowledgment and leaves) 108 496 P
(the busy state.) 108 480 T
0.43 (One other feature of a read-exclusive request is that if a cluster held a shared copy of the) 108 456 P
0.62 (line at the time of the read-exclusive request reached the home, then an invalidation will) 108 440 P
0.73 (be sent to the writing cluster) 108 424 P
0.73 (. This invalidation is not needed to eliminate the other local) 247.23 424 P
-0.03 (shared copies, because the read-exclusive issued on the bus by the writing processor elim-) 108 408 P
0.59 (inates these. However) 108 392 P
0.59 (, stale copies of the block may be in transit in the request network,) 214.27 392 P
0.79 (so the invalidation is sent to eliminate these copies \050this will discussed in more detail in) 108 376 P
0.66 (Section 3.2.4.2\051. The PCPU on the local cluster recognizes the invalidation request is on) 108 360 P
1.15 (behalf of the local cluster and converts the request to a special) 108 344 P
2 F
1.15 (self-invalidation) 422.92 344 P
0 F
1.15 (. Other-) 501.55 344 P
0.54 (wise, the invalidation would take ownership from the issuing processor and force it back) 108 328 P
1.01 (to the RAC. Instead, the self-invalidation does not af) 108 312 P
1.01 (fect the processor caches, but does) 369.07 312 P
0.79 (decrement the count of invalidation acknowledgments expected by the RAC and insures) 108 296 P
1.38 (that all copies of the block that might have been in the request network are eliminated) 108 280 P
(before the RAC leaves the busy state.) 108 264 T
(3.2.2.3  W) 108 236 T
(riteback Requests) 157.82 236 T
1.77 (W) 108 214 P
1.77 (riteback requests are generated as a side-ef) 118.84 214 P
1.77 (fect of processor read and read-exclusive) 334.36 214 P
0.71 (transactions. As will be shown in the MPBUS timing diagrams in Figure 4-1) 108 198 P
0.71 (\050in Chapter) 484.99 198 P
0.95 (4\051, writebacks are actually embedded in the same bus transactions as the read and read-) 108 182 P
0.74 (exclusive requests that replace the dirty line. These embedded writebacks are part of the) 108 166 P
0.09 (reason that the home cluster does not maintain the caching state of the local cluster) 108 150 P
0.09 (. T) 506.34 150 P
0.09 (o do) 518.92 150 P
1.49 (so would require two directory updates per bus transaction when a read and writeback) 108 134 P
0.22 (request were for the local cluster) 108 118 P
0.22 (. Because the caching state of the home is not kept in the) 265.28 118 P
-0.28 (directory) 108 102 P
-0.28 (, a local writeback never af) 150.52 102 P
-0.28 (fects the directory; it always stays uncached-remote. A) 278.8 102 P
3 (writeback to remote memory generates a writeback request message. The writeback) 108 86 P
FMENDPAGE
%%EndPage: "43" 16
%%Page: "44" 16
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(44) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
-0.28 (request is issued by the PCPU in the home cluster along with a dummy read request for the) 72 712 P
-0.28 (writeback block. This bus transaction causes main memory to be updated and the directory) 72 696 P
(to be marked uncached.) 72 680 T
1.79 (W) 72 656 P
1.79 (riteback requests issued during a read or read-exclusive request that must be retried) 82.84 656 P
0.67 (because of remote service are handled on the initial bus transaction. The dirty line being) 72 640 P
2.29 (replaced goes to a clean state while the request is pending, and the writeback is not) 72 624 P
-0.03 (repeated when the primary request is retried. A \336nal complication of writeback requests is) 72 608 P
-0.2 (that a writeback may occur for a block that is still busy \050i.e. remote invalidations pending\051.) 72 592 P
0.17 (In this case the processor proceeds, but the writeback data is stored in the RAC instead of) 72 576 P
(being sent to the home.) 72 560 T
1 F
(3.2.3  Specifying Alternative Memory Operations) 72 526 T
0 F
0.45 (One practical problem with providing alternative memory operations, such as prefetch or) 72 504 P
0.36 (update write, is how these operations will be accessed by user programs. The mechanism) 72 488 P
0.14 (should provide the memory protection and relocation and be accessible directly from user) 72 472 P
0.36 (code. In DASH, the mechanism is based on memory mapping and uses alternative physi-) 72 456 P
0.69 (cal and virtual address regions. In hardware, the high-order physical address bits specify) 72 440 P
0.55 (the operation type, and the remaining bits specify the location to be accessed. For opera-) 72 424 P
0.94 (tions that are only valid over whole memory blocks, sub-operations are speci\336ed by the) 72 408 P
0.8 (lower) 72 392 P
0.8 (-order block of) 99.07 392 P
0.8 (fset address bits. Controlled user access to these redundant physical) 172.38 392 P
1.3 (address regions is provided by redundant virtual address regions. The operating system) 72 376 P
0.13 (maps each virtual address region to a corresponding physical address region. Support of a) 72 360 P
0.36 (one-to-one mapping between the virtual to physical regions provides the run-time system) 72 344 P
0.74 (with a uniform way of specifying the alternative memory operations. An example of the) 72 328 P
-0.05 (software and hardware process to specify an alternative memory operation is given below) 72 312 P
-0.05 (.) 501 312 P
0.46 (The example takes as input a variable\325) 72 296 P
0.46 (s normal virtual address) 258.62 296 P
2 F
0.46 (A) 378.38 296 P
0 F
0.46 ( and alternative memory) 385.71 296 P
(operation) 72 280 T
2 F
(O) 120.3 280 T
0 F
(:) 128.96 280 T
(1.) 91.01 258 T
0.25 (Address) 103.54 258 P
2 F
0.25 (A) 146.08 258 P
0 F
0.25 ( is masked, if necessary) 153.41 258 P
0.25 (, to form a cache-block address in the normal) 267.2 258 P
-0.06 (virtual address space. A constant of) 103.54 244 P
-0.06 (fset including high and low address bits cor-) 273.56 244 P
0.45 (responding to operation) 103.54 230 P
2 F
0.45 (O) 221.8 230 P
0 F
0.45 ( is logically OR\325d to form a modi\336ed virtual address) 230.46 230 P
2 F
0.2 (V) 103.54 216 P
0.2 (AO) 109.98 216 P
0 F
0.2 (.) 125.96 216 P
2 F
0.2 (V) 132.16 216 P
0.2 (AO) 138.6 216 P
0 F
0.2 ( speci\336es both the virtual cache block and operation. \050This modi\336ca-) 154.59 216 P
(tion may be partially or completely done at compile time\051.) 103.54 202 T
(2.) 91.01 182 T
0.92 (The processor issues a load or store to) 103.54 182 P
2 F
0.92 (V) 296.78 182 P
0.92 (AO) 303.22 182 P
0 F
0.92 (.) 319.2 182 P
2 F
0.92 (V) 326.12 182 P
0.92 (AO) 332.56 182 P
0 F
0.92 ( is translated by the TLB or) 348.55 182 P
0.36 (page tables to a physical address) 103.54 168 P
2 F
0.36 (P) 264.9 168 P
0.36 (AO) 270.68 168 P
0 F
0.36 ( which speci\336es the physical cache block) 286.67 168 P
(\050) 103.54 154 T
2 F
(P) 107.53 154 T
(A) 113.31 154 T
0 F
(\051 and operation \050through the upper and lower address bits\051.) 120.64 154 T
(3.) 91.01 134 T
-0.03 (The load or store of) 103.54 134 P
2 F
-0.03 (P) 200.97 134 P
-0.03 (AO) 206.76 134 P
0 F
-0.03 ( triggers the alternative operation on the corresponding) 222.74 134 P
(physical address) 103.54 120 T
2 F
(P) 185.48 120 T
(A) 191.26 120 T
0 F
(.) 198.58 120 T
0.75 (Note that the page tables need not be modi\336ed to support the extra) 72 98 P
2 F
0.75 (V) 403.25 98 P
0.75 (AO) 409.69 98 P
0 F
0.75 ( to) 425.67 98 P
2 F
0.75 (P) 442.51 98 P
0.75 (AO) 448.29 98 P
0 F
0.75 ( transla-) 464.28 98 P
1.08 (tions. There is a one-to-one correspondence between the normal) 72 82 P
2 F
1.08 (V) 392.17 82 P
1.08 (A) 398.61 82 P
0 F
1.08 ( to) 405.94 82 P
2 F
1.08 (P) 423.43 82 P
1.08 (A) 429.21 82 P
0 F
1.08 ( mapping and) 436.54 82 P
FMENDPAGE
%%EndPage: "44" 17
%%Page: "45" 17
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(45) 532 42.62 T
108 72 540 720 R
7 X
V
2 12 Q
0 X
0.57 (V) 108 712 P
0.57 (AO) 114.44 712 P
0 F
0.57 ( and) 130.43 712 P
2 F
0.57 (P) 154.88 712 P
0.57 (AO) 160.66 712 P
0 F
0.57 ( mapping. Thus, while redundant TLB entries are required, the page tables) 176.65 712 P
0.35 (for) 108 696 P
2 F
0.35 (V) 125.33 696 P
0.35 (A) 131.77 696 P
0 F
0.35 ( can be used to form the appropriate) 139.1 696 P
2 F
0.35 (P) 317.77 696 P
0.35 (AO) 323.55 696 P
0 F
0.35 ( for a TLB miss on) 339.54 696 P
2 F
0.35 (V) 435.59 696 P
0.35 (AO) 442.03 696 P
0 F
0.35 (. Furthermore, to) 458.02 696 P
1.05 (reduce the overhead of extra TLB misses, a miss on) 108 680 P
2 F
1.05 (V) 369.99 680 P
1.05 (AO) 376.43 680 P
0 F
1.05 ( can be used to trigger a TLB) 392.42 680 P
0.42 (load of both) 108 664 P
2 F
0.42 (V) 170.21 664 P
0.42 (AO) 176.65 664 P
0 F
0.42 ( and the normal) 192.64 664 P
2 F
0.42 (V) 272.25 664 P
0.42 (A) 278.69 664 P
0 F
0.42 (. For example, if a TLB miss occurs for the prefetch) 286.02 664 P
0.77 (address of an item, the miss handler could also load the translation of the normal access) 108 648 P
0.23 (address. This reduces the overhead of issuing the prefetch because the prefetch TLB miss) 108 632 P
(simply replaces the TLB miss on the data itself.) 108 616 T
1 F
(3.2.4  Pr) 108 582 T
(efetch Operations) 150.42 582 T
0 F
-0.13 (An invalidation-based cache coherence protocol works well for most data objects) 108 560 P
-0.13 ([EgK88,) 499.03 560 P
1.45 (W) 108 544 P
1.45 (eG89a]. However) 118.36 544 P
1.45 (, performance can degrade substantially if data objects exhibit poor) 204.58 544 P
1 (cache behavior) 108 528 P
1 (. The degradation results primarily from read misses which fetch data on) 180.6 528 P
-0.05 (demand and force the processor to stall during the cache \336ll. Prefetch operations allow the) 108 512 P
0.28 (processor to fetch data without waiting for the memory response. Prefetch relies on intra-) 108 496 P
0.04 (task level parallelism to hide memory latency) 108 480 P
0.04 (. T) 325.98 480 P
0.04 (o be ef) 338.5 480 P
0.04 (fective, prefetch also requires there) 371 480 P
(to be suf) 108 464 T
(\336cient memory bandwidth to accept the increased memory reference rate.) 149.09 464 T
1.02 (DASH supports prefetch commands that move a shared or exclusive copy of a memory) 108 440 P
0.96 (block closer to a processor or send a shared copy out to other clusters. The \336rst type of) 108 424 P
1.14 (prefetch is called a) 108 408 P
2 F
1.14 (consumer pr) 205.82 408 P
1.14 (efetch) 266.8 408 P
0 F
1.14 ( while the latter is a) 295.45 408 P
2 F
1.14 (pr) 399.56 408 P
1.14 (oducer pr) 409.78 408 P
1.14 (efetch) 457.44 408 P
0 F
1.14 ( or) 486.08 408 P
2 F
1.14 (deliver) 504.36 408 P
0 F
1.14 (.) 537 408 P
-0.19 (Prefetch operations in DASH are non-binding; data remains visible to the cache coherence) 108 392 P
0.23 (protocol and is kept consistent until the processor reads the value. Prefetch operations are) 108 376 P
-0.03 (speci\336ed by processor stores within a prefetch region of the physical address space. These) 108 360 P
0.32 (store operations do not stall the processor if there is space in the processor) 108 344 P
0.32 (\325) 468.62 344 P
0.32 (s write-buf) 471.96 344 P
0.32 (fer) 524.35 344 P
0.32 (.) 537 344 P
(The prefetch type is speci\336ed by the cache of) 108 328 T
(fset portion of the address.) 324.94 328 T
(3.2.4.1  Consumer Prefetch) 108 300 T
2.3 (Ideally) 108 278 P
2.3 (, consumer prefetch would bring data into the processor) 140.53 278 P
2.3 (\325) 426.84 278 P
2.3 (s \336rst or second-level) 430.17 278 P
-0.08 (cache. Furthermore, prefetch of data already in the processor) 108 262 P
-0.08 (\325) 399.52 262 P
-0.08 (s cache would be \336ltered out) 402.85 262 P
-0.07 (by the cache. In the prototype, both of these features would have required extensive modi-) 108 246 P
0.92 (\336cations of the existing processor board. Consequently) 108 230 P
0.92 (, prefetch data in the prototype is) 376.25 230 P
0.57 (only brought into the issuing cluster) 108 214 P
0.57 (\325) 284.2 214 P
0.57 (s RAC, and unnecessary prefetches are only \336ltered) 287.54 214 P
(by snooping after they are issued on the local bus.) 108 198 T
0.75 (As mentioned previously) 108 174 P
0.75 (, a read-prefetch is issued as a store operation that bypasses the) 229.32 174 P
0.55 (processor caches. The store operation is issued on the bus and, if the block is not held in) 108 158 P
0.89 (any of the local caches or RAC, generates a cache read request message. Outside of the) 108 142 P
0.68 (cluster it is literally a normal cache read, so only the RAC knows that a processor is not) 108 126 P
0.83 (waiting. Upon receiving the reply) 108 110 P
0.83 (, the RAC entry goes to a valid state. On a subsequent) 272.08 110 P
1.36 (processor read, the RAC supplies the block through the normal cache-to-cache transfer) 108 94 P
0.66 (mechanism. If a normal load operation is issued before the data is available in the RAC,) 108 78 P
FMENDPAGE
%%EndPage: "45" 18
%%Page: "46" 18
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(46) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
0.6 (the request is mer) 72 712 P
0.6 (ged into the outstanding prefetch. Read-exclusive prefetches are issued) 158.51 712 P
0.46 (like a read prefetch except they use a dif) 72 696 P
0.46 (ferent cache line of) 269.31 696 P
0.46 (fset. Outside the cluster) 362.73 696 P
0.46 (, they) 476.89 696 P
1.48 (are translated into read-exclusive requests. When complete, the read-exclusive prefetch) 72 680 P
(leaves an exclusive copy of the memory block in the RAC.) 72 664 T
0.29 (Prefetch data in the RAC is kept coherent in the same manner as normal cache data. Out-) 72 640 P
0.86 (side the issuing cluster the request is literally a read or read-exclusive request. Once the) 72 624 P
2.11 (prefetch reply is received, the RAC performs the normal cache snoop operations that) 72 608 P
0.13 (invalidate a shared cache line or source an exclusive cache line. Since prefetch operations) 72 592 P
0.75 (are only hints, it is also permissible for the memory system to ignore a prefetch request.) 72 576 P
2.07 (The prefetch will be ignored if it con\337icts with an active RAC entry) 72 560 P
2.07 (, or the prefetch) 421.86 560 P
1.43 (request receives a NAK reply) 72 544 P
1.43 (. In the former case, it is assumed that stalling the write-) 218.8 544 P
-0.01 (buf) 72 528 P
-0.01 (fer until the RAC is freed will cancel any gain from the prefetch. In the latter case, it is) 87.77 528 P
-0.17 (assumed that the block is a hot-spot and eliminating the prefetch will reduce the load on it.) 72 512 P
(3.2.4.2  Producer Prefetch) 72 484 T
0.66 (Producer prefetch \050PPREF\051 allows the producer of a data item to push the item closer to) 72 462 P
2.17 (consuming processors. PPREF is useful when multiple consumers require a block, or) 72 446 P
0.43 (when the consumer needs data as soon as it is produced. PPREF operations also improve) 72 430 P
0.02 (the ef) 72 414 P
0.02 (\336ciency of emulating message passing within a shared-memory machine. In the pro-) 98.77 414 P
-0.18 (totype, the destination of the producer prefetch is speci\336ed as a bit vector in the data of the) 72 398 P
0.08 (store operation which initiates the PPREF) 72 382 P
0.08 (. Each cluster speci\336ed in the bit vector is sent a) 272.34 382 P
1.73 (shared copy of the block. If the vector is null, the operation simply \337ushes any dirty-) 72 366 P
0.16 (remote copy of the data item back to memory) 72 350 P
0.16 (. Producer prefetch is optimized for the case) 291.03 350 P
0.55 (where the PPREF block is dirty in the issuing processor) 72 334 P
0.55 (\325) 344.87 334 P
0.55 (s cache. In particular) 348.21 334 P
0.55 (, unlike the) 449.27 334 P
0.64 (consumer prefetch operations, the PPREF is always translated by the RCPU on the local) 72 318 P
0.29 (bus. The RCPU cycle will \337ush any dirty copies of the PPREF block held locally back to) 72 302 P
1.95 (memory before the PPREF is sent to the home. This optimization, however) 72 286 P
1.95 (, does not) 453.79 286 P
0.12 (restrict when or where a PPREF can be issued. PPREFs can be issued by any processor at) 72 270 P
(any time. They are only hints that af) 72 254 T
(fect the caching of the given memory block.) 245.66 254 T
1.09 (Figure 3-6 shows the \337ow of producer prefetch operations. One item of note is that the) 72 230 P
0.44 (actual deliver messages are sent as requests to the PCPU, not as replies to the RC. While) 72 214 P
0.18 (not as ef) 72 198 P
0.18 (\336cient as sending a reply) 112.79 198 P
0.18 (, it is important that the deliver follow the same network) 231.99 198 P
1.25 (path as any later invalidation. Unlike a normal read reply) 72 182 P
1.25 (, the deliver does not have an) 356.27 182 P
1.21 (associated RAC entry to detect possibly stale replies caused by a race between the two) 72 166 P
1 (networks. Because a single mesh guarantees in-order delivery of messages between any) 72 150 P
0.64 (two nodes, the deliver and later invalidation will be issued at the destination in the same) 72 134 P
0.14 (order that they are issued in the home. Similarly) 72 118 P
0.14 (, it is important that an invalidation \050actu-) 303.16 118 P
0.22 (ally a self-invalidation\051 be sent to a writing node if the directory indicates that the issuing) 72 102 P
-0.17 (cluster is in the shared state. The sharing state might be the result of a pending deliver) 72 86 P
-0.17 (, and) 480.85 86 P
FMENDPAGE
%%EndPage: "46" 19
%%Page: "47" 19
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(47) 532 42.62 T
108 56 540 720 R
7 X
V
108 56 540 720 C
108.73 61 541.73 80 R
7 X
0 K
V
108.73 72.01 540 80 C
108.73 77.98 576.73 77.98 2 L
0.5 H
0 Z
0 X
0 K
N
108 56 540 720 C
1 10 Q
0 X
0 K
(FIGURE) 112.33 65.34 T
(3-6.  Pr) 153.68 65.34 T
(oducer pr) 184.87 65.34 T
(efetch r) 226.6 65.34 T
(equest \337ows.) 258.89 65.34 T
7 X
90 450 13.5 13.43 471.48 659.71 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 471.48 659.71 A
1 18 Q
(S) 466.48 653.68 T
109.73 88 342.48 709 R
7 X
V
333.73 701.24 109.73 701.24 2 L
0 X
V
0.49 H
N
0 10 Q
(a\051 Home Request to Uncached or Shared-Remote Block) 109.73 702.33 T
(\245) 118.73 690.33 T
(CPU issues producer) 127.73 690.33 T
(-prefetch \050PPREF\051 to bus with a) 211.36 690.33 T
(bit-vector of destination clusters.) 127.73 680.33 T
(\245) 118.73 668.33 T
-0.29 (RCPU repeats PPREF in the normal cache space with) 127.73 668.33 P
(the destination bit-vector and main memory supplies) 127.73 658.33 T
(data; Send Deliver Req to speci\336ed clusters) 127.73 648.33 T
(\0501\051;) 302.88 648.33 T
(Directory entry to Shared-Remote.) 127.73 638.33 T
(\245) 118.73 626.33 T
(PCPUs on destination clusters issue Deliver;) 127.73 626.33 T
(Destination RCs take shared data into RAC.) 127.73 616.33 T
274.35 599.24 109.73 599.24 2 L
V
N
(b\051 Home Request to Dirty-Remote Block) 109.73 600.33 T
(\245) 118.73 588.33 T
(CPU issues PPREF to bus; Allocate RAC entry;) 127.73 588.33 T
(Send PPREF Req to Dirty cluster) 127.73 578.33 T
(\0501\051.) 262.1 578.33 T
(\245) 118.73 566.33 T
(Dirty cache supplies data and goes to shared state;) 127.73 566.33 T
(Dirty cluster sends Sharing-W) 127.73 556.33 T
(riteback Req and) 248.63 556.33 T
(PPREF Req to Home) 127.73 546.33 T
(\0502ab\051.) 213.8 546.33 T
(\245) 118.73 534.33 T
(PCPU issues Sharing-W) 127.73 534.33 T
(riteback in Home;) 225.05 534.33 T
(Directory entry to Shared-Remote.) 127.73 524.33 T
(\245) 118.73 512.33 T
(PCPU issues PPREF in Home; main memory sup-) 127.73 512.33 T
-0.39 (plies data; Send Deliver Req to speci\336ed clusters) 127.73 502.33 P
-0.39 (\0503a\051;) 321.5 502.33 P
(Send Acknowledge Reply to Home) 127.73 492.33 T
(\0503b\051.) 270.13 492.33 T
(\245) 118.73 480.33 T
(PCPUs on destination clusters issue Deliver;) 127.73 480.33 T
(Destination RCs take data into RAC.) 127.73 470.33 T
311.54 435.24 109.73 435.24 2 L
V
N
(c\051 Remote Request Satis\336ed by Local Dirty Cache) 109.73 436.33 T
(\245) 118.73 424.33 T
(CPU issues producer) 127.73 424.33 T
(-prefetch \050PPREF\051 to bus.) 211.36 424.33 T
(\245) 118.73 412.33 T
(RCPU repeats PPREF in the normal cache space and) 127.73 412.33 T
(local dirty cache supplies data; Allocate RAC entry;) 127.73 402.33 T
(Send Sharing-W) 127.73 392.33 T
(riteback Req and PPREF Req to) 193.67 392.33 T
(Home) 127.73 382.33 T
(\0501ab\051.) 152.98 382.33 T
(\245) 118.73 370.33 T
(PCPU issues Sharing-W) 127.73 370.33 T
(riteback in Home;) 225.05 370.33 T
(Directory entry to Shared-Remote.) 127.73 360.33 T
(\245) 118.73 348.33 T
(PCPU issues PPREF in Home, main memory sup-) 127.73 348.33 T
-0.09 (plies data; Send Deliver Req) 127.73 338.33 P
-0.09 (\0502a\051 to speci\336ed clusters;) 242.55 338.33 P
(Send Acknowledge Reply to Local RC) 127.73 328.33 T
(\0502b\051) 284.29 328.33 T
(\245) 118.73 316.33 T
(PCPUs on destination clusters issue Deliver;) 127.73 316.33 T
(Destination RCs take data into RAC.) 127.73 306.33 T
340.95 289.24 109.73 289.24 2 L
V
N
(d\051 Remote Request to Uncached or Shared-Remote Block) 109.73 290.33 T
(\245) 118.73 278.33 T
(Same as above except Sharing W) 127.73 278.33 T
(riteback Req does) 260.83 278.33 T
(not precede Producer Prefetch Req sent to the Home.) 127.73 268.33 T
280.45 251.24 109.73 251.24 2 L
V
N
(e\051 Remote Request to Dirty-Remote Block) 109.73 252.33 T
(\245) 118.73 240.33 T
(CPU issues producer) 127.73 240.33 T
(-prefetch \050PPREF\051 to bus.) 211.36 240.33 T
(\245) 118.73 228.33 T
(RCPU repeats PPREF in the normal cache space;) 127.73 228.33 T
(Allocate RAC entry; Send PPREF Req to Home) 127.73 218.33 T
(\0501\051.) 321.51 218.33 T
(\245) 118.73 206.33 T
(PPREF Req forwarded by Home to Dirty cluster) 127.73 206.33 T
(\0502\051.) 322.6 206.33 T
(\245) 118.73 194.33 T
(Dirty cache supplies data and goes to shared state;) 127.73 194.33 T
(Dirty cluster sends Sharing-W) 127.73 184.33 T
(riteback Req and) 248.63 184.33 T
(PPREF Req to Home) 127.73 174.33 T
(\0503,4\051.) 213.8 174.33 T
(\245) 118.73 162.33 T
(PCPU issues Sharing-W) 127.73 162.33 T
(riteback in Home;) 225.05 162.33 T
(Directory entry to Shared-Remote.) 127.73 152.33 T
(\245) 118.73 140.33 T
(PCPU issues PPREF in Home; main memory sup-) 127.73 140.33 T
-0.39 (plies data; Send Deliver Req to speci\336ed clusters) 127.73 130.33 P
-0.39 (\0505a\051;) 321.5 130.33 P
(Send Acknowledge Reply to Home) 127.73 120.33 T
(\0505b\051.) 270.13 120.33 T
(\245) 118.73 108.33 T
(PCPUs on destination clusters issue Deliver;) 127.73 108.33 T
(Destination RCs take data into RAC.) 127.73 98.33 T
450.39 510.29 461.16 515.58 454.82 505.39 452.6 507.84 4 Y
V
398.17 515.57 M
 414.08 497.57 430.15 498.8 447.91 505.25 D
 449.62 505.87 451.18 506.77 452.63 507.82 D
0.5 H
N
7 X
90 450 13.5 13.43 465.67 529 G
0 X
90 450 13.5 13.43 465.67 529 A
1 18 Q
(D) 459.17 522.97 T
7 X
90 450 9 9 428.02 501.14 G
1 12 Q
0 X
(1) 425.02 497.12 T
7 X
90 450 13.5 13.43 390.98 665.04 G
0 X
90 450 13.5 13.43 390.98 665.04 A
1 18 Q
(H) 383.98 659.01 T
7 X
90 450 13.5 13.43 471.48 668.57 G
0 X
90 450 13.5 13.43 471.48 668.57 A
(S) 466.48 662.54 T
7 X
90 450 13.5 13.43 471.48 677.57 G
0 X
90 450 13.5 13.43 471.48 677.57 A
(S) 466.48 671.54 T
446.55 679.82 458.48 678.47 447.65 673.29 447.1 676.55 4 Y
V
404.48 669.47 447.1 676.55 2 L
7 X
V
1 H
2 Z
0 X
N
446.94 672.77 458.48 669.47 446.94 666.16 446.94 669.47 4 Y
V
404.48 669.47 446.94 669.47 2 L
7 X
V
0 X
N
447.65 665.64 458.48 660.47 446.55 659.12 447.1 662.38 4 Y
V
404.48 669.47 447.1 662.38 2 L
7 X
V
0 X
N
7 X
90 450 9 9 422.48 669.47 G
1 12 Q
0 X
(1) 419.48 665.45 T
418.7 524.83 407.17 528.14 418.7 531.45 418.7 528.14 4 Y
V
452.17 528.14 418.7 528.14 2 L
7 X
V
0 X
N
7 X
90 450 9 6.5 434.17 527.64 G
0 X
(2ab) 424.83 523.97 T
7 X
90 450 13.5 13.43 440.67 578.57 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 440.67 578.57 A
1 18 Q
(S) 435.67 572.54 T
7 X
90 450 13.5 13.43 431.67 578.57 G
0 X
90 450 13.5 13.43 431.67 578.57 A
(S) 426.67 572.54 T
7 X
90 450 13.5 13.43 422.67 578.57 G
0 X
90 450 13.5 13.43 422.67 578.57 A
(S) 417.67 572.54 T
405.31 562.03 414.16 570.14 410.95 558.58 408.12 560.3 4 Y
V
397.17 542.13 408.14 560.3 2 L
7 X
V
1 H
2 Z
0 X
N
417.17 562.3 428.16 567.14 421.4 557.22 419.29 559.76 4 Y
V
399.17 543.13 419.3 559.76 2 L
7 X
V
0 X
N
428.6 562.91 440.15 566.14 432.07 557.27 430.33 560.09 4 Y
V
399.17 541.13 430.35 560.09 2 L
7 X
V
0 X
N
7 X
90 450 9 6.5 410.17 551.64 G
1 12 Q
0 X
(3a) 404.17 547.97 T
374.35 517.97 386.16 520.14 377.3 512.05 375.83 515.01 4 Y
10 X
V
384.17 539.13 M
 374.17 546.13 355.87 537.65 360.73 520.13 D
 362.23 514.61 369.26 513.6 375.82 515.03 D
0 Z
N
7 X
90 450 9 9 361.73 536.14 G
0 X
(3b) 355.39 532.12 T
7 X
90 450 13.5 13.43 393.67 529 G
0.5 H
0 X
90 450 13.5 13.43 393.67 529 A
1 18 Q
(H) 386.67 522.97 T
406.3 328.21 397.71 336.59 409.44 334.04 407.87 331.12 4 Y
10 X
V
407.92 331.13 M
 420.56 326.17 433.49 327.28 447.47 330.34 D
 452.84 331.52 456.69 334.36 460.73 336.57 D
2 Z
N
7 X
90 450 13.5 13.43 465.23 350 G
0 Z
0 X
90 450 13.5 13.43 465.23 350 A
(H) 458.23 343.97 T
7 X
90 450 9 9 426.87 328.57 G
1 12 Q
0 X
(2b) 420.54 324.55 T
440.19 352.45 451.73 349.14 440.19 345.83 440.19 349.14 4 Y
V
440.19 349.14 406.73 349.14 2 L
7 X
V
1 H
2 Z
0 X
N
7 X
90 450 9 6.5 422.43 348.64 G
0 X
(1ab) 413.1 344.97 T
7 X
90 450 13.5 13.43 440.94 404.57 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 440.94 404.57 A
1 18 Q
(S) 435.94 398.54 T
7 X
90 450 13.5 13.43 431.94 404.57 G
0 X
90 450 13.5 13.43 431.94 404.57 A
(S) 426.94 398.54 T
7 X
90 450 13.5 13.43 422.94 404.57 G
0 X
90 450 13.5 13.43 422.94 404.57 A
(S) 417.94 398.54 T
426.78 381.07 420.71 391.43 431.35 385.86 429.06 383.47 4 Y
V
454.29 359.28 429.07 383.46 2 L
7 X
V
1 H
2 Z
0 X
N
436.43 380.69 432.85 392.14 441.96 384.33 439.19 382.51 4 Y
V
454.29 359.28 439.21 382.5 2 L
7 X
V
0 X
N
444.56 380.15 444.28 392.14 450.88 382.12 447.72 381.13 4 Y
V
454.29 359.99 447.73 381.12 2 L
7 X
V
0 X
N
7 X
90 450 9 6.5 448.3 369.07 G
1 12 Q
0 X
(2a) 442.3 365.4 T
7 X
90 450 13.5 13.43 393.23 350 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 393.23 350 A
1 18 Q
(L) 387.23 343.97 T
7 X
90 450 13.5 13.43 465.23 171.57 G
0 X
90 450 13.5 13.43 465.23 171.57 A
(H) 458.23 165.54 T
440.19 174.02 451.73 170.72 440.19 167.41 440.19 170.72 4 Y
V
440.19 170.72 406.73 170.72 2 L
7 X
V
1 H
2 Z
0 X
N
7 X
90 450 9 6.5 422.43 170.22 G
1 12 Q
0 X
(1) 419.43 166.54 T
7 X
90 450 13.5 13.43 440.94 226.14 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 440.94 226.14 A
1 18 Q
(S) 435.94 220.11 T
7 X
90 450 13.5 13.43 431.94 226.14 G
0 X
90 450 13.5 13.43 431.94 226.14 A
(S) 426.94 220.11 T
7 X
90 450 13.5 13.43 422.94 226.14 G
0 X
90 450 13.5 13.43 422.94 226.14 A
(S) 417.94 220.11 T
426.78 202.65 420.71 213 431.35 207.44 429.06 205.04 4 Y
V
454.29 180.85 429.07 205.04 2 L
7 X
V
1 H
2 Z
0 X
N
436.43 202.27 432.85 213.72 441.96 205.91 439.19 204.09 4 Y
V
454.29 180.85 439.21 204.08 2 L
7 X
V
0 X
N
444.56 201.73 444.28 213.72 450.88 203.7 447.72 202.71 4 Y
V
454.29 181.57 447.73 202.7 2 L
7 X
V
0 X
N
7 X
90 450 9 6.5 448.3 190.64 G
1 12 Q
0 X
(5a) 442.3 186.97 T
7 X
90 450 13.5 13.43 393.23 171.57 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 393.23 171.57 A
1 18 Q
(L) 387.23 165.54 T
406.3 151.25 397.71 159.6 409.42 157.07 407.86 154.16 4 Y
10 X
V
407.9 154.14 M
 420.54 149.17 433.48 150.28 447.47 153.34 D
 452.84 154.52 456.69 157.36 460.73 159.57 D
2 Z
N
7 X
90 450 9 9 426.87 151.57 G
1 12 Q
0 X
(5b) 420.54 147.55 T
7 X
90 450 13.5 13.43 432.66 116.43 G
0 Z
0 X
90 450 13.5 13.43 432.66 116.43 A
1 18 Q
(D) 426.16 110.4 T
445.74 135.93 435.57 129.58 440.83 140.36 443.29 138.15 4 Y
V
461.29 158.14 443.29 138.14 2 L
7 X
V
1 H
2 Z
0 X
N
461.21 150.69 468.44 160.27 467.39 148.32 464.3 149.51 4 Y
V
443.43 124.56 M
 455.88 125.92 460.44 138.23 464.33 149.48 D
0 Z
N
7 X
90 450 6.86 7.21 453.44 146.07 G
1 12 Q
0 X
(2) 450.44 143.84 T
7 X
90 450 6.86 7.21 455.01 128.79 G
0 X
(3,4) 447.51 126.55 T
107.73 718 541.73 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
FMENDPAGE
%%EndPage: "47" 20
%%Page: "48" 20
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(48) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
0.53 (the self-invalidation guarantees that such a deliver has been pur) 72 712 P
0.53 (ged from the request net-) 381.31 712 P
(work before the RAC leaves the busy state.) 72 696 T
0.4 (Another unique attribute of the PPREF \337ows shown in Figure 3-6 is that deliver requests) 72 672 P
0.52 (do not require acknowledgments. These are not required because deliver operations have) 72 656 P
0.53 (guaranteed ordering given the network restrictions mentioned above. If in-order message) 72 640 P
0.23 (delivery cannot be guaranteed, then deliver requests require acknowledgments, and pend-) 72 624 P
(ing producer prefetches require a busy condition similar to read-exclusives.) 72 608 T
1 F
(3.2.5  DMA/Uncached Operations) 72 574 T
0 F
0.75 (DMA operations made by I/O devices are similar to uncached processor memory opera-) 72 552 P
1.29 (tions. In both cases no caching is desired for reads, and ownership is not requested for) 72 536 P
0.14 (writes. Caching is not desired for reads because the resulting memory value is leaving the) 72 520 P
1.64 (domain of memory coherence \050i.e. an external I/O device or processor register\051. Thus,) 72 504 P
0.04 (while the most up-to-date value of a location is required, no caching is implied. For DMA) 72 488 P
0.66 (writes, caching is not desirable because the operations are typically lar) 72 472 P
0.66 (ge and sequential,) 416.42 472 P
0.1 (and they are referenced only once by the writer) 72 456 P
0.1 (. Similarly) 298.58 456 P
0.1 (, processor writes used for inter) 348.55 456 P
0.1 (-) 500.01 456 P
0.25 (processor communication and event noti\336cation are more likely to be referenced by other) 72 440 P
2.24 (processors before the issuing processor re-requests the data. As with uncached reads,) 72 424 P
0.61 (update writes must maintain coherence, but use cache updates instead of invalidations to) 72 408 P
(do so.) 72 392 T
1.15 (The prototype supports DMA and uncached operations through extensions of the DMA) 72 368 P
0.03 (bus transactions supported on SGI\325) 72 352 P
0.03 (s MPBUS. DMA reads return coherent data, and DMA) 239.99 352 P
0.11 (writes update all cache and memory copies of a block. Neither operation af) 72 336 P
0.11 (fects the cache) 433.18 336 P
0.83 (state of the block. DMA reads and writes are issued directly by the I/O interfaces in the) 72 320 P
0.47 (4D/340. Ideally) 72 304 P
0.47 (, uncached and update operations would be issued by the processor in the) 146.97 304 P
-0.02 (same way) 72 288 P
-0.02 (, but the processor boards do not support these transactions. Instead, an alternate) 118.83 288 P
0.54 (physical address region is used. These accesses are then translated by the directory hard-) 72 272 P
(ware into DMA operations in the normal cachable memory space.) 72 256 T
(3.2.5.1  Uncached/DMA Reads) 72 228 T
0.08 (DMA or uncached reads are identical to normal cache reads except the caching and direc-) 72 206 P
-0.08 (tory state is unaltered by the read. Figure 3-7 shows the request \337ow for DMA read opera-) 72 190 P
0.07 (tions. Uncached reads are similar) 72 174 P
0.07 (, but require translation between uncached I/O space and) 231.34 174 P
-0.17 (normal cache space. The translation is done by the RCPU if the request is issued and satis-) 72 158 P
0.47 (\336ed by the home. Otherwise, the outgoing network request logic performs the translation) 72 142 P
-0.02 (on the way to the network. Since uncached reads are translated after issue on the bus, they) 72 126 P
-0.11 (are never satis\336ed by the requesting processor) 72 110 P
-0.11 (\325) 292.95 110 P
-0.11 (s cache or by local cache-to-cache sharing.) 296.29 110 P
FMENDPAGE
%%EndPage: "48" 21
%%Page: "49" 21
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(49) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
(3.2.5.2  DMA/Update W) 108 278 T
(rite Operations) 226.77 278 T
0.69 (DMA and update write operations update all cached copies of a memory location with a) 108 256 P
0.19 (new value. DMA write operations are non-blocking in the sense that the I/O interface can) 108 240 P
0.25 (continue as soon as the request is issued on the local bus. Retry is only required if alloca-) 108 224 P
0.56 (tion of a RAC entry is not possible. As in DMA reads, DMA write operations are issued) 108 208 P
0.81 (directly by the I/O interface logic, but processor update writes must be translated by the) 108 192 P
-0.12 (directory logic. T) 108 176 P
-0.12 (ranslation of update writes complicates memory consistency for the issu-) 190.96 176 P
-0.15 (ing processor) 108 160 P
-0.15 (. In particular) 171.48 160 P
-0.15 (, it is possible that the processor issues an update write and then) 235.65 160 P
0.37 (reads an old value of the location from its own cache. T) 108 144 P
0.37 (o prevent this, a full-fence opera-) 378.31 144 P
0.27 (tion \050see Section 3.3.3\051 must be issued before any read of the location by the writing pro-) 108 128 P
1.98 (cessor) 108 112 P
1.98 (. The fence insures that the write has updated any copies of the location in the) 137.31 112 P
0.69 (processors\325 caches before the read completes. Figure 3-8 shows the \337ow of update write) 108 96 P
2.39 (operations. Note that update writes, like deliver operations, rely on in-order message) 108 80 P
108 72 540 720 C
108 286 540 720 C
108.01 313 541.01 332 R
7 X
0 K
V
108.01 324.01 540 332 C
108.01 329.98 576.01 329.98 2 L
0.5 H
0 Z
0 X
0 K
N
108 286 540 720 C
1 10 Q
0 X
0 K
(FIGURE) 111.61 317.34 T
(3-7.  DMA/uncached r) 152.96 317.34 T
(ead r) 247.72 317.34 T
(equest \337ows.) 269.47 317.34 T
117.01 340 351.01 709 R
7 X
V
341.01 701.24 117.01 701.24 2 L
0 X
V
0.49 H
0 Z
N
0 F
(a\051 Home Request to Uncached or Shared-Remote Block) 117.01 702.33 T
(\245) 126.01 690.33 T
(IO issues DMA read on bus and main memory sup-) 135.01 690.33 T
(plies data; Directory entry unchanged.) 135.01 680.33 T
281.63 663.24 117.01 663.24 2 L
V
N
(b\051 Home Request to Dirty-Remote Block) 117.01 664.33 T
(\245) 126.01 652.33 T
(IO issues DMA read on bus and is forced to retry;) 135.01 652.33 T
(Allocate RAC entry; Send Uncached Read Req) 135.01 642.33 T
(\0501\051 to) 325.14 642.33 T
(Dirty cluster) 135.01 632.33 T
(.) 184.7 632.33 T
(\245) 126.01 620.33 T
(Dirty Cache supplies data and stays in dirty state;) 135.01 620.33 T
(Dirty cluster sends Uncached Read Reply) 135.01 610.33 T
(\0502\051 to) 302.66 610.33 T
(Home.) 135.01 600.33 T
(\245) 126.01 588.33 T
(IO repeats DMA read and RAC supplies data.) 135.01 588.33 T
295.22 553.24 117.01 553.24 2 L
V
N
(c\051 Remote Request Satis\336ed by Local Cache) 117.01 554.33 T
(\245) 126.01 542.33 T
(IO issues DMA read on bus and local shared or dirty) 135.01 542.33 T
(cache supplies data.) 135.01 532.33 T
348.23 515.24 117.01 515.24 2 L
V
N
(d\051 Remote Request to Uncached or Shared-Remote Block) 117.01 516.33 T
(\245) 126.01 504.33 T
(IO issues DMA read on bus and is forced to retry;) 135.01 504.33 T
(Allocate RAC entry; Send Uncached Read Req) 135.01 494.33 T
(\0501\051 to) 325.14 494.33 T
(Home.) 135.01 484.33 T
(\245) 126.01 472.33 T
(Main memory supplies data for Uncached Read) 135.01 472.33 T
(Reply \0502\051; Directory entry unchanged.) 135.01 462.33 T
(\245) 126.01 450.33 T
(IO repeats DMA read and RAC supplies data.) 135.01 450.33 T
287.73 433.24 117.01 433.24 2 L
V
N
(e\051 Remote Request to Dirty-Remote Block) 117.01 434.33 T
(\245) 126.01 422.33 T
(IO issues DMA read on bus and is forced to retry;) 135.01 422.33 T
(Allocate RAC entry; Send Uncached Read Req) 135.01 412.33 T
(\0501\051 to) 325.14 412.33 T
(Home.) 135.01 402.33 T
(\245) 126.01 390.33 T
(Home forwards request to Dirty Cluster \0502\051.) 135.01 390.33 T
(\245) 126.01 378.33 T
(Dirty Cache supplies data and stays in dirty state;) 135.01 378.33 T
-0.17 (Dirty cluster sends Uncached Read Reply) 135.01 368.33 P
-0.17 (\0503\051 to Local) 301.82 368.33 P
(cluster) 135.01 358.33 T
(.) 161.1 358.33 T
(\245) 126.01 346.33 T
(IO repeats DMA read and RAC supplies data.) 135.01 346.33 T
7 X
90 450 13.5 13.43 390.51 681.57 G
0.5 H
0 X
90 450 13.5 13.43 390.51 681.57 A
446.22 601.86 456.99 607.15 450.66 596.95 448.44 599.4 4 Y
V
394.01 607.14 M
 409.92 589.14 425.99 590.37 443.75 596.82 D
 445.46 597.44 447.02 598.34 448.47 599.39 D
N
404.8 639.52 393.99 634.3 400.39 644.45 402.59 641.98 4 Y
3 X
V
457.01 634.14 M
 441.1 652.14 425.03 650.91 407.27 644.47 D
 405.59 643.86 404.06 642.99 402.62 641.98 D
1 H
N
1 18 Q
0 X
(H) 383.51 675.54 T
7 X
90 450 13.5 13.43 389.51 620.57 G
0.5 H
0 X
90 450 13.5 13.43 389.51 620.57 A
(H) 382.51 614.54 T
7 X
90 450 13.5 13.43 461.51 620.57 G
0 X
90 450 13.5 13.43 461.51 620.57 A
(D) 455.01 614.54 T
7 X
90 450 9 9 423.86 592.71 G
1 12 Q
0 X
(1) 420.86 588.69 T
7 X
90 450 9 6.5 423.01 647.64 G
0 X
(2) 420.01 643.97 T
7 X
90 450 13.5 13.43 392.51 542.43 G
0 X
90 450 13.5 13.43 392.51 542.43 A
1 18 Q
(L) 386.51 536.4 T
449.22 466.15 459.99 471.44 453.66 461.25 451.44 463.7 4 Y
V
397.01 471.43 M
 412.92 453.43 428.99 454.66 446.75 461.1 D
 448.46 461.72 450.02 462.62 451.47 463.68 D
N
407.8 503.81 397 498.59 403.39 508.74 405.6 506.27 4 Y
3 X
V
460.01 498.43 M
 444.1 516.43 428.03 515.2 410.27 508.75 D
 408.59 508.14 407.06 507.28 405.62 506.27 D
1 H
N
7 X
90 450 13.5 13.43 392.51 484.86 G
0.5 H
0 X
90 450 13.5 13.43 392.51 484.86 A
(L) 386.51 478.83 T
7 X
90 450 13.5 13.43 464.51 484.86 G
0 X
90 450 13.5 13.43 464.51 484.86 A
(H) 457.51 478.83 T
7 X
90 450 9 9 426.86 457 G
1 12 Q
0 X
(1) 423.86 452.98 T
7 X
90 450 9 6.5 426.01 510.93 G
0 X
(2) 423.01 507.26 T
452.97 359.27 464.82 361.13 455.75 353.27 454.36 356.27 4 Y
V
388.01 357.95 M
 411.51 345.28 424.84 347.78 438.17 351.94 D
 441.76 353.07 448.44 354.46 454.38 356.27 D
N
393.47 388.57 385.66 379.46 387.45 391.32 390.46 389.95 4 Y
3 X
V
415.01 420.95 M
 404.25 413.78 396.88 403.06 390.45 389.93 D
1 H
N
7 X
90 450 13.5 13.43 383.51 367.81 G
0.5 H
0 X
90 450 13.5 13.43 383.51 367.81 A
1 18 Q
(L) 377.51 361.78 T
7 X
90 450 13.5 13.43 474.34 367.81 G
0 X
90 450 13.5 13.43 474.34 367.81 A
(H) 467.34 361.78 T
7 X
90 450 9 9 425.36 356.29 G
1 12 Q
0 X
(1) 422.36 352.27 T
7 X
90 450 9 6.5 401.01 403.45 G
0 X
(3) 398.01 399.78 T
7 X
90 450 13.5 13.43 428.51 425.52 G
0 X
90 450 13.5 13.43 428.51 425.52 A
1 18 Q
(D) 422.01 419.49 T
453.89 414.44 443.83 420.96 455.82 420.76 454.85 417.6 4 Y
V
478.18 380.28 M
 479.51 391.21 468.87 409.94 454.88 417.59 D
1 H
N
7 X
90 450 9 6.5 472.34 404.95 G
1 12 Q
0 X
(2) 469.34 401.28 T
107.01 718 541.01 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
108 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "49" 22
%%Page: "50" 22
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(50) 72 42.62 T
(3.2) 426.72 42.62 T
(Coherence Protocol) 440.71 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
72 72 504 720 C
72 81 504 720 C
73.01 99 506.01 118 R
7 X
0 K
V
73.01 110.01 504 118 C
73.01 115.98 541.01 115.98 2 L
0.5 H
0 Z
0 X
0 K
N
72 81 504 720 C
1 10 Q
0 X
0 K
(FIGURE) 76.61 103.34 T
(3-8.  DMA/update write r) 117.96 103.34 T
(equest \337ows.) 226.32 103.34 T
409.84 324.84 M
 389.84 319.01 369.67 312.1 362.01 294.17 D
1 H
2 Z
9 X
N
403.18 329.83 M
 387.34 322.33 369.17 310.93 361.51 293 D
N
426.97 320.04 423.49 331.52 432.53 323.63 429.75 321.83 4 Y
0 X
V
442.34 292.33 M
 433.79 305.48 435.21 311.27 429.72 321.81 D
0 Z
N
7 X
90 450 13.5 13.43 412.01 335.41 G
0.5 H
0 X
90 450 13.5 13.43 412.01 335.41 A
1 18 Q
(S) 407.01 329.38 T
7 X
90 450 13.5 13.43 403.01 335.41 G
0 X
90 450 13.5 13.43 403.01 335.41 A
(S) 398.01 329.38 T
365.52 647.63 355.33 641.34 360.64 652.07 363.08 649.85 4 Y
9 X
V
424.34 651.38 M
 408.43 669.38 396.44 671.11 378.67 664.67 D
 375.32 663.45 368.64 656.09 363.11 649.84 D
1 H
N
423.68 641.33 M
 414.51 649.67 405.34 673 380.34 663 D
 375.04 660.87 361.18 650.5 355.01 641.67 D
2 Z
N
425.34 628.83 M
 407.01 649.67 404.51 662.17 385.34 661.33 D
 379.63 661.09 360.84 650 354.68 641.17 D
N
7 X
90 450 13.5 13.43 435.17 627.25 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 435.17 627.25 A
(S) 430.17 621.22 T
79.67 126 313.67 709 R
7 X
V
262.59 701.24 79.67 701.24 2 L
0 X
V
0.49 H
N
0 10 Q
(a\051 Home Request to Uncached-Remote Block) 79.67 702.33 T
(\245) 88.67 690.33 T
(IO issues DMA write on bus updating main memory) 97.67 690.33 T
(and local caches; Directory entry unchanged.) 97.67 680.33 T
250.95 663.24 79.67 663.24 2 L
V
N
(b\051 Home Request to Shared-Remote Block) 79.67 664.33 T
(\245) 88.67 652.33 T
(IO issues DMA write on bus updating main memory) 97.67 652.33 T
(and local caches. Allocate RAC entry; Send Update) 97.67 642.33 T
(Req) 97.67 632.33 T
(\0501\051 to all shared clusters.) 114.61 632.33 T
(\245) 88.67 620.33 T
(PCPUs issue updates on shared clusters;) 97.67 620.33 T
(Reply with Update Ack Replies) 97.67 610.33 T
(\0502\051.) 225.64 610.33 T
(\245) 88.67 598.33 T
(Deallocate RAC entry after all Ack\325) 97.67 598.33 T
(s received.) 241.73 598.33 T
243.73 581.24 79.67 581.24 2 L
V
N
(c\051 Home Request to Dirty-Remote Block) 79.67 582.33 T
(\245) 88.67 570.33 T
(IO issues DMA write on bus; Allocate RAC entry;) 97.67 570.33 T
(Send DMA W) 97.67 560.33 T
(rite Req) 155.01 560.33 T
(\0501\051 to Dirty cluster) 187.76 560.33 T
(.) 261.88 560.33 T
(\245) 88.67 548.33 T
(DMA W) 97.67 548.33 T
(rite issued in dirty cluster;) 132.52 548.33 T
(Dirty cache updated;) 97.67 538.33 T
(Dirty cluster sends DMA W) 97.67 528.33 T
(rite Ack) 209.97 528.33 T
(\0502\051 to Home.) 243.27 528.33 T
(\245) 88.67 516.33 T
(Deallocate RAC entry when Ack received.) 97.67 516.33 T
258.45 463.24 79.67 463.24 2 L
V
N
(d\051 Remote Request Satis\336ed by Local Cache) 79.67 464.33 T
(\245) 88.67 452.33 T
(IO issues DMA write on bus updating local dirty) 97.67 452.33 T
(cache.) 97.67 442.33 T
269.26 425.24 79.67 425.24 2 L
V
N
(e\051 Remote Request to Uncached-Remote Block) 79.67 426.33 T
(\245) 88.67 414.33 T
(IO issues DMA write on bus; Allocate RAC entry;) 97.67 414.33 T
(Send DMA W) 97.67 404.33 T
(rite Req) 155.01 404.33 T
(\0501\051 to Home.) 187.76 404.33 T
(\245) 88.67 392.33 T
(DMA W) 97.67 392.33 T
(rite in Home updates main memory;) 132.52 392.33 T
(DMA W) 97.67 382.33 T
(rite Ack) 132.52 382.33 T
(\0502\051 sent to Local cluster) 165.83 382.33 T
(.) 260.2 382.33 T
(\245) 88.67 370.33 T
(Deallocate RAC entry when Ack received.) 97.67 370.33 T
(\245) 88.67 358.33 T
255.95 341.24 79.67 341.24 2 L
V
N
(f\051 Remote Request to Shared-Remote Block) 79.67 342.33 T
(\245) 88.67 330.33 T
(IO issues DMA write on bus; Allocate RAC entry;) 97.67 330.33 T
(Send DMA W) 97.67 320.33 T
(rite Req) 155.01 320.33 T
(\0501\051 to Home.) 187.76 320.33 T
(\245) 88.67 308.33 T
(DMA W) 97.67 308.33 T
(rite in Home updates main memory;) 132.52 308.33 T
(DMA W) 97.67 298.33 T
(rite Ack) 132.52 298.33 T
(\0502a\051 sent to Local cluster and) 165.83 298.33 T
(Update Req) 97.67 288.33 T
(\0502b\051 sent to Shared clusters.) 145.97 288.33 T
(\245) 88.67 276.33 T
(PCPUs issue updates on shared clusters;) 97.67 276.33 T
(Reply with Update Ack Reply) 97.67 266.33 T
(\0502\051.) 219.54 266.33 T
(\245) 88.67 254.33 T
(Deallocate RAC entry after all Ack\325) 97.67 254.33 T
(s received.) 241.73 254.33 T
(\245) 88.67 242.33 T
250.96 225.24 79.67 225.24 2 L
V
N
(g\051 Remote Request to Dirty-Remote Block) 79.67 226.33 T
(\245) 88.67 214.33 T
(IO issues DMA write on bus; Allocate RAC entry;) 97.67 214.33 T
(Send DMA W) 97.67 204.33 T
(rite Req) 155.01 204.33 T
(\0501\051 to Home.) 187.76 204.33 T
(\245) 88.67 192.33 T
(Home forwards DMA W) 97.67 192.33 T
(rite Req to Dirty cluster) 197.47 192.33 T
(\0502\051.) 293.24 192.33 T
(\245) 88.67 180.33 T
(DMA W) 97.67 180.33 T
(rite issued in dirty cluster;) 132.52 180.33 T
(Dirty cache updated;) 97.67 170.33 T
(Dirty cluster sends DMA W) 97.67 160.33 T
(rite Ack) 209.97 160.33 T
(\0502\051 to Local clus-) 243.27 160.33 T
(ter) 97.67 150.33 T
(.) 107.67 150.33 T
(\245) 88.67 138.33 T
(Deallocate RAC entry when Ack received.) 97.67 138.33 T
7 X
90 450 13.5 13.43 354.17 693.57 G
0.5 H
0 X
90 450 13.5 13.43 354.17 693.57 A
413.22 529.15 423.99 534.43 417.66 524.24 415.44 526.7 4 Y
V
361.01 534.43 M
 376.92 516.43 392.99 517.66 410.75 524.1 D
 412.46 524.72 414.02 525.62 415.47 526.68 D
N
371.8 566.8 361 561.59 367.39 571.74 369.6 569.27 4 Y
10 X
V
424.01 561.43 M
 408.1 579.43 392.03 578.2 374.27 571.75 D
 372.59 571.14 371.06 570.28 369.62 569.27 D
1 H
N
1 18 Q
0 X
(H) 347.17 687.54 T
7 X
90 450 13.5 13.43 356.51 547.86 G
0.5 H
0 X
90 450 13.5 13.43 356.51 547.86 A
(H) 349.51 541.83 T
7 X
90 450 13.5 13.43 428.51 547.86 G
0 X
90 450 13.5 13.43 428.51 547.86 A
(D) 422.01 541.83 T
7 X
90 450 9 9 390.86 520 G
1 12 Q
0 X
(1) 387.86 515.98 T
7 X
90 450 9 6.5 388.01 573.5 G
0 X
(2) 385.01 569.83 T
7 X
90 450 13.5 13.43 356.51 459.4 G
0 X
90 450 13.5 13.43 356.51 459.4 A
1 18 Q
(L) 350.51 453.37 T
415.56 382.99 426.33 388.27 419.99 378.09 417.77 380.54 4 Y
V
363.34 388.26 M
 379.25 370.26 395.32 371.49 413.08 377.94 D
 414.8 378.56 416.35 379.46 417.81 380.51 D
N
374.13 420.65 363.32 415.43 369.72 425.58 371.93 423.11 4 Y
9 X
V
426.34 415.26 M
 410.43 433.26 394.36 432.03 376.6 425.59 D
 374.92 424.98 373.39 424.11 371.96 423.1 D
1 H
N
7 X
90 450 13.5 13.43 358.84 401.69 G
0.5 H
0 X
90 450 13.5 13.43 358.84 401.69 A
(L) 352.84 395.66 T
7 X
90 450 13.5 13.43 430.84 401.69 G
0 X
90 450 13.5 13.43 430.84 401.69 A
(H) 423.84 395.66 T
7 X
90 450 9 9 393.2 373.83 G
1 12 Q
0 X
(1) 390.2 369.81 T
7 X
90 450 9 6.5 392.34 427.76 G
0 X
(2) 389.34 424.09 T
426.92 149.02 437.82 154.03 431.23 144 429.07 146.51 4 Y
V
361.01 150.84 M
 380.18 136.67 395.18 135 413.51 138.33 D
 418.57 139.26 424.27 142.8 429.09 146.48 D
N
366.47 181.46 358.67 172.35 360.45 184.21 363.46 182.84 4 Y
9 X
V
388.01 213.84 M
 377.25 206.67 369.88 195.95 363.45 182.83 D
1 H
N
7 X
90 450 13.5 13.43 356.51 160.7 G
0.5 H
0 X
90 450 13.5 13.43 356.51 160.7 A
1 18 Q
(L) 350.51 154.67 T
7 X
90 450 13.5 13.43 447.34 160.7 G
0 X
90 450 13.5 13.43 447.34 160.7 A
(H) 440.34 154.67 T
7 X
90 450 9 9 397.53 144 G
1 12 Q
0 X
(1) 394.53 139.98 T
7 X
90 450 9 6.5 375.67 200.84 G
0 X
(3) 372.67 197.17 T
7 X
90 450 13.5 13.43 401.51 218.41 G
0 X
90 450 13.5 13.43 401.51 218.41 A
1 18 Q
(D) 395.01 212.38 T
425.33 213.22 415.33 219.85 427.32 219.53 426.32 216.37 4 Y
V
451.18 173.17 M
 452.51 187.5 440.81 208.18 426.35 216.35 D
1 H
N
7 X
90 450 9 6.5 445.34 197.84 G
1 12 Q
0 X
(2) 442.34 194.17 T
415.72 611.74 426.66 616.67 420 606.69 417.86 609.21 4 Y
V
362.01 615.5 M
 377.92 597.5 390.66 596.91 408.42 603.35 D
 411.05 604.31 414.52 606.64 417.85 609.21 D
0.5 H
N
7 X
90 450 13.5 13.43 354.67 627.81 G
0 X
90 450 13.5 13.43 354.67 627.81 A
1 18 Q
(H) 347.67 621.78 T
7 X
90 450 13.5 13.43 435.17 636.1 G
0 X
90 450 13.5 13.43 435.17 636.1 A
(S) 430.17 630.07 T
7 X
90 450 13.5 13.43 435.17 645.1 G
0 X
90 450 13.5 13.43 435.17 645.1 A
(S) 430.17 639.07 T
416.76 620.91 426.67 627.67 421.85 616.68 419.3 618.79 4 Y
V
362.01 615.5 M
 386.01 601.49 395.67 600.67 411.67 610.67 D
 414.05 612.17 416.74 615.42 419.35 618.78 D
N
416.34 632.11 425.66 639.67 421.76 628.32 419.05 630.21 4 Y
V
362.67 616.67 M
 391.67 607.66 395.67 610.67 411.67 620.67 D
 414.14 622.22 416.68 626.17 419.11 630.16 D
N
7 X
90 450 9 9 391.86 604.95 G
1 12 Q
0 X
(1) 388.86 600.93 T
7 X
90 450 9 6.5 384.01 662.21 G
0 X
(2) 381.01 658.54 T
7 X
90 450 9 6.5 410.01 189.84 G
428.42 266.01 439.33 271.02 432.74 260.99 430.58 263.5 4 Y
0 X
V
362.51 267.84 M
 381.68 253.67 396.67 252 415.01 255.33 D
 420.07 256.26 425.77 259.8 430.59 263.48 D
N
367.91 298.52 360.16 289.35 361.88 301.23 364.89 299.87 4 Y
9 X
V
384.01 327.33 M
 374.92 317.59 370.18 310.84 364.9 299.85 D
1 H
N
7 X
90 450 13.5 13.43 358.01 277.7 G
0.5 H
0 X
90 450 13.5 13.43 358.01 277.7 A
1 18 Q
(L) 352.01 271.67 T
7 X
90 450 13.5 13.43 448.84 277.7 G
0 X
90 450 13.5 13.43 448.84 277.7 A
(H) 441.84 271.67 T
7 X
90 450 9 9 399.34 251.84 G
1 12 Q
0 X
(1) 396.34 247.82 T
7 X
90 450 13.5 13.43 394.01 335.41 G
0 X
90 450 13.5 13.43 394.01 335.41 A
1 18 Q
(S) 389.01 329.38 T
409 318.13 403.99 329.02 414.01 322.44 411.5 320.29 4 Y
V
443.18 290.67 M
 429.83 307.35 421.19 310.56 411.51 320.26 D
1 H
N
382.38 274.54 370.84 277.83 382.37 281.15 382.37 277.85 4 Y
2 X
V
435.84 277 M
 409.9 277.68 398.5 277.81 382.39 277.83 D
N
7 X
90 450 9 6.5 403.01 276.94 G
1 12 Q
0 X
(2a) 397.01 273.27 T
417.97 320.78 413.83 332.02 423.3 324.68 420.63 322.73 4 Y
V
442.34 292.33 M
 432.32 305.03 428.51 311.51 420.61 322.69 D
N
7 X
90 450 9 6.5 434.34 304.01 G
0 X
(2b) 428.01 300.34 T
7 X
90 450 9 6.5 374.67 311.18 G
0 X
(3) 371.67 307.51 T
73.01 718 507.01 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
72 72 504 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "50" 23
%%Page: "51" 23
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(51) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
-0.18 (delivery between any two nodes within a single mesh. In-order delivery insures that multi-) 108 712 P
-0.19 (ple update writes do not leave dif) 108 696 P
-0.19 (ferent values within the caches of dif) 266.51 696 P
-0.19 (ferent clusters or the) 442.33 696 P
(memory home.) 108 680 T
1 14 Q
(3.3  Synchr) 108 644.67 T
(onization Pr) 174.99 644.67 T
(otocol) 248.2 644.67 T
0 12 Q
4.84 (Synchronization variables have dif) 108 622 P
4.84 (ferent access and sharing patterns than normal) 289.17 622 P
0 (variables) 108 606 P
0 ([W) 153.29 606 P
0 (eG89a]. In particular) 167.64 606 P
0 (, synchronization is often associated with inter) 267.41 606 P
0 (-processor) 490.05 606 P
1.27 (communication, and an invalidation-based protocol is not likely to be optimal. Further-) 108 590 P
0.16 (more, if lock operations are recognized by the hardware, then the higher semantic content) 108 574 P
0.94 (of these operations can be used to increase performance. The DASH prototype supports) 108 558 P
1.43 (four dif) 108 542 P
1.43 (ferent synchronization operations. The \336rst set support ef) 145.52 542 P
1.43 (\336cient spin locks. The) 429.77 542 P
0.72 (second set perform atomic Fetch&Op operations. The third is the update write operation) 108 526 P
0.81 (outlined in the previous section, and the \336nal set of operations are explicit fences which) 108 510 P
(control memory consistency) 108 494 T
(.) 243.13 494 T
1 F
(3.3.1  Queue-Based Locks) 108 460 T
0 F
1.1 (Spin locks provide the basis for low level protection of mutual exclusion regions. Most) 108 438 P
2.33 (cache-coherent systems integrate support for spin locks with the caching mechanism.) 108 422 P
0.46 (W) 108 406 P
0.46 (aiting processors spin in their cache on a locked value of the lock and atomically read-) 118.36 406 P
1.74 (modify-write the lock to acquire it. DASH supports ef) 108 390 P
1.74 (\336cient spin waiting with queue-) 381.15 390 P
0.17 (based locks. Queue-based locks use the pointer information in the directory and hardware) 108 374 P
1.34 (recognizable lock and unlock operations to improve performance. When processors are) 108 358 P
0.53 (spinning in their cache, an unlock operation causes invalidations only in a single waiting) 108 342 P
-0.08 (cluster) 108 326 P
-0.08 (. Subsequently) 139.32 326 P
-0.08 (, a processor in the) 209.08 326 P
2 F
-0.08 (grant) 301.92 326 P
0 F
-0.08 ( cluster can acquire the lock with a local bus) 327.92 326 P
0.22 (operation. This reduces the latency in passing the lock between processors and eliminates) 108 310 P
0.04 (the unnecessary traf) 108 294 P
0.04 (\336c of invalidating all the waiting clusters. Furthermore, RAC mer) 203.77 294 P
0.04 (ging) 518.67 294 P
0.33 (implies that even when multiple processors within the grant cluster re-queue for the lock,) 108 278 P
1.2 (only a single remote request is sent to the home. In addition, queue-based locks do not) 108 262 P
1.77 (require exclusive ownership to acquire a lock \050i.e. a complete test&set\051, thus no extra) 108 246 P
(invalidations are generated when the processor acquires a lock.) 108 230 T
1.1 (Locks in the prototype reside in an alternate memory space, separate from normal vari-) 108 206 P
0.11 (ables. Separating locks is required because the MIPS R3000 architecture does not support) 108 190 P
-0.21 (any atomic read-modify-write operations. W) 108 174 P
-0.21 (ithin the address range of locks, only one lock) 320.84 174 P
0.21 (is provided per memory block and any read of the block is an attempt to acquire the lock.) 108 158 P
-0.21 (The processor caches are not capable of atomic updates, so the atomic action is done at the) 108 142 P
-0 (memory site. Storage of locks is actually done in the corresponding directory entries. This) 108 126 P
0.97 (takes advantage of the normal read-modify-write accesses used by the directory and the) 108 110 P
0.71 (fact that only one lock is supported per cache line. When a locked lock is read, a shared) 108 94 P
1.27 (copy is brought into the processor) 108 78 P
1.27 (\325) 277.7 78 P
1.27 (s cache and the processor receives the locked value.) 281.04 78 P
FMENDPAGE
%%EndPage: "51" 24
%%Page: "52" 24
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(52) 72 42.62 T
(3.3) 408.5 42.62 T
(Synchronization Protocol) 422.49 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
0.78 (Spin waiting on the lock then occurs locally in the processor) 72 289 P
0.78 (\325) 370.08 289 P
0.78 (s cache. If free, the lock is) 373.42 289 P
-0.06 (atomically updated in memory) 72 273 P
-0.06 (, and the unlocked value is returned to the processor) 217.93 273 P
-0.06 (. A spe-) 466.49 273 P
(cial unlock reply inhibits the processor from caching the unlocked value.) 72 257 T
0.36 (Lock release is done through an alternate memory address space which bypasses the pro-) 72 233 P
0.8 (cessor caches. The \337ow of remote unlocks is shown in Figure 3-9. Unlocks in the home) 72 217 P
0.65 (are similar) 72 201 P
0.65 (, but avoid the extra request and reply between the local and home cluster) 123.13 201 P
0.65 (. As) 484.02 201 P
0.14 (shown in the \336gure, there are two basic types of unlocks which dif) 72 185 P
0.14 (fer only when there are) 392.22 185 P
0.02 (waiting processors. The \336rst type of unlock, the) 72 169 P
2 F
0.02 (granting unlock) 304.03 169 P
0 F
0.02 (, treats the directory entry) 380.34 169 P
0.53 (as a queue. The grant cluster is chosen at random based on the priority set by a free-run-) 72 153 P
2.07 (ning hardware counter) 72 137 P
2.07 (. Granting unlocks are usually preferred because they minimize) 183.38 137 P
0.78 (latency and traf) 72 121 P
0.78 (\336c. The second unlock type is the more typical) 147.95 121 P
2 F
0.78 (invalidating unlock) 382.17 121 P
0 F
0.78 (. This) 475.9 121 P
0.28 (type of unlock is more ef) 72 105 P
0.28 (\336cient if processors do not spin waiting on the lock or processes) 193.44 105 P
0.89 (migrate while spinning. In these cases, the granting lock will be less ef) 72 89 P
0.89 (\336cient because it) 421.61 89 P
72 72 504 720 C
72 297 504 720 C
72 324 505 343 R
7 X
0 K
V
72 335.01 504 343 C
72 340.98 540 340.98 2 L
0.5 H
0 Z
0 X
0 K
N
72 297 504 720 C
1 10 Q
0 X
0 K
(FIGURE) 75.6 328.34 T
(3-9.  Remote unlock r) 116.96 328.34 T
(equest \337ows.) 208.66 328.34 T
7 X
90 450 13.5 13.43 409.5 446.98 G
0.5 H
0 Z
0 X
90 450 13.5 13.43 409.5 446.98 A
1 18 Q
(Q) 402.5 440.95 T
7 X
90 450 13.5 13.43 400.5 446.98 G
0 X
90 450 13.5 13.43 400.5 446.98 A
(Q) 393.5 440.95 T
366.72 547.99 358.08 539.66 360.99 551.3 363.85 549.65 4 Y
10 X
V
399.75 576.49 M
 387.09 570.49 372.93 561.99 363.85 549.66 D
1 H
N
7 X
90 450 13.5 13.43 433.58 582.07 G
0.5 H
0 X
90 450 13.5 13.43 433.58 582.07 A
(Q) 426.58 576.04 T
7 X
90 450 13.5 13.43 399.58 582.07 G
0 X
90 450 13.5 13.43 399.58 582.07 A
(Q) 392.58 576.04 T
79.08 351 316.08 709 R
7 X
V
287.84 701.24 79.08 701.24 2 L
0 X
V
0.49 H
N
0 10 Q
(a\051 Remote Granting/Invalidating Unlock to Remote) 79.08 702.33 T
191.73 689.24 97.08 689.24 2 L
V
N
(Unlocked/Locked Lock) 97.08 690.33 T
(\245) 88.08 678.33 T
(CPU issues unlock on bus; Allocate RAC entry;) 97.08 678.33 T
(Send Granting Unlock Req to Home) 97.08 668.33 T
(\0501\051.) 243.65 668.33 T
(\245) 88.08 656.33 T
(Granting / Inv Unlock in Home unlocks lock;) 97.08 656.33 T
(Send Unlock Ack to Local cluster) 97.08 646.33 T
(\0502\051.) 233.65 646.33 T
(\245) 88.08 634.33 T
(Deallocate RAC entry when Ack received.) 97.08 634.33 T
291.44 617.24 79.08 617.24 2 L
V
N
(b\051 Remote Granting Unlock to Remote Queued Lock) 79.08 618.33 T
(\245) 88.08 606.33 T
(CPU issues unlock on bus; Allocate RAC entry;) 97.08 606.33 T
(Send Granting Unlock Req to Home) 97.08 596.33 T
(\0501\051.) 243.65 596.33 T
(\245) 88.08 584.33 T
(Granting Unlock causes a Lock Grant) 97.08 584.33 T
(\0502\051 to be sent to) 249.18 584.33 T
(one of Queued clusters chosen at random;) 97.08 574.33 T
(Grant cluster is removed from the directory queue.) 97.08 564.33 T
(\245) 88.08 552.33 T
(PCPU on Grant cluster issues the lock grant;) 97.08 552.33 T
(Cached value of lock invalidated and granted lock) 97.08 542.33 T
(placed in RAC.) 97.08 532.33 T
(\245) 88.08 520.33 T
(First processor to read the lock receives unlocked) 97.08 520.33 T
-0.25 (value, but caching inhibited; An Unlock Ack Reply) 97.08 510.33 P
-0.25 (\0503\051) 302.18 510.33 P
(is sent to home. Subsequent requests for the lock by) 97.08 500.33 T
(other processors will re-queue the Grant cluster in the) 97.08 490.33 T
(directory) 97.08 480.33 T
(.) 132.51 480.33 T
(\245) 88.08 468.33 T
(Deallocate RAC entry when Ack received.) 97.08 468.33 T
303.65 451.24 79.08 451.24 2 L
V
N
(c\051 Remote Invalidating Unlock to Remote Queued Lock) 79.08 452.33 T
(\245) 88.08 440.33 T
(CPU issues unlock on bus; Allocate RAC entry;) 97.08 440.33 T
(Send Invalidating Unlock Req to Home) 97.08 430.33 T
(\0501\051.) 256.43 430.33 T
(\245) 88.08 418.33 T
(Invalidating Unlock in Home causes Invalidation) 97.08 418.33 T
(Req\325) 97.08 408.33 T
(s \0502a\051 to be sent to all queued clusters and Invali-) 115.96 408.33 T
(dation Ack Reply \0502b\051 to be sent to Local cluster;) 97.08 398.33 T
(Lock is changed to Unlocked State.) 97.08 388.33 T
(\245) 88.08 376.33 T
(PCPUs issue invalidations on queued clusters; these) 97.08 376.33 T
(clusters reply with Invalidation Ack Replies \0503\051.) 97.08 366.33 T
(\245) 88.08 354.33 T
(Deallocate RAC entry after all Ack\325) 97.08 354.33 T
(s received.) 241.13 354.33 T
409.3 643.88 420.07 649.17 413.73 638.98 411.52 641.43 4 Y
V
357.08 649.17 M
 372.99 631.17 389.06 632.4 406.83 638.84 D
 408.54 639.46 410.09 640.36 411.55 641.42 D
0.5 H
N
367.87 681.54 357.07 676.32 363.46 686.47 365.67 684.01 4 Y
9 X
V
420.08 676.17 M
 404.18 694.17 388.1 692.93 370.34 686.49 D
 368.66 685.88 367.13 685.02 365.7 684.01 D
1 H
N
7 X
90 450 13.5 13.43 352.58 662.6 G
0.5 H
0 X
90 450 13.5 13.43 352.58 662.6 A
1 18 Q
(L) 346.58 656.57 T
7 X
90 450 13.5 13.43 424.58 662.6 G
0 X
90 450 13.5 13.43 424.58 662.6 A
(H) 417.58 656.57 T
7 X
90 450 9 9 386.11 634.74 G
1 12 Q
0 X
(1) 383.11 630.72 T
7 X
90 450 9 6.5 386.08 688.67 G
0 X
(2) 383.08 685 T
425 512.65 435.9 517.67 429.31 507.64 427.15 510.14 4 Y
V
359.08 514.5 M
 378.25 500.32 393.25 498.66 411.58 501.99 D
 416.65 502.92 422.35 506.45 427.17 510.14 D
N
7 X
90 450 13.5 13.43 354.58 524.36 G
0 X
90 450 13.5 13.43 354.58 524.36 A
1 18 Q
(L) 348.58 518.33 T
7 X
90 450 13.5 13.43 445.42 524.36 G
0 X
90 450 13.5 13.43 445.42 524.36 A
(H) 438.42 518.33 T
7 X
90 450 9 9 394.61 501.67 G
1 12 Q
0 X
(1) 391.61 497.65 T
7 X
90 450 13.5 13.43 364.75 582.07 G
0 X
90 450 13.5 13.43 364.75 582.07 A
1 18 Q
(Q) 357.75 576.04 T
413.62 564.39 408.73 575.34 418.68 568.64 416.15 566.52 4 Y
V
438.92 538.99 M
 428.41 550.51 424.36 556.44 416.16 566.5 D
1 H
N
7 X
90 450 9 6.5 430.92 550.67 G
1 12 Q
0 X
(2) 427.92 547 T
7 X
90 450 9 6.92 380.42 562.42 G
0 X
(3) 377.42 558.69 T
407.33 436.4 M
 387.33 430.57 367.17 423.66 359.5 405.74 D
2 Z
9 X
N
400.67 441.4 M
 384.83 433.9 366.67 422.49 359 404.57 D
N
424.46 431.6 420.98 443.09 430.02 435.19 427.24 433.4 4 Y
0 X
V
439.83 403.9 M
 431.29 417.05 432.7 422.84 427.21 433.38 D
0 Z
N
425.91 377.57 436.81 382.59 430.22 372.56 428.07 375.07 4 Y
V
360 379.41 M
 379.17 365.23 394.17 363.57 412.5 366.9 D
 417.56 367.83 423.26 371.37 428.08 375.05 D
0.5 H
N
365.41 410.07 357.65 400.92 359.38 412.79 362.39 411.43 4 Y
9 X
V
381.5 438.9 M
 372.41 429.16 367.67 422.41 362.39 411.42 D
1 H
N
7 X
90 450 13.5 13.43 355.5 389.27 G
0.5 H
0 X
90 450 13.5 13.43 355.5 389.27 A
1 18 Q
(L) 349.5 383.24 T
7 X
90 450 13.5 13.43 446.33 389.27 G
0 X
90 450 13.5 13.43 446.33 389.27 A
(H) 439.33 383.24 T
7 X
90 450 13.5 13.43 391.5 446.98 G
0 X
90 450 13.5 13.43 391.5 446.98 A
(Q) 384.5 440.95 T
406.5 429.69 401.49 440.58 411.51 434 409 431.84 4 Y
V
440.67 402.23 M
 427.32 418.92 418.68 422.13 409 431.82 D
1 H
N
379.87 386.11 368.33 389.4 379.86 392.72 379.86 389.41 4 Y
10 X
V
433.33 388.57 M
 407.39 389.25 395.99 389.38 379.88 389.4 D
N
7 X
90 450 9 6.5 400.5 388.51 G
1 12 Q
0 X
(2a) 394.5 384.84 T
415.45 432.34 411.31 443.59 420.79 436.24 418.12 434.29 4 Y
V
439.83 403.9 M
 429.81 416.6 426 423.08 418.1 434.26 D
N
7 X
90 450 9 6.5 431.83 415.58 G
0 X
(2b) 425.5 411.91 T
7 X
90 450 7.83 6.5 371 422.74 G
0 X
(3) 368 419.08 T
70 718 504 718 2 L
7 X
V
0.5 H
2 Z
0 X
N
7 X
90 450 9 9 396 376 G
0 X
(1) 393 371.98 T
72 72 504 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "52" 25
%%Page: "53" 25
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(53) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
0.08 (invalidates each cluster serially until the lock is re-acquired. The serial invalidation uses a) 108 712 P
0.86 (time-out of the grant which rejects it after approximately) 108 696 P
0.86 (8 \265sec. After the time-out, the) 392.16 696 P
1.09 (RCPU repeats the granting unlock on behalf of the releasing processor) 108 680 P
1.09 (, and this returns) 456.79 680 P
-0.15 (control of the lock to the home and causes a grant to a new cluster) 108 664 P
-0.15 (. Each grant eliminates a) 422.35 664 P
0.67 (single cluster from the directory queue, so a series of time-outs will eventually leave the) 108 648 P
1.57 (lock unlocked in memory and acknowledge the unlock operation. While correct, serial) 108 632 P
(invalidations with time-outs are much less ef) 108 616 T
(\336cient than a simple invalidating unlock.) 322.98 616 T
1 F
(3.3.2  Fetch&Op V) 108 582 T
(ariables) 203.17 582 T
0 F
1.35 (While spin locking is a very general mechanism, it does not remove the latency of the) 108 560 P
0.72 (memory system from serializing access to critical regions. This serialization can only be) 108 544 P
0.18 (signi\336cantly reduced if the mutual exclusion region is reduced to the time of a local oper-) 108 528 P
1.08 (ation. If the mutual exclusion region is contended by processors throughout the system,) 108 512 P
-0.19 (then restricting it to a local operation requires that the) 108 496 P
2 F
-0.19 (mutex) 366.59 496 P
0 F
-0.19 ( region be speci\336ed in a single) 395.23 496 P
-0.04 (remote operation. While it is dif) 108 480 P
-0.04 (\336cult to specify general mutual exclusion in a single oper-) 261.51 480 P
0.8 (ation, one useful set of operations are Fetch&Op primitives. These primitives have been) 108 464 P
0.38 (shown to be quite ef) 108 448 P
0.38 (fective in several common parallel algorithms) 206.58 448 P
0.38 ([FrG91]. For example,) 430.65 448 P
1.26 (Fetch&Op primitives can be used to build ef) 108 432 P
1.26 (\336cient distributed work queues and barrier) 330.16 432 P
(arrival counters.) 108 416 T
1.29 (The DASH prototype restricts its Fetch&Op primitives to simple Fetch&Increment and) 108 392 P
-0.25 (Fetch&Decrement operations. Only these operations are supported because it is dif) 108 376 P
-0.25 (\336cult to) 503.27 376 P
0.36 (provide the data operand for a more general Fetch&Op given a normal processor instruc-) 108 360 P
0.77 (tion set. The prototype maintains Fetch&Op variables in the same directory storage area) 108 344 P
0.07 (used for spin locks. One 16-bit Fetch&Op variable is available per cache block. Access to) 108 328 P
0.05 (these variables is uncached, and values are always returned from the home. The particular) 108 312 P
0.25 (Fetch&Op is speci\336ed by the word of) 108 296 P
0.25 (fset within the cache block. The \337ow for Fetch&Op) 289.84 296 P
0.28 (operations is very simple because there are only two cases. For access to local Fetch&Op) 108 280 P
2.63 (variables, the directory supplies the data to the processor directly over the MPBUS.) 108 264 P
0.69 (Access to remote variables follows the normal \337ow of a local bus cycle, remote request,) 108 248 P
-0.04 (home bus cycle, reply) 108 232 P
-0.04 (, and local bus repeat. The only exception for Fetch&Op variables is) 212.35 232 P
-0.22 (that the RAC cache index \050i.e. address\051 is based in part on the processor ID. Using the pro-) 108 216 P
0.51 (cessor) 108 200 P
0.51 (\325) 138.41 200 P
0.51 (s ID removes the interference that would otherwise occur between two Fetch&Op) 141.75 200 P
0.04 (accesses by dif) 108 184 P
0.04 (ferent processors in the same cluster to the same variable. Since Fetch&Op) 179.8 184 P
1.5 (requests cannot be mer) 108 168 P
1.5 (ged, allocating unique RAC entries insures that serialization for) 222.53 168 P
(Fetch&Op accesses is minimized.) 108 152 T
1 F
(3.3.3  Fence Operations) 108 118 T
0 F
0.52 (As discussed in Chapter 2, fence operations are useful in controlling the ordering of pro-) 108 96 P
0.03 (cessor accesses. In DASH, ordering is assured by delaying operations until previous oper-) 108 80 P
FMENDPAGE
%%EndPage: "53" 26
%%Page: "54" 26
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(54) 72 42.62 T
(3.4) 398.07 42.62 T
(Protocol General Exceptions) 412.07 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
2.06 (ations have completed. Unlock operations optionally include a write-fence which will) 72 712 P
-0.27 (delay the unlock until all previous writes have completed system-wide. These write-fences) 72 696 P
-0.09 (together with blocking processor loads insures that release consistency is supported by the) 72 680 P
(base hardware.) 72 664 T
-0.07 (If a stricter consistency model is required, explicit fence operations can be used. There are) 72 640 P
-0.02 (three types of fences. The \336rst is an explicit) 72 624 P
2 F
-0.02 (write-fence) 284.29 624 P
0 F
-0.02 (. A write-fence simply delays later) 338.25 624 P
0.3 (write operations until all RAC entries allocated for this processor \050usually pending writes) 72 608 P
0.36 (or invalidation acknowledgments\051 have completed. If the processor itself must be stalled,) 72 592 P
-0.05 (then a) 72 576 P
2 F
-0.05 (stall-fence) 103.88 576 P
0 F
-0.05 ( can follow the write-fence to create a) 153.84 576 P
2 F
-0.05 (full-fence) 337.96 576 P
0 F
-0.05 (. This operation stalls the) 383.26 576 P
(processor until all RAC entries for this processor have been eliminated.) 72 560 T
1 14 Q
(3.4) 72 524.67 T
(Pr) 96.49 524.67 T
(otocol General Exceptions) 111 524.67 T
0 12 Q
0.95 (In addition to the various request \337ows illustrated in the previous sections, there are six) 72 502 P
0.09 (exceptions that can occur while satisfying any request. The \336rst two are related to allocat-) 72 486 P
0.38 (ing a RAC buf) 72 470 P
0.38 (fer when a remote request is \336rst issued. The third and fourth occur due to) 143.23 470 P
1.06 (serialization constraints and the potential interleaving of requests. The \336fth exception is) 72 454 P
1.56 (the deadlock breaking mode discussed in Section 3.1.3, and the \336nal set of exceptions) 72 438 P
0.03 (occur when a hardware error is detected. These exceptions can occur for any of the opera-) 72 422 P
2.38 (tions discussed in the previous sections. Most exceptions cause delays in initiating a) 72 406 P
(request or force a request retry) 72 390 T
(.) 218.08 390 T
0.25 (The \336rst two exceptions occur when a remote request tries to allocate a RAC entry) 72 366 P
0.25 (. Since) 471.1 366 P
0.31 (the RAC is a cache, a bus request can con\337ict with an earlier request that is still pending.) 72 350 P
-0.06 (If the entry is in use for an access to a dif) 72 334 P
-0.06 (ferent cache block, then the new request) 268.62 334 P
2 F
-0.06 (con\337icts) 464.02 334 P
0 F
0.58 (with the old request and must be delayed. After the RAC entry is deallocated for its cur-) 72 318 P
-0.26 (rent use, the new request is allowed to retry) 72 302 P
-0.26 (. The second exception occurs if the RAC entry) 277.95 302 P
0.69 (is in use for a compatible reference to the same block by another processor) 72 286 P
0.69 (. In this case,) 438.98 286 P
0.19 (the new request is) 72 270 P
2 F
0.19 (mer) 162.01 270 P
0.19 (ged) 180.22 270 P
0 F
0.19 ( with the old request. Like a con\337ict, a mer) 197.53 270 P
0.19 (ged request does not) 405.18 270 P
0.78 (generate any outgoing requests. Unlike a con\337ict, however) 72 254 P
0.78 (, a mer) 359.09 254 P
0.78 (ged request is satis\336ed) 393.4 254 P
(along with the original request when the reply to the original is received.) 72 238 T
2.13 (T) 72 214 P
2.13 (wo additional exceptions arise from the potential for operations and their associated) 78.49 214 P
0.24 (inter) 72 198 P
0.24 (-cluster messages to be interleaved. In general, a request for a block that is held dirty) 93.74 198 P
0.13 (in a remote cluster can only satis\336ed by that cluster) 72 182 P
0.13 (. However) 318.7 182 P
0.13 (, if a request is forwarded to) 368.31 182 P
0.21 (a remote dirty cluster) 72 166 P
0.21 (, that cluster may not hold the block dirty when the message arrives.) 174.4 166 P
1.45 (It may have written it back to memory) 72 150 P
1.45 (, or some other request might have changed the) 265.57 150 P
0.09 (cache state of the block. In these cases the request will not \336nd the dirty block, and a neg-) 72 134 P
0.26 (ative acknowledge \050NAK\051 reply is sent to the requesting cluster) 72 118 P
0.26 (. Likewise, even if a clus-) 379.13 118 P
1.75 (ter does own a cache line, it may be unable to satisfy the request because of pending) 72 102 P
FMENDPAGE
%%EndPage: "54" 27
%%Page: "55" 27
612 792 0 FMBEGINPAGE
108 740.81 540 756 R
7 X
0 K
V
108 54 540 54 2 L
V
0.25 H
2 Z
0 X
N
108 36 540 47.95 R
7 X
V
0 8 Q
0 X
(DASH Prototype System) 108 42.62 T
(55) 532 42.62 T
108 72 540 720 R
7 X
V
0 12 Q
0 X
1.01 (operations on the block. In particular) 108 712 P
1.01 (, if invalidation acknowledgments are pending \050i.e.) 289.77 712 P
(busy RAC state\051, then the block cannot be released and a NAK is returned.) 108 696 T
1.74 (Another exception case, as mentioned in Section 3.1.3, results from the need to reject) 108 672 P
0.28 (incoming request messages due to deadlock avoidance. If the PCPU queue is blocking its) 108 656 P
-0.2 (incoming request network port, and the cluster) 108 640 P
-0.2 (\325) 330.74 640 P
-0.2 (s outgoing request port is also full, then the) 334.07 640 P
0.54 (requests at the head of the PCPU input FIFO will be rejected with NAK replies. As with) 108 624 P
(all NAK replies, this will force the issuing processor to retry its access.) 108 608 T
0.12 (The \336nal set of exceptions arise when there is an error detected in the system. The system) 108 584 P
0.63 (includes a variety of error checking mechanisms such as parity on the directory) 108 568 P
0.63 (, an error) 495.12 568 P
0.74 (correcting code on main memory) 108 552 P
0.74 (, network message length and command type checking,) 269.38 552 P
0.25 (illegal bus operation checking, and operation time-outs. Errors that arise in operations for) 108 536 P
0.22 (which the requesting processor is known \050e.g., uncorrectable memory errors\051 are returned) 108 520 P
1.33 (directly to the processor as bus errors. Errors for which the requesting processor is not) 108 504 P
-0.16 (known \050such as a corrupted network message\051 are dropped after setting an error register or) 108 488 P
-0.02 (error state in a RAC location. These type of errors generally result in a time-out error) 108 472 P
-0.02 (. The) 515.37 472 P
-0.14 (reply controller maintains a time-out counter on the number of RAC entries in use by each) 108 456 P
-0.18 (processor) 108 440 P
-0.18 (. If a processor has an allocation greater than zero, and the count does not change) 153.3 440 P
1.57 (for more than a time out period \050) 108 424 P
1.57 (25-50) 276.88 424 P
1.57 (milliseconds on the prototype\051, the processor) 307.85 424 P
1.57 (\325) 532 424 P
1.57 (s) 535.33 424 P
0.58 (arbitration mask is released and the processor is given a bus error on its next bus access.) 108 408 P
0.28 (Bus errors are fatal to the process that is currently running on the processor) 108 392 P
0.28 (, but the hard-) 471.88 392 P
0.27 (ware provides diagnostic paths that can be used to recover from the error if the fault does) 108 376 P
(not happen when running the OS kernel.) 108 360 T
1 14 Q
(3.5  Summary) 108 324.67 T
0 12 Q
1.02 (The DASH prototype has been key to our investigation of the design issues and perfor-) 108 302 P
3 (mance of a scalable single-address space machines. The prototype is a compromise) 108 286 P
1.36 (between an ideal DASH implementation and the desire to minimize development time.) 108 270 P
2.9 (While embodying the major scalability features of a lar) 108 254 P
2.9 (ger system, the prototype is) 396.14 254 P
1.1 (restricted to 64 processors. Using the 33) 108 238 P
1.1 (MHz MIPS R3000, this con\336guration still pro-) 308.49 238 P
1.59 (vides for up to 1.6) 108 222 P
1.59 (GIPS and 600) 203.97 222 P
1.59 (DP) 276.44 222 P
1.59 (MFLOPS of performance. This is a high level of) 293.76 222 P
0.13 (absolute performance, and one that is clearly not possible without a scalable memory sys-) 108 206 P
-0.1 (tem. The size is also lar) 108 190 P
-0.1 (ge enough to provide a base for the development and experimenta-) 220.55 190 P
(tion with software for lar) 108 174 T
(ge-scale shared-memory machines.) 227.69 174 T
1.86 (The prototype consists of a set of commercially available small-scale multiprocessors,) 108 150 P
0.9 (which are supplemented by a pair of directory and network boards. The system is inter-) 108 134 P
-0.1 (connected by a pair of wormhole-routed mesh networks that provide low latency and scal-) 108 118 P
3.27 (able bandwidth. The key state machines that execute the directory-based coherence) 108 102 P
1.18 (protocol are the directory and reply controllers. The directory controller interprets local) 108 86 P
FMENDPAGE
%%EndPage: "55" 28
%%Page: "56" 28
612 792 0 FMBEGINPAGE
72 36 504 47.95 R
7 X
0 K
V
0 8 Q
0 X
(56) 72 42.62 T
(3.5) 458.91 42.62 T
(Summary) 472.9 42.62 T
72 54 504 54 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 740.81 504 756 R
7 X
V
72 72 504 720 R
V
0 12 Q
0 X
0.45 (bus cycles and the directory state to determine the set of intercluster messages and direc-) 72 712 P
0.11 (tory updates that are necessary) 72 696 P
0.11 (. The reply controller uses the remote access cache to coor-) 218.85 696 P
(dinate the outstanding requests made by local processors.) 72 680 T
1.18 (The prototype coherence protocol is based on invalidations and writeback caching. The) 72 656 P
1.58 (basic read and write operations are optimized to reduce latency though local cache-to-) 72 640 P
1.6 (cache sharing and request forwarding. Alternative memory operations are supported to) 72 624 P
0.25 (help hide latency) 72 608 P
0.25 (. Prefetch operations can be used to request or transmit cache lines with-) 153.65 608 P
0.09 (out stalling the processor) 72 592 P
0.09 (. Uncached-read and update-write operations are useful for inter-) 191.88 592 P
2.21 (processor communications and can be integrated into support for I/O DMA accesses.) 72 576 P
2.33 (Another area for protocol optimization is synchronization references. DASH supports) 72 560 P
0.63 (queue-based locks which reduce the latency and traf) 72 544 P
0.63 (\336c associated with spin locks. Addi-) 326.96 544 P
0.54 (tionally) 72 528 P
0.54 (, support of simple Fetch&Op variables is used to reduce the serialization of syn-) 107.87 528 P
(chronization primitives.) 72 512 T
-0.19 (Overall, the prototype attempts to optimize a rich set of memory operations that execute in) 72 488 P
1.05 (a complex, distributed environment. Each operation can encounter a variety of dif) 72 472 P
1.05 (ferent) 476.03 472 P
0.53 (cache states, and exceptions can occur when these states dynamically change. While fur-) 72 456 P
0.55 (ther optimizations and operations are possible, the protocol is already complex and addi-) 72 440 P
3.17 (tional features would add still more complexity) 72 424 P
3.17 (. Furthermore, the prototype already) 317.44 424 P
-0.14 (includes some features \050e.g., producer prefetch\051 that may be of mar) 72 408 P
-0.14 (ginal performance ben-) 392.39 408 P
0.59 (e\336t, but have been included because the prototype is an experimental machine. Thus, we) 72 392 P
0.82 (expect future lar) 72 376 P
0.82 (ge-scale shared-memory systems, that must already deal with additional) 152.02 376 P
0.39 (scalability issues \050e.g. limited pointer directories\051, to include less rather than more opera-) 72 360 P
(tions and protocol features than the DASH prototype.) 72 344 T
FMENDPAGE
%%EndPage: "56" 29
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 28 1
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
